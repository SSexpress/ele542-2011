
Proto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ec8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002ec8  00002f5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d2  00800168  00800168  00003064  2**0
                  ALLOC
  3 .debug_aranges 00000120  00000000  00000000  00003064  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000010d1  00000000  00000000  00003184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000023ac  00000000  00000000  00004255  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c9  00000000  00000000  00006601  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001896  00000000  00000000  00006cca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  00008560  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000079f  00000000  00000000  000088b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000198  00000000  00000000  0000904f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__vector_15>
      40:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 33       	cpi	r26, 0x3A	; 58
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
//unsigned char led;


int main(void)
{
	initPorts();
      92:	0e 94 94 0c 	call	0x1928	; 0x1928 <initPorts>
	
	
	uart_init();			//Set uart COM on RS-232
      96:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <uart_init>

    sei();//enable interrupts
      9a:	78 94       	sei
	
	initADC();				//initialize ADC
      9c:	0e 94 8d 00 	call	0x11a	; 0x11a <initADC>
	initTimer1();			//initialize Timer1
      a0:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <initTimer1>
	//calibrateMotors();

	configureTWI();
      a4:	0e 94 bb 0c 	call	0x1976	; 0x1976 <configureTWI>

    while(1) // loop forever
	{
		checkControls();
      a8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <checkControls>
		
		//also disable interrupts and everything ??? 
		//in that case, receiver state should also be reset and kept to its value
		if (robotState == STATE_ALIVE)
      ac:	80 91 2c 02 	lds	r24, 0x022C
      b0:	81 30       	cpi	r24, 0x01	; 1
      b2:	59 f4       	brne	.+22     	; 0xca <main+0x38>
		{
			uartReceive();
      b4:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <uartReceive>
			checkForAdc();
      b8:	0e 94 60 03 	call	0x6c0	; 0x6c0 <checkForAdc>
			dealWithMotors();
      bc:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <dealWithMotors>
			processTWI();
      c0:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <processTWI>
			//TWI thingy
	    
		    //PORTB = 0xFF;        
			flashLeds();
      c4:	0e 94 32 08 	call	0x1064	; 0x1064 <flashLeds>
      c8:	02 c0       	rjmp	.+4      	; 0xce <main+0x3c>

		}
		else
		{
			ledDeadState();	//keep led ouptus for DEAD STATE
      ca:	0e 94 1a 07 	call	0xe34	; 0xe34 <ledDeadState>
		}

		if (ReceiverState == STATE_ANGLE_RECEIVED)
      ce:	80 91 23 02 	lds	r24, 0x0223
      d2:	83 30       	cpi	r24, 0x03	; 3
      d4:	49 f7       	brne	.-46     	; 0xa8 <main+0x16>
		{
			ReceiverState = STATE_WAITING;		
      d6:	10 92 23 02 	sts	0x0223, r1
      da:	e6 cf       	rjmp	.-52     	; 0xa8 <main+0x16>

000000dc <startADC>:
		readADC();
}

void startADC(void)
{
	while (adcCompletedFlag == 0) {}
      dc:	80 91 c9 01 	lds	r24, 0x01C9
      e0:	88 23       	and	r24, r24
      e2:	e1 f3       	breq	.-8      	; 0xdc <startADC>
	adcCompletedFlag = 0;
      e4:	10 92 c9 01 	sts	0x01C9, r1
}

void waitValueIsReady(void)
{
	//adcCompletedFlag = 0;		
	while (adcCompletedFlag == 0){}
      e8:	80 91 c9 01 	lds	r24, 0x01C9
      ec:	88 23       	and	r24, r24
      ee:	e1 f3       	breq	.-8      	; 0xe8 <startADC+0xc>

	adcCompletedFlag = 0;
      f0:	10 92 c9 01 	sts	0x01C9, r1
	while (adcCompletedFlag == 0){}
      f4:	80 91 c9 01 	lds	r24, 0x01C9
      f8:	88 23       	and	r24, r24
      fa:	e1 f3       	breq	.-8      	; 0xf4 <startADC+0x18>
void startADC(void)
{
	while (adcCompletedFlag == 0) {}
	adcCompletedFlag = 0;
	waitValueIsReady();
	while (adcCompletedFlag == 0) {}
      fc:	80 91 c9 01 	lds	r24, 0x01C9
     100:	88 23       	and	r24, r24
     102:	e1 f3       	breq	.-8      	; 0xfc <startADC+0x20>
	adcCompletedFlag = 0;
     104:	10 92 c9 01 	sts	0x01C9, r1
}
     108:	08 95       	ret

0000010a <stopADC>:

void stopADC(void)
{
	while (adcCompletedFlag == 1) {}
     10a:	80 91 c9 01 	lds	r24, 0x01C9
     10e:	81 30       	cpi	r24, 0x01	; 1
     110:	e1 f3       	breq	.-8      	; 0x10a <stopADC>
	adcCompletedFlag = 1;
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	80 93 c9 01 	sts	0x01C9, r24
}
     118:	08 95       	ret

0000011a <initADC>:


void initADC(void)
{
     11a:	ef 92       	push	r14
     11c:	ff 92       	push	r15
     11e:	0f 93       	push	r16
     120:	1f 93       	push	r17
	//ADCSRA = (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN)|(1<<ADIE)|(1<<ADSC);

	SFIOR = (0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0);
     122:	10 be       	out	0x30, r1	; 48

	adcMUXValue = ADC_MUX_READ_LEFT;
     124:	10 92 ef 01 	sts	0x01EF, r1
	ADMUX = adcMUXValue;
     128:	80 91 ef 01 	lds	r24, 0x01EF
     12c:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA = (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN)|(1<<ADIE)|(1<<ADSC)|(1<<ADATE);
     12e:	8f ee       	ldi	r24, 0xEF	; 239
     130:	86 b9       	out	0x06, r24	; 6

	adcCalibrationFlag = 0;
     132:	10 92 2a 02 	sts	0x022A, r1
	adcValuesCounter = 0;
     136:	10 92 37 02 	sts	0x0237, r1
     13a:	10 92 36 02 	sts	0x0236, r1
	TotalValueRight = 0;
     13e:	10 92 35 02 	sts	0x0235, r1
     142:	10 92 34 02 	sts	0x0234, r1
	TotalValueLeft = 0;
     146:	10 92 fd 01 	sts	0x01FD, r1
     14a:	10 92 fc 01 	sts	0x01FC, r1
	// Initiatlisation des valeurs limites précalibration
	// Entre -1023 et -0; 0 et 1023.
	/* Inutile
	leftLimits.adcMaxValueHigh = MAX_ADC_VALUE;
	leftLimits.adcMaxValueLow = MAX_ADC_VALUE; */
	leftLimits.posMax = (float)MAX_ADC_VALUE;
     14e:	0f 2e       	mov	r0, r31
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	ef 2e       	mov	r14, r31
     154:	f0 ec       	ldi	r31, 0xC0	; 192
     156:	ff 2e       	mov	r15, r31
     158:	ff e7       	ldi	r31, 0x7F	; 127
     15a:	0f 2f       	mov	r16, r31
     15c:	f4 e4       	ldi	r31, 0x44	; 68
     15e:	1f 2f       	mov	r17, r31
     160:	f0 2d       	mov	r31, r0
     162:	e0 92 fe 01 	sts	0x01FE, r14
     166:	f0 92 ff 01 	sts	0x01FF, r15
     16a:	00 93 00 02 	sts	0x0200, r16
     16e:	10 93 01 02 	sts	0x0201, r17
	leftLimits.negMax = (float)((-1)*MAX_ADC_VALUE);
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 ec       	ldi	r19, 0xC0	; 192
     176:	4f e7       	ldi	r20, 0x7F	; 127
     178:	54 ec       	ldi	r21, 0xC4	; 196
     17a:	20 93 02 02 	sts	0x0202, r18
     17e:	30 93 03 02 	sts	0x0203, r19
     182:	40 93 04 02 	sts	0x0204, r20
     186:	50 93 05 02 	sts	0x0205, r21
	leftLimits.posZero = 0.0;
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b0 e0       	ldi	r27, 0x00	; 0
     192:	80 93 06 02 	sts	0x0206, r24
     196:	90 93 07 02 	sts	0x0207, r25
     19a:	a0 93 08 02 	sts	0x0208, r26
     19e:	b0 93 09 02 	sts	0x0209, r27
	leftLimits.negZero = 0.0;
     1a2:	80 93 0a 02 	sts	0x020A, r24
     1a6:	90 93 0b 02 	sts	0x020B, r25
     1aa:	a0 93 0c 02 	sts	0x020C, r26
     1ae:	b0 93 0d 02 	sts	0x020D, r27
	
	/* Inutile
	rightLimits.adcMaxValueHigh = MAX_ADC_VALUE;
	rightLimits.adcMaxValueLow = MAX_ADC_VALUE; */
	rightLimits.posMax = (float)MAX_ADC_VALUE;
     1b2:	e0 92 9a 01 	sts	0x019A, r14
     1b6:	f0 92 9b 01 	sts	0x019B, r15
     1ba:	00 93 9c 01 	sts	0x019C, r16
     1be:	10 93 9d 01 	sts	0x019D, r17
	rightLimits.negMax = (float)((-1)*MAX_ADC_VALUE);
     1c2:	20 93 9e 01 	sts	0x019E, r18
     1c6:	30 93 9f 01 	sts	0x019F, r19
     1ca:	40 93 a0 01 	sts	0x01A0, r20
     1ce:	50 93 a1 01 	sts	0x01A1, r21
	rightLimits.posZero = 0.0;
     1d2:	80 93 a2 01 	sts	0x01A2, r24
     1d6:	90 93 a3 01 	sts	0x01A3, r25
     1da:	a0 93 a4 01 	sts	0x01A4, r26
     1de:	b0 93 a5 01 	sts	0x01A5, r27
	rightLimits.negZero = 0.0;
     1e2:	80 93 a6 01 	sts	0x01A6, r24
     1e6:	90 93 a7 01 	sts	0x01A7, r25
     1ea:	a0 93 a8 01 	sts	0x01A8, r26
     1ee:	b0 93 a9 01 	sts	0x01A9, r27

	adcCompileReadyFlag = 0;
     1f2:	10 92 38 02 	sts	0x0238, r1
	

}
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	ff 90       	pop	r15
     1fc:	ef 90       	pop	r14
     1fe:	08 95       	ret

00000200 <fetchAdcValues>:
}

void fetchAdcValues(void)
{
	//from ADC... to integer
	if (adcMUXValue == ADC_MUX_READ_LEFT)
     200:	80 91 ef 01 	lds	r24, 0x01EF
     204:	88 23       	and	r24, r24
     206:	e9 f4       	brne	.+58     	; 0x242 <fetchAdcValues+0x42>
	{
		adcMUXValue = ADC_MUX_READ_RIGHT;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 93 ef 01 	sts	0x01EF, r24
		ADMUX = ADC_MUX_READ_RIGHT;
     20e:	87 b9       	out	0x07, r24	; 7

		TotalValueLeft += (int)((unsigned char)ADCL);
     210:	80 91 fc 01 	lds	r24, 0x01FC
     214:	90 91 fd 01 	lds	r25, 0x01FD
     218:	24 b1       	in	r18, 0x04	; 4
     21a:	82 0f       	add	r24, r18
     21c:	91 1d       	adc	r25, r1
     21e:	90 93 fd 01 	sts	0x01FD, r25
     222:	80 93 fc 01 	sts	0x01FC, r24
		TotalValueLeft += (int)(((int)((unsigned char)ADCH))<<8);
     226:	40 91 fc 01 	lds	r20, 0x01FC
     22a:	50 91 fd 01 	lds	r21, 0x01FD
     22e:	25 b1       	in	r18, 0x05	; 5
     230:	92 2f       	mov	r25, r18
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	84 0f       	add	r24, r20
     236:	95 1f       	adc	r25, r21
     238:	90 93 fd 01 	sts	0x01FD, r25
     23c:	80 93 fc 01 	sts	0x01FC, r24
     240:	08 95       	ret


	}
	else if (adcMUXValue == ADC_MUX_READ_RIGHT)
     242:	80 91 ef 01 	lds	r24, 0x01EF
     246:	81 30       	cpi	r24, 0x01	; 1
     248:	21 f5       	brne	.+72     	; 0x292 <fetchAdcValues+0x92>
	{
		adcMUXValue = ADC_MUX_READ_LEFT;
     24a:	10 92 ef 01 	sts	0x01EF, r1
		ADMUX = ADC_MUX_READ_LEFT;
     24e:	17 b8       	out	0x07, r1	; 7

		TotalValueRight += (int)((unsigned char)ADCL);
     250:	80 91 34 02 	lds	r24, 0x0234
     254:	90 91 35 02 	lds	r25, 0x0235
     258:	24 b1       	in	r18, 0x04	; 4
     25a:	82 0f       	add	r24, r18
     25c:	91 1d       	adc	r25, r1
     25e:	90 93 35 02 	sts	0x0235, r25
     262:	80 93 34 02 	sts	0x0234, r24
		TotalValueRight += (int)(((int)((unsigned char)ADCH))<<8);
     266:	40 91 34 02 	lds	r20, 0x0234
     26a:	50 91 35 02 	lds	r21, 0x0235
     26e:	25 b1       	in	r18, 0x05	; 5
     270:	92 2f       	mov	r25, r18
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	84 0f       	add	r24, r20
     276:	95 1f       	adc	r25, r21
     278:	90 93 35 02 	sts	0x0235, r25
     27c:	80 93 34 02 	sts	0x0234, r24
	

		adcValuesCounter++;
     280:	80 91 36 02 	lds	r24, 0x0236
     284:	90 91 37 02 	lds	r25, 0x0237
     288:	01 96       	adiw	r24, 0x01	; 1
     28a:	90 93 37 02 	sts	0x0237, r25
     28e:	80 93 36 02 	sts	0x0236, r24
     292:	08 95       	ret

00000294 <readADC>:

}

void readADC(void)
{
	if (adcCompileReadyFlag == 0)
     294:	80 91 38 02 	lds	r24, 0x0238
     298:	88 23       	and	r24, r24
     29a:	11 f4       	brne	.+4      	; 0x2a0 <readADC+0xc>
		fetchAdcValues();	
     29c:	0e 94 00 01 	call	0x200	; 0x200 <fetchAdcValues>

	if (adcValuesCounter == MAX_ADC_SAMPLES)
     2a0:	80 91 36 02 	lds	r24, 0x0236
     2a4:	90 91 37 02 	lds	r25, 0x0237
     2a8:	0c 97       	sbiw	r24, 0x0c	; 12
     2aa:	19 f4       	brne	.+6      	; 0x2b2 <readADC+0x1e>
	{
		adcCompileReadyFlag = 1;
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	80 93 38 02 	sts	0x0238, r24
     2b2:	08 95       	ret

000002b4 <__vector_16>:
#include "ADCcontrol.h"


ISR(ADC_vect)
{
     2b4:	1f 92       	push	r1
     2b6:	0f 92       	push	r0
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	0f 92       	push	r0
     2bc:	11 24       	eor	r1, r1
     2be:	2f 93       	push	r18
     2c0:	3f 93       	push	r19
     2c2:	4f 93       	push	r20
     2c4:	5f 93       	push	r21
     2c6:	6f 93       	push	r22
     2c8:	7f 93       	push	r23
     2ca:	8f 93       	push	r24
     2cc:	9f 93       	push	r25
     2ce:	af 93       	push	r26
     2d0:	bf 93       	push	r27
     2d2:	ef 93       	push	r30
     2d4:	ff 93       	push	r31
	if (adcCompletedFlag == 0)
     2d6:	80 91 c9 01 	lds	r24, 0x01C9
     2da:	88 23       	and	r24, r24
     2dc:	11 f4       	brne	.+4      	; 0x2e2 <__vector_16+0x2e>
		readADC();
     2de:	0e 94 4a 01 	call	0x294	; 0x294 <readADC>
}
     2e2:	ff 91       	pop	r31
     2e4:	ef 91       	pop	r30
     2e6:	bf 91       	pop	r27
     2e8:	af 91       	pop	r26
     2ea:	9f 91       	pop	r25
     2ec:	8f 91       	pop	r24
     2ee:	7f 91       	pop	r23
     2f0:	6f 91       	pop	r22
     2f2:	5f 91       	pop	r21
     2f4:	4f 91       	pop	r20
     2f6:	3f 91       	pop	r19
     2f8:	2f 91       	pop	r18
     2fa:	0f 90       	pop	r0
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	0f 90       	pop	r0
     300:	1f 90       	pop	r1
     302:	18 95       	reti

00000304 <compileAdcData>:

		adcValuesCounter++;
	}
}
void compileAdcData(void)
{	
     304:	6f 92       	push	r6
     306:	7f 92       	push	r7
     308:	8f 92       	push	r8
     30a:	9f 92       	push	r9
     30c:	af 92       	push	r10
     30e:	bf 92       	push	r11
     310:	cf 92       	push	r12
     312:	df 92       	push	r13
     314:	ef 92       	push	r14
     316:	ff 92       	push	r15
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
	//cli();


	//LEFT MOTOR
	//adcValues.left = TotalValueLeft * MAX_ADC_SAMPLES_RATIO;
	adcValues.left = TotalValueLeft / MAX_ADC_SAMPLES; 
     31c:	80 91 fc 01 	lds	r24, 0x01FC
     320:	90 91 fd 01 	lds	r25, 0x01FD
     324:	6c e0       	ldi	r22, 0x0C	; 12
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__udivmodhi4>
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 a9 14 	call	0x2952	; 0x2952 <__floatunsisf>
     334:	60 93 90 01 	sts	0x0190, r22
     338:	70 93 91 01 	sts	0x0191, r23
     33c:	80 93 92 01 	sts	0x0192, r24
     340:	90 93 93 01 	sts	0x0193, r25
	adcValues.right = TotalValueRight / MAX_ADC_SAMPLES;
     344:	80 91 34 02 	lds	r24, 0x0234
     348:	90 91 35 02 	lds	r25, 0x0235
     34c:	6c e0       	ldi	r22, 0x0C	; 12
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__udivmodhi4>
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 a9 14 	call	0x2952	; 0x2952 <__floatunsisf>
     35c:	60 93 94 01 	sts	0x0194, r22
     360:	70 93 95 01 	sts	0x0195, r23
     364:	80 93 96 01 	sts	0x0196, r24
     368:	90 93 97 01 	sts	0x0197, r25
	//Check motor direction input
	if (MOTOR_DIR_IN_LEFT & PINA)
     36c:	ca 9b       	sbis	0x19, 2	; 25
     36e:	59 c0       	rjmp	.+178    	; 0x422 <compileAdcData+0x11e>
	//BACKWARD
	{
		adcValues.left = ((-1)*(adcValues.left)); //adcValues sur 1024
     370:	80 91 90 01 	lds	r24, 0x0190
     374:	90 91 91 01 	lds	r25, 0x0191
     378:	a0 91 92 01 	lds	r26, 0x0192
     37c:	b0 91 93 01 	lds	r27, 0x0193
     380:	b0 58       	subi	r27, 0x80	; 128
     382:	80 93 90 01 	sts	0x0190, r24
     386:	90 93 91 01 	sts	0x0191, r25
     38a:	a0 93 92 01 	sts	0x0192, r26
     38e:	b0 93 93 01 	sts	0x0193, r27

		if (adcValues.left < leftLimits.negZero)  // Comparaison avec valeur sur 1
     392:	60 91 90 01 	lds	r22, 0x0190
     396:	70 91 91 01 	lds	r23, 0x0191
     39a:	80 91 92 01 	lds	r24, 0x0192
     39e:	90 91 93 01 	lds	r25, 0x0193
     3a2:	60 90 0a 02 	lds	r6, 0x020A
     3a6:	70 90 0b 02 	lds	r7, 0x020B
     3aa:	80 90 0c 02 	lds	r8, 0x020C
     3ae:	90 90 0d 02 	lds	r9, 0x020D
     3b2:	a4 01       	movw	r20, r8
     3b4:	93 01       	movw	r18, r6
     3b6:	0e 94 97 13 	call	0x272e	; 0x272e <__ltsf2>
     3ba:	88 23       	and	r24, r24
     3bc:	0c f0       	brlt	.+2      	; 0x3c0 <compileAdcData+0xbc>
     3be:	89 c0       	rjmp	.+274    	; 0x4d2 <compileAdcData+0x1ce>
		{
			//adcValues.left -= leftLimits.negZero; //REMOVE
			if (adcValues.left < leftLimits.negMax)
     3c0:	60 91 90 01 	lds	r22, 0x0190
     3c4:	70 91 91 01 	lds	r23, 0x0191
     3c8:	80 91 92 01 	lds	r24, 0x0192
     3cc:	90 91 93 01 	lds	r25, 0x0193
     3d0:	a0 90 02 02 	lds	r10, 0x0202
     3d4:	b0 90 03 02 	lds	r11, 0x0203
     3d8:	c0 90 04 02 	lds	r12, 0x0204
     3dc:	d0 90 05 02 	lds	r13, 0x0205
     3e0:	a6 01       	movw	r20, r12
     3e2:	95 01       	movw	r18, r10
     3e4:	0e 94 97 13 	call	0x272e	; 0x272e <__ltsf2>
     3e8:	88 23       	and	r24, r24
     3ea:	44 f4       	brge	.+16     	; 0x3fc <compileAdcData+0xf8>
			{
				adcValues.left = leftLimits.negMax;
     3ec:	a0 92 90 01 	sts	0x0190, r10
     3f0:	b0 92 91 01 	sts	0x0191, r11
     3f4:	c0 92 92 01 	sts	0x0192, r12
     3f8:	d0 92 93 01 	sts	0x0193, r13
			}
			//On ramène sur 1
			adcValues.left = (-1) * (adcValues.left-leftLimits.negZero) / (leftLimits.negMax-leftLimits.negZero);
     3fc:	60 91 90 01 	lds	r22, 0x0190
     400:	70 91 91 01 	lds	r23, 0x0191
     404:	80 91 92 01 	lds	r24, 0x0192
     408:	90 91 93 01 	lds	r25, 0x0193
     40c:	a4 01       	movw	r20, r8
     40e:	93 01       	movw	r18, r6
     410:	0e 94 33 11 	call	0x2266	; 0x2266 <__subsf3>
     414:	7b 01       	movw	r14, r22
     416:	8c 01       	movw	r16, r24
     418:	17 fb       	bst	r17, 7
     41a:	10 95       	com	r17
     41c:	17 f9       	bld	r17, 7
     41e:	10 95       	com	r17
     420:	43 c0       	rjmp	.+134    	; 0x4a8 <compileAdcData+0x1a4>
		}
	}
	else
	//FORWARD
	{
		if (adcValues.left > leftLimits.posZero)
     422:	60 91 90 01 	lds	r22, 0x0190
     426:	70 91 91 01 	lds	r23, 0x0191
     42a:	80 91 92 01 	lds	r24, 0x0192
     42e:	90 91 93 01 	lds	r25, 0x0193
     432:	60 90 06 02 	lds	r6, 0x0206
     436:	70 90 07 02 	lds	r7, 0x0207
     43a:	80 90 08 02 	lds	r8, 0x0208
     43e:	90 90 09 02 	lds	r9, 0x0209
     442:	a4 01       	movw	r20, r8
     444:	93 01       	movw	r18, r6
     446:	0e 94 37 13 	call	0x266e	; 0x266e <__gtsf2>
     44a:	18 16       	cp	r1, r24
     44c:	0c f0       	brlt	.+2      	; 0x450 <compileAdcData+0x14c>
     44e:	41 c0       	rjmp	.+130    	; 0x4d2 <compileAdcData+0x1ce>
		{
		//	adcValues.left -= leftLimits.posZero; //REMOVE
			if (adcValues.left > leftLimits.posMax)
     450:	60 91 90 01 	lds	r22, 0x0190
     454:	70 91 91 01 	lds	r23, 0x0191
     458:	80 91 92 01 	lds	r24, 0x0192
     45c:	90 91 93 01 	lds	r25, 0x0193
     460:	a0 90 fe 01 	lds	r10, 0x01FE
     464:	b0 90 ff 01 	lds	r11, 0x01FF
     468:	c0 90 00 02 	lds	r12, 0x0200
     46c:	d0 90 01 02 	lds	r13, 0x0201
     470:	a6 01       	movw	r20, r12
     472:	95 01       	movw	r18, r10
     474:	0e 94 37 13 	call	0x266e	; 0x266e <__gtsf2>
     478:	18 16       	cp	r1, r24
     47a:	44 f4       	brge	.+16     	; 0x48c <compileAdcData+0x188>
			{
				adcValues.left = leftLimits.posMax;
     47c:	a0 92 90 01 	sts	0x0190, r10
     480:	b0 92 91 01 	sts	0x0191, r11
     484:	c0 92 92 01 	sts	0x0192, r12
     488:	d0 92 93 01 	sts	0x0193, r13
			}
			adcValues.left = (adcValues.left-leftLimits.posZero) / (leftLimits.posMax-leftLimits.posZero);
     48c:	60 91 90 01 	lds	r22, 0x0190
     490:	70 91 91 01 	lds	r23, 0x0191
     494:	80 91 92 01 	lds	r24, 0x0192
     498:	90 91 93 01 	lds	r25, 0x0193
     49c:	a4 01       	movw	r20, r8
     49e:	93 01       	movw	r18, r6
     4a0:	0e 94 33 11 	call	0x2266	; 0x2266 <__subsf3>
     4a4:	7b 01       	movw	r14, r22
     4a6:	8c 01       	movw	r16, r24
     4a8:	c6 01       	movw	r24, r12
     4aa:	b5 01       	movw	r22, r10
     4ac:	a4 01       	movw	r20, r8
     4ae:	93 01       	movw	r18, r6
     4b0:	0e 94 33 11 	call	0x2266	; 0x2266 <__subsf3>
     4b4:	9b 01       	movw	r18, r22
     4b6:	ac 01       	movw	r20, r24
     4b8:	c8 01       	movw	r24, r16
     4ba:	b7 01       	movw	r22, r14
     4bc:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
     4c0:	60 93 90 01 	sts	0x0190, r22
     4c4:	70 93 91 01 	sts	0x0191, r23
     4c8:	80 93 92 01 	sts	0x0192, r24
     4cc:	90 93 93 01 	sts	0x0193, r25
     4d0:	0c c0       	rjmp	.+24     	; 0x4ea <compileAdcData+0x1e6>
			//adcValues.left = (adcValues.left-leftLimits.posZero) / leftLimits.adcMaxValueHigh; //adcValues sur 1
		}
		else
		{
			//adcValues.left = 0.0; Non, la valeur doit être ramené à posZero
			adcValues.left = 0.0;
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	a0 e0       	ldi	r26, 0x00	; 0
     4d8:	b0 e0       	ldi	r27, 0x00	; 0
     4da:	80 93 90 01 	sts	0x0190, r24
     4de:	90 93 91 01 	sts	0x0191, r25
     4e2:	a0 93 92 01 	sts	0x0192, r26
     4e6:	b0 93 93 01 	sts	0x0193, r27

	//RIGHT MOTOR
	//adcValues.right = TotalValueRight * MAX_ADC_SAMPLES_RATIO;
	//adcValues.right = ActualValueRight / MAX_ADC_SAMPLES;
	//Check motor direction input
	if (MOTOR_DIR_IN_RIGHT & PINA)
     4ea:	cb 9b       	sbis	0x19, 3	; 25
     4ec:	69 c0       	rjmp	.+210    	; 0x5c0 <compileAdcData+0x2bc>
	//BACKWARD
	{
		adcValues.right = ((-1)*adcValues.right); //adcValues sur 1024
     4ee:	80 91 94 01 	lds	r24, 0x0194
     4f2:	90 91 95 01 	lds	r25, 0x0195
     4f6:	a0 91 96 01 	lds	r26, 0x0196
     4fa:	b0 91 97 01 	lds	r27, 0x0197
     4fe:	b0 58       	subi	r27, 0x80	; 128
     500:	80 93 94 01 	sts	0x0194, r24
     504:	90 93 95 01 	sts	0x0195, r25
     508:	a0 93 96 01 	sts	0x0196, r26
     50c:	b0 93 97 01 	sts	0x0197, r27
		if (adcValues.right < rightLimits.negZero)
     510:	60 91 94 01 	lds	r22, 0x0194
     514:	70 91 95 01 	lds	r23, 0x0195
     518:	80 91 96 01 	lds	r24, 0x0196
     51c:	90 91 97 01 	lds	r25, 0x0197
     520:	a0 90 a6 01 	lds	r10, 0x01A6
     524:	b0 90 a7 01 	lds	r11, 0x01A7
     528:	c0 90 a8 01 	lds	r12, 0x01A8
     52c:	d0 90 a9 01 	lds	r13, 0x01A9
     530:	a6 01       	movw	r20, r12
     532:	95 01       	movw	r18, r10
     534:	0e 94 97 13 	call	0x272e	; 0x272e <__ltsf2>
     538:	88 23       	and	r24, r24
     53a:	0c f0       	brlt	.+2      	; 0x53e <compileAdcData+0x23a>
     53c:	99 c0       	rjmp	.+306    	; 0x670 <compileAdcData+0x36c>
		{
			//adcValues.right -= rightLimits.negZero; //REMOVE
			if (adcValues.right < leftLimits.negMax)
     53e:	60 91 94 01 	lds	r22, 0x0194
     542:	70 91 95 01 	lds	r23, 0x0195
     546:	80 91 96 01 	lds	r24, 0x0196
     54a:	90 91 97 01 	lds	r25, 0x0197
     54e:	20 91 02 02 	lds	r18, 0x0202
     552:	30 91 03 02 	lds	r19, 0x0203
     556:	40 91 04 02 	lds	r20, 0x0204
     55a:	50 91 05 02 	lds	r21, 0x0205
     55e:	0e 94 97 13 	call	0x272e	; 0x272e <__ltsf2>
     562:	88 23       	and	r24, r24
     564:	84 f4       	brge	.+32     	; 0x586 <compileAdcData+0x282>
			{
				adcValues.right = rightLimits.negMax;
     566:	80 91 9e 01 	lds	r24, 0x019E
     56a:	90 91 9f 01 	lds	r25, 0x019F
     56e:	a0 91 a0 01 	lds	r26, 0x01A0
     572:	b0 91 a1 01 	lds	r27, 0x01A1
     576:	80 93 94 01 	sts	0x0194, r24
     57a:	90 93 95 01 	sts	0x0195, r25
     57e:	a0 93 96 01 	sts	0x0196, r26
     582:	b0 93 97 01 	sts	0x0197, r27
			}
			adcValues.right = (-1) * (adcValues.right-rightLimits.negZero) / (rightLimits.negMax-rightLimits.negZero);
     586:	60 91 94 01 	lds	r22, 0x0194
     58a:	70 91 95 01 	lds	r23, 0x0195
     58e:	80 91 96 01 	lds	r24, 0x0196
     592:	90 91 97 01 	lds	r25, 0x0197
     596:	a6 01       	movw	r20, r12
     598:	95 01       	movw	r18, r10
     59a:	0e 94 33 11 	call	0x2266	; 0x2266 <__subsf3>
     59e:	7b 01       	movw	r14, r22
     5a0:	8c 01       	movw	r16, r24
     5a2:	17 fb       	bst	r17, 7
     5a4:	10 95       	com	r17
     5a6:	17 f9       	bld	r17, 7
     5a8:	10 95       	com	r17
     5aa:	60 91 9e 01 	lds	r22, 0x019E
     5ae:	70 91 9f 01 	lds	r23, 0x019F
     5b2:	80 91 a0 01 	lds	r24, 0x01A0
     5b6:	90 91 a1 01 	lds	r25, 0x01A1
     5ba:	a6 01       	movw	r20, r12
     5bc:	95 01       	movw	r18, r10
     5be:	47 c0       	rjmp	.+142    	; 0x64e <compileAdcData+0x34a>
		}
	}
	else
	//FORWARD
	{
		if (adcValues.right > rightLimits.posZero)
     5c0:	60 91 94 01 	lds	r22, 0x0194
     5c4:	70 91 95 01 	lds	r23, 0x0195
     5c8:	80 91 96 01 	lds	r24, 0x0196
     5cc:	90 91 97 01 	lds	r25, 0x0197
     5d0:	60 90 a2 01 	lds	r6, 0x01A2
     5d4:	70 90 a3 01 	lds	r7, 0x01A3
     5d8:	80 90 a4 01 	lds	r8, 0x01A4
     5dc:	90 90 a5 01 	lds	r9, 0x01A5
     5e0:	a4 01       	movw	r20, r8
     5e2:	93 01       	movw	r18, r6
     5e4:	0e 94 37 13 	call	0x266e	; 0x266e <__gtsf2>
     5e8:	18 16       	cp	r1, r24
     5ea:	0c f0       	brlt	.+2      	; 0x5ee <compileAdcData+0x2ea>
     5ec:	41 c0       	rjmp	.+130    	; 0x670 <compileAdcData+0x36c>
		{
		//	adcValues.right -= rightLimits.posZero; //REMOVE
			if (adcValues.right > rightLimits.posMax)
     5ee:	60 91 94 01 	lds	r22, 0x0194
     5f2:	70 91 95 01 	lds	r23, 0x0195
     5f6:	80 91 96 01 	lds	r24, 0x0196
     5fa:	90 91 97 01 	lds	r25, 0x0197
     5fe:	a0 90 9a 01 	lds	r10, 0x019A
     602:	b0 90 9b 01 	lds	r11, 0x019B
     606:	c0 90 9c 01 	lds	r12, 0x019C
     60a:	d0 90 9d 01 	lds	r13, 0x019D
     60e:	a6 01       	movw	r20, r12
     610:	95 01       	movw	r18, r10
     612:	0e 94 37 13 	call	0x266e	; 0x266e <__gtsf2>
     616:	18 16       	cp	r1, r24
     618:	44 f4       	brge	.+16     	; 0x62a <compileAdcData+0x326>
			{
				adcValues.right = rightLimits.posMax; 
     61a:	a0 92 94 01 	sts	0x0194, r10
     61e:	b0 92 95 01 	sts	0x0195, r11
     622:	c0 92 96 01 	sts	0x0196, r12
     626:	d0 92 97 01 	sts	0x0197, r13
			}
			adcValues.right = (adcValues.right-rightLimits.posZero) / (rightLimits.posMax-rightLimits.posZero);
     62a:	60 91 94 01 	lds	r22, 0x0194
     62e:	70 91 95 01 	lds	r23, 0x0195
     632:	80 91 96 01 	lds	r24, 0x0196
     636:	90 91 97 01 	lds	r25, 0x0197
     63a:	a4 01       	movw	r20, r8
     63c:	93 01       	movw	r18, r6
     63e:	0e 94 33 11 	call	0x2266	; 0x2266 <__subsf3>
     642:	7b 01       	movw	r14, r22
     644:	8c 01       	movw	r16, r24
     646:	c6 01       	movw	r24, r12
     648:	b5 01       	movw	r22, r10
     64a:	a4 01       	movw	r20, r8
     64c:	93 01       	movw	r18, r6
     64e:	0e 94 33 11 	call	0x2266	; 0x2266 <__subsf3>
     652:	9b 01       	movw	r18, r22
     654:	ac 01       	movw	r20, r24
     656:	c8 01       	movw	r24, r16
     658:	b7 01       	movw	r22, r14
     65a:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
     65e:	60 93 94 01 	sts	0x0194, r22
     662:	70 93 95 01 	sts	0x0195, r23
     666:	80 93 96 01 	sts	0x0196, r24
     66a:	90 93 97 01 	sts	0x0197, r25
     66e:	0c c0       	rjmp	.+24     	; 0x688 <compileAdcData+0x384>
			//adcValues.right = adcValues.right / rightLimits.adcMaxValueHigh; //adcValues sur 1
		}
		else
		{
			//adcValues.right = 0.0; NOPE
			adcValues.right = 0.0;
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	a0 e0       	ldi	r26, 0x00	; 0
     676:	b0 e0       	ldi	r27, 0x00	; 0
     678:	80 93 94 01 	sts	0x0194, r24
     67c:	90 93 95 01 	sts	0x0195, r25
     680:	a0 93 96 01 	sts	0x0196, r26
     684:	b0 93 97 01 	sts	0x0197, r27
	
		
//	sei();

	//reset values
	TotalValueRight = 0;
     688:	10 92 35 02 	sts	0x0235, r1
     68c:	10 92 34 02 	sts	0x0234, r1
	TotalValueLeft = 0;
     690:	10 92 fd 01 	sts	0x01FD, r1
     694:	10 92 fc 01 	sts	0x01FC, r1
	adcValuesCounter = 0;
     698:	10 92 37 02 	sts	0x0237, r1
     69c:	10 92 36 02 	sts	0x0236, r1
	adcCompletedFlag = 1;
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	80 93 c9 01 	sts	0x01C9, r24
}
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	df 90       	pop	r13
     6b0:	cf 90       	pop	r12
     6b2:	bf 90       	pop	r11
     6b4:	af 90       	pop	r10
     6b6:	9f 90       	pop	r9
     6b8:	8f 90       	pop	r8
     6ba:	7f 90       	pop	r7
     6bc:	6f 90       	pop	r6
     6be:	08 95       	ret

000006c0 <checkForAdc>:
		adcCompileReadyFlag = 1;
	}
}

void checkForAdc(void)
{
     6c0:	1f 93       	push	r17
	if (adcCompileReadyFlag == 1)
     6c2:	10 91 38 02 	lds	r17, 0x0238
     6c6:	11 30       	cpi	r17, 0x01	; 1
     6c8:	31 f4       	brne	.+12     	; 0x6d6 <checkForAdc+0x16>
	{	
		compileAdcData();
     6ca:	0e 94 82 01 	call	0x304	; 0x304 <compileAdcData>
		adcCompileReadyFlag = 0;
     6ce:	10 92 38 02 	sts	0x0238, r1
		motorReadyFlag = 1;
     6d2:	10 93 2b 02 	sts	0x022B, r17
	}
}
     6d6:	1f 91       	pop	r17
     6d8:	08 95       	ret

000006da <calibrateMotors>:
	adcValuesCounter = 0;
	adcCompletedFlag = 1;
}

void calibrateMotors(void)
{
     6da:	ef 92       	push	r14
     6dc:	ff 92       	push	r15
     6de:	0f 93       	push	r16
     6e0:	1f 93       	push	r17
	ADCcalib_value = 0.0;
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	a0 e0       	ldi	r26, 0x00	; 0
     6e8:	b0 e0       	ldi	r27, 0x00	; 0
     6ea:	80 93 be 01 	sts	0x01BE, r24
     6ee:	90 93 bf 01 	sts	0x01BF, r25
     6f2:	a0 93 c0 01 	sts	0x01C0, r26
     6f6:	b0 93 c1 01 	sts	0x01C1, r27
	adcCalibrationFlag = 1;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	80 93 2a 02 	sts	0x022A, r24
	//adcCompileReadyFlag = 1;
	//CA SERT A RIEN CE QUE JE FAIT POUR L'INSTANT... C'EST SUR LE RANGE QU'IL FAUT INTERPRÉTER LA DIFFÉRENCE
	//SINON C'EST JUSTE PLUS FACILE D'ATTEINDRE LES LIMITES
	//make sure motors are stopped
	OCR1AL = 0;
     700:	1a bc       	out	0x2a, r1	; 42
	OCR1AH = 0;
     702:	1b bc       	out	0x2b, r1	; 43
	OCR1BL = 0;
     704:	18 bc       	out	0x28, r1	; 40
	OCR1BH = 0;
     706:	19 bc       	out	0x29, r1	; 41
	/*#######################*/
	/* LEFT MOTOR CALIBRATION*/
	/*#######################*/

	// Left Max Forward Calibration
	PORTD = (LEFT_MOTOR_FORWARD)|(RIGHT_MOTOR_STOP);
     708:	84 e0       	ldi	r24, 0x04	; 4
     70a:	82 bb       	out	0x12, r24	; 18
	PORTA = (1<<CALIB_BIT);
     70c:	80 e1       	ldi	r24, 0x10	; 16
     70e:	8b bb       	out	0x1b, r24	; 27
	
	patate2 = 0;
     710:	10 92 d0 01 	sts	0x01D0, r1

	for (i=0;i<CAL_SAMPLES;i++){
     714:	10 92 f4 01 	sts	0x01F4, r1
     718:	25 c0       	rjmp	.+74     	; 0x764 <calibrateMotors+0x8a>
		while (adcCompileReadyFlag == 0);
     71a:	80 91 38 02 	lds	r24, 0x0238
     71e:	88 23       	and	r24, r24
     720:	e1 f3       	breq	.-8      	; 0x71a <calibrateMotors+0x40>
		compileAdcData();
     722:	0e 94 82 01 	call	0x304	; 0x304 <compileAdcData>
		//waitValueIsReady();
		ADCcalib_value += adcValues.left;
     726:	60 91 be 01 	lds	r22, 0x01BE
     72a:	70 91 bf 01 	lds	r23, 0x01BF
     72e:	80 91 c0 01 	lds	r24, 0x01C0
     732:	90 91 c1 01 	lds	r25, 0x01C1
     736:	20 91 90 01 	lds	r18, 0x0190
     73a:	30 91 91 01 	lds	r19, 0x0191
     73e:	40 91 92 01 	lds	r20, 0x0192
     742:	50 91 93 01 	lds	r21, 0x0193
     746:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__addsf3>
     74a:	60 93 be 01 	sts	0x01BE, r22
     74e:	70 93 bf 01 	sts	0x01BF, r23
     752:	80 93 c0 01 	sts	0x01C0, r24
     756:	90 93 c1 01 	sts	0x01C1, r25
	PORTD = (LEFT_MOTOR_FORWARD)|(RIGHT_MOTOR_STOP);
	PORTA = (1<<CALIB_BIT);
	
	patate2 = 0;

	for (i=0;i<CAL_SAMPLES;i++){
     75a:	80 91 f4 01 	lds	r24, 0x01F4
     75e:	8f 5f       	subi	r24, 0xFF	; 255
     760:	80 93 f4 01 	sts	0x01F4, r24
     764:	80 91 f4 01 	lds	r24, 0x01F4
     768:	89 31       	cpi	r24, 0x19	; 25
     76a:	b8 f2       	brcs	.-82     	; 0x71a <calibrateMotors+0x40>
		//	PORTB = 0x0F;
		//	while(1);	
		//}
		
	}
	leftLimits.posMaxTEMP = (ADCcalib_value * MAX_ADC_VALUE) / CAL_SAMPLES;
     76c:	60 91 be 01 	lds	r22, 0x01BE
     770:	70 91 bf 01 	lds	r23, 0x01BF
     774:	80 91 c0 01 	lds	r24, 0x01C0
     778:	90 91 c1 01 	lds	r25, 0x01C1
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 ec       	ldi	r19, 0xC0	; 192
     780:	4f e7       	ldi	r20, 0x7F	; 127
     782:	54 e4       	ldi	r21, 0x44	; 68
     784:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	48 ec       	ldi	r20, 0xC8	; 200
     78e:	51 e4       	ldi	r21, 0x41	; 65
     790:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
     794:	60 93 0e 02 	sts	0x020E, r22
     798:	70 93 0f 02 	sts	0x020F, r23
     79c:	80 93 10 02 	sts	0x0210, r24
     7a0:	90 93 11 02 	sts	0x0211, r25
	ADCcalib_value = 0.0;
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	a0 e0       	ldi	r26, 0x00	; 0
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	80 93 be 01 	sts	0x01BE, r24
     7b0:	90 93 bf 01 	sts	0x01BF, r25
     7b4:	a0 93 c0 01 	sts	0x01C0, r26
     7b8:	b0 93 c1 01 	sts	0x01C1, r27

	// Left Zero Forward Calibration
	PORTD = (LEFT_MOTOR_FORWARD)|(RIGHT_MOTOR_STOP);
     7bc:	84 e0       	ldi	r24, 0x04	; 4
     7be:	82 bb       	out	0x12, r24	; 18
	PORTA = (0<<CALIB_BIT);
     7c0:	1b ba       	out	0x1b, r1	; 27

	for (i=0;i<CAL_SAMPLES;i++){
     7c2:	10 92 f4 01 	sts	0x01F4, r1
     7c6:	25 c0       	rjmp	.+74     	; 0x812 <calibrateMotors+0x138>
		while (adcCompileReadyFlag == 0);
     7c8:	80 91 38 02 	lds	r24, 0x0238
     7cc:	88 23       	and	r24, r24
     7ce:	e1 f3       	breq	.-8      	; 0x7c8 <calibrateMotors+0xee>
		compileAdcData();
     7d0:	0e 94 82 01 	call	0x304	; 0x304 <compileAdcData>
		//waitValueIsReady();
		ADCcalib_value += adcValues.left;
     7d4:	60 91 be 01 	lds	r22, 0x01BE
     7d8:	70 91 bf 01 	lds	r23, 0x01BF
     7dc:	80 91 c0 01 	lds	r24, 0x01C0
     7e0:	90 91 c1 01 	lds	r25, 0x01C1
     7e4:	20 91 90 01 	lds	r18, 0x0190
     7e8:	30 91 91 01 	lds	r19, 0x0191
     7ec:	40 91 92 01 	lds	r20, 0x0192
     7f0:	50 91 93 01 	lds	r21, 0x0193
     7f4:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__addsf3>
     7f8:	60 93 be 01 	sts	0x01BE, r22
     7fc:	70 93 bf 01 	sts	0x01BF, r23
     800:	80 93 c0 01 	sts	0x01C0, r24
     804:	90 93 c1 01 	sts	0x01C1, r25

	// Left Zero Forward Calibration
	PORTD = (LEFT_MOTOR_FORWARD)|(RIGHT_MOTOR_STOP);
	PORTA = (0<<CALIB_BIT);

	for (i=0;i<CAL_SAMPLES;i++){
     808:	80 91 f4 01 	lds	r24, 0x01F4
     80c:	8f 5f       	subi	r24, 0xFF	; 255
     80e:	80 93 f4 01 	sts	0x01F4, r24
     812:	80 91 f4 01 	lds	r24, 0x01F4
     816:	89 31       	cpi	r24, 0x19	; 25
     818:	b8 f2       	brcs	.-82     	; 0x7c8 <calibrateMotors+0xee>
		while (adcCompileReadyFlag == 0);
		compileAdcData();
		//waitValueIsReady();
		ADCcalib_value += adcValues.left;
	}
	leftLimits.posZeroTEMP = (ADCcalib_value * MAX_ADC_VALUE) / CAL_SAMPLES;
     81a:	60 91 be 01 	lds	r22, 0x01BE
     81e:	70 91 bf 01 	lds	r23, 0x01BF
     822:	80 91 c0 01 	lds	r24, 0x01C0
     826:	90 91 c1 01 	lds	r25, 0x01C1
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 ec       	ldi	r19, 0xC0	; 192
     82e:	4f e7       	ldi	r20, 0x7F	; 127
     830:	54 e4       	ldi	r21, 0x44	; 68
     832:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	48 ec       	ldi	r20, 0xC8	; 200
     83c:	51 e4       	ldi	r21, 0x41	; 65
     83e:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
     842:	60 93 16 02 	sts	0x0216, r22
     846:	70 93 17 02 	sts	0x0217, r23
     84a:	80 93 18 02 	sts	0x0218, r24
     84e:	90 93 19 02 	sts	0x0219, r25
	ADCcalib_value = 0.0;	
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	a0 e0       	ldi	r26, 0x00	; 0
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	80 93 be 01 	sts	0x01BE, r24
     85e:	90 93 bf 01 	sts	0x01BF, r25
     862:	a0 93 c0 01 	sts	0x01C0, r26
     866:	b0 93 c1 01 	sts	0x01C1, r27

	// Left Max Backward Calibration
	PORTD = (LEFT_MOTOR_BACKWARD)|(RIGHT_MOTOR_STOP);
     86a:	88 e0       	ldi	r24, 0x08	; 8
     86c:	82 bb       	out	0x12, r24	; 18
	PORTA = (1<<CALIB_BIT);
     86e:	80 e1       	ldi	r24, 0x10	; 16
     870:	8b bb       	out	0x1b, r24	; 27

	for (i=0;i<CAL_SAMPLES;i++){
     872:	10 92 f4 01 	sts	0x01F4, r1
     876:	25 c0       	rjmp	.+74     	; 0x8c2 <__stack+0x63>
		while (adcCompileReadyFlag == 0);
     878:	80 91 38 02 	lds	r24, 0x0238
     87c:	88 23       	and	r24, r24
     87e:	e1 f3       	breq	.-8      	; 0x878 <__stack+0x19>
		compileAdcData();
     880:	0e 94 82 01 	call	0x304	; 0x304 <compileAdcData>
		//waitValueIsReady();
		ADCcalib_value += adcValues.left;
     884:	60 91 be 01 	lds	r22, 0x01BE
     888:	70 91 bf 01 	lds	r23, 0x01BF
     88c:	80 91 c0 01 	lds	r24, 0x01C0
     890:	90 91 c1 01 	lds	r25, 0x01C1
     894:	20 91 90 01 	lds	r18, 0x0190
     898:	30 91 91 01 	lds	r19, 0x0191
     89c:	40 91 92 01 	lds	r20, 0x0192
     8a0:	50 91 93 01 	lds	r21, 0x0193
     8a4:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__addsf3>
     8a8:	60 93 be 01 	sts	0x01BE, r22
     8ac:	70 93 bf 01 	sts	0x01BF, r23
     8b0:	80 93 c0 01 	sts	0x01C0, r24
     8b4:	90 93 c1 01 	sts	0x01C1, r25

	// Left Max Backward Calibration
	PORTD = (LEFT_MOTOR_BACKWARD)|(RIGHT_MOTOR_STOP);
	PORTA = (1<<CALIB_BIT);

	for (i=0;i<CAL_SAMPLES;i++){
     8b8:	80 91 f4 01 	lds	r24, 0x01F4
     8bc:	8f 5f       	subi	r24, 0xFF	; 255
     8be:	80 93 f4 01 	sts	0x01F4, r24
     8c2:	80 91 f4 01 	lds	r24, 0x01F4
     8c6:	89 31       	cpi	r24, 0x19	; 25
     8c8:	b8 f2       	brcs	.-82     	; 0x878 <__stack+0x19>
		while (adcCompileReadyFlag == 0);
		compileAdcData();
		//waitValueIsReady();
		ADCcalib_value += adcValues.left;
	}
	leftLimits.negMaxTEMP = (ADCcalib_value * MAX_ADC_VALUE) / CAL_SAMPLES;
     8ca:	60 91 be 01 	lds	r22, 0x01BE
     8ce:	70 91 bf 01 	lds	r23, 0x01BF
     8d2:	80 91 c0 01 	lds	r24, 0x01C0
     8d6:	90 91 c1 01 	lds	r25, 0x01C1
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 ec       	ldi	r19, 0xC0	; 192
     8de:	4f e7       	ldi	r20, 0x7F	; 127
     8e0:	54 e4       	ldi	r21, 0x44	; 68
     8e2:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	48 ec       	ldi	r20, 0xC8	; 200
     8ec:	51 e4       	ldi	r21, 0x41	; 65
     8ee:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
     8f2:	60 93 12 02 	sts	0x0212, r22
     8f6:	70 93 13 02 	sts	0x0213, r23
     8fa:	80 93 14 02 	sts	0x0214, r24
     8fe:	90 93 15 02 	sts	0x0215, r25
	ADCcalib_value = 0.0;
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	80 93 be 01 	sts	0x01BE, r24
     90e:	90 93 bf 01 	sts	0x01BF, r25
     912:	a0 93 c0 01 	sts	0x01C0, r26
     916:	b0 93 c1 01 	sts	0x01C1, r27

	// Left Zero Backward Calibration
	PORTD = (LEFT_MOTOR_BACKWARD)|(RIGHT_MOTOR_STOP);
     91a:	88 e0       	ldi	r24, 0x08	; 8
     91c:	82 bb       	out	0x12, r24	; 18
	PORTA = (0<<CALIB_BIT);
     91e:	1b ba       	out	0x1b, r1	; 27

	for (i=0;i<CAL_SAMPLES;i++){
     920:	10 92 f4 01 	sts	0x01F4, r1
     924:	25 c0       	rjmp	.+74     	; 0x970 <__stack+0x111>
		while (adcCompileReadyFlag == 0);
     926:	80 91 38 02 	lds	r24, 0x0238
     92a:	88 23       	and	r24, r24
     92c:	e1 f3       	breq	.-8      	; 0x926 <__stack+0xc7>
		compileAdcData();
     92e:	0e 94 82 01 	call	0x304	; 0x304 <compileAdcData>
		//waitValueIsReady();
		ADCcalib_value += adcValues.left;
     932:	60 91 be 01 	lds	r22, 0x01BE
     936:	70 91 bf 01 	lds	r23, 0x01BF
     93a:	80 91 c0 01 	lds	r24, 0x01C0
     93e:	90 91 c1 01 	lds	r25, 0x01C1
     942:	20 91 90 01 	lds	r18, 0x0190
     946:	30 91 91 01 	lds	r19, 0x0191
     94a:	40 91 92 01 	lds	r20, 0x0192
     94e:	50 91 93 01 	lds	r21, 0x0193
     952:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__addsf3>
     956:	60 93 be 01 	sts	0x01BE, r22
     95a:	70 93 bf 01 	sts	0x01BF, r23
     95e:	80 93 c0 01 	sts	0x01C0, r24
     962:	90 93 c1 01 	sts	0x01C1, r25

	// Left Zero Backward Calibration
	PORTD = (LEFT_MOTOR_BACKWARD)|(RIGHT_MOTOR_STOP);
	PORTA = (0<<CALIB_BIT);

	for (i=0;i<CAL_SAMPLES;i++){
     966:	80 91 f4 01 	lds	r24, 0x01F4
     96a:	8f 5f       	subi	r24, 0xFF	; 255
     96c:	80 93 f4 01 	sts	0x01F4, r24
     970:	80 91 f4 01 	lds	r24, 0x01F4
     974:	89 31       	cpi	r24, 0x19	; 25
     976:	b8 f2       	brcs	.-82     	; 0x926 <__stack+0xc7>
		while (adcCompileReadyFlag == 0);
		compileAdcData();
		//waitValueIsReady();
		ADCcalib_value += adcValues.left;
	}
	leftLimits.negZeroTEMP = (ADCcalib_value * MAX_ADC_VALUE) / CAL_SAMPLES;
     978:	60 91 be 01 	lds	r22, 0x01BE
     97c:	70 91 bf 01 	lds	r23, 0x01BF
     980:	80 91 c0 01 	lds	r24, 0x01C0
     984:	90 91 c1 01 	lds	r25, 0x01C1
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 ec       	ldi	r19, 0xC0	; 192
     98c:	4f e7       	ldi	r20, 0x7F	; 127
     98e:	54 e4       	ldi	r21, 0x44	; 68
     990:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	48 ec       	ldi	r20, 0xC8	; 200
     99a:	51 e4       	ldi	r21, 0x41	; 65
     99c:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
     9a0:	60 93 1a 02 	sts	0x021A, r22
     9a4:	70 93 1b 02 	sts	0x021B, r23
     9a8:	80 93 1c 02 	sts	0x021C, r24
     9ac:	90 93 1d 02 	sts	0x021D, r25
	ADCcalib_value = 0.0;
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	80 93 be 01 	sts	0x01BE, r24
     9bc:	90 93 bf 01 	sts	0x01BF, r25
     9c0:	a0 93 c0 01 	sts	0x01C0, r26
     9c4:	b0 93 c1 01 	sts	0x01C1, r27
	/*#######################*/
	/*RIGHT MOTOR CALIBRATION*/
	/*#######################*/ 

	// Right Max Forward Calibration
	PORTD = (RIGHT_MOTOR_FORWARD)|(LEFT_MOTOR_STOP);
     9c8:	20 e4       	ldi	r18, 0x40	; 64
     9ca:	22 bb       	out	0x12, r18	; 18
	PORTA = (1<<CALIB_BIT);
     9cc:	20 e1       	ldi	r18, 0x10	; 16
     9ce:	2b bb       	out	0x1b, r18	; 27
	ADCcalib_value = 0.0;
     9d0:	80 93 be 01 	sts	0x01BE, r24
     9d4:	90 93 bf 01 	sts	0x01BF, r25
     9d8:	a0 93 c0 01 	sts	0x01C0, r26
     9dc:	b0 93 c1 01 	sts	0x01C1, r27

	for (i=0;i<CAL_SAMPLES;i++){
     9e0:	10 92 f4 01 	sts	0x01F4, r1
     9e4:	25 c0       	rjmp	.+74     	; 0xa30 <__stack+0x1d1>
		while (adcCompileReadyFlag == 0);
     9e6:	80 91 38 02 	lds	r24, 0x0238
     9ea:	88 23       	and	r24, r24
     9ec:	e1 f3       	breq	.-8      	; 0x9e6 <__stack+0x187>
		compileAdcData();
     9ee:	0e 94 82 01 	call	0x304	; 0x304 <compileAdcData>
		//waitValueIsReady();
		ADCcalib_value += adcValues.right;
     9f2:	60 91 be 01 	lds	r22, 0x01BE
     9f6:	70 91 bf 01 	lds	r23, 0x01BF
     9fa:	80 91 c0 01 	lds	r24, 0x01C0
     9fe:	90 91 c1 01 	lds	r25, 0x01C1
     a02:	20 91 94 01 	lds	r18, 0x0194
     a06:	30 91 95 01 	lds	r19, 0x0195
     a0a:	40 91 96 01 	lds	r20, 0x0196
     a0e:	50 91 97 01 	lds	r21, 0x0197
     a12:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__addsf3>
     a16:	60 93 be 01 	sts	0x01BE, r22
     a1a:	70 93 bf 01 	sts	0x01BF, r23
     a1e:	80 93 c0 01 	sts	0x01C0, r24
     a22:	90 93 c1 01 	sts	0x01C1, r25
	// Right Max Forward Calibration
	PORTD = (RIGHT_MOTOR_FORWARD)|(LEFT_MOTOR_STOP);
	PORTA = (1<<CALIB_BIT);
	ADCcalib_value = 0.0;

	for (i=0;i<CAL_SAMPLES;i++){
     a26:	80 91 f4 01 	lds	r24, 0x01F4
     a2a:	8f 5f       	subi	r24, 0xFF	; 255
     a2c:	80 93 f4 01 	sts	0x01F4, r24
     a30:	80 91 f4 01 	lds	r24, 0x01F4
     a34:	89 31       	cpi	r24, 0x19	; 25
     a36:	b8 f2       	brcs	.-82     	; 0x9e6 <__stack+0x187>
		while (adcCompileReadyFlag == 0);
		compileAdcData();
		//waitValueIsReady();
		ADCcalib_value += adcValues.right;
	}
	rightLimits.posMaxTEMP = (ADCcalib_value * MAX_ADC_VALUE) / CAL_SAMPLES;
     a38:	60 91 be 01 	lds	r22, 0x01BE
     a3c:	70 91 bf 01 	lds	r23, 0x01BF
     a40:	80 91 c0 01 	lds	r24, 0x01C0
     a44:	90 91 c1 01 	lds	r25, 0x01C1
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 ec       	ldi	r19, 0xC0	; 192
     a4c:	4f e7       	ldi	r20, 0x7F	; 127
     a4e:	54 e4       	ldi	r21, 0x44	; 68
     a50:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	48 ec       	ldi	r20, 0xC8	; 200
     a5a:	51 e4       	ldi	r21, 0x41	; 65
     a5c:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
     a60:	60 93 aa 01 	sts	0x01AA, r22
     a64:	70 93 ab 01 	sts	0x01AB, r23
     a68:	80 93 ac 01 	sts	0x01AC, r24
     a6c:	90 93 ad 01 	sts	0x01AD, r25
	ADCcalib_value = 0.0;
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	80 93 be 01 	sts	0x01BE, r24
     a7c:	90 93 bf 01 	sts	0x01BF, r25
     a80:	a0 93 c0 01 	sts	0x01C0, r26
     a84:	b0 93 c1 01 	sts	0x01C1, r27

	// Right Zero Forward Calibration
	PORTD = (RIGHT_MOTOR_FORWARD)|(LEFT_MOTOR_STOP);
     a88:	80 e4       	ldi	r24, 0x40	; 64
     a8a:	82 bb       	out	0x12, r24	; 18
	PORTA = (0<<CALIB_BIT);
     a8c:	1b ba       	out	0x1b, r1	; 27

	for (i=0;i<CAL_SAMPLES;i++){
     a8e:	10 92 f4 01 	sts	0x01F4, r1
     a92:	25 c0       	rjmp	.+74     	; 0xade <__stack+0x27f>
		while (adcCompileReadyFlag == 0);
     a94:	80 91 38 02 	lds	r24, 0x0238
     a98:	88 23       	and	r24, r24
     a9a:	e1 f3       	breq	.-8      	; 0xa94 <__stack+0x235>
		compileAdcData();
     a9c:	0e 94 82 01 	call	0x304	; 0x304 <compileAdcData>
		//waitValueIsReady();
		ADCcalib_value += adcValues.right;
     aa0:	60 91 be 01 	lds	r22, 0x01BE
     aa4:	70 91 bf 01 	lds	r23, 0x01BF
     aa8:	80 91 c0 01 	lds	r24, 0x01C0
     aac:	90 91 c1 01 	lds	r25, 0x01C1
     ab0:	20 91 94 01 	lds	r18, 0x0194
     ab4:	30 91 95 01 	lds	r19, 0x0195
     ab8:	40 91 96 01 	lds	r20, 0x0196
     abc:	50 91 97 01 	lds	r21, 0x0197
     ac0:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__addsf3>
     ac4:	60 93 be 01 	sts	0x01BE, r22
     ac8:	70 93 bf 01 	sts	0x01BF, r23
     acc:	80 93 c0 01 	sts	0x01C0, r24
     ad0:	90 93 c1 01 	sts	0x01C1, r25

	// Right Zero Forward Calibration
	PORTD = (RIGHT_MOTOR_FORWARD)|(LEFT_MOTOR_STOP);
	PORTA = (0<<CALIB_BIT);

	for (i=0;i<CAL_SAMPLES;i++){
     ad4:	80 91 f4 01 	lds	r24, 0x01F4
     ad8:	8f 5f       	subi	r24, 0xFF	; 255
     ada:	80 93 f4 01 	sts	0x01F4, r24
     ade:	80 91 f4 01 	lds	r24, 0x01F4
     ae2:	89 31       	cpi	r24, 0x19	; 25
     ae4:	b8 f2       	brcs	.-82     	; 0xa94 <__stack+0x235>
		while (adcCompileReadyFlag == 0);
		compileAdcData();
		//waitValueIsReady();
		ADCcalib_value += adcValues.right;
	}
	rightLimits.posZeroTEMP = (ADCcalib_value * MAX_ADC_VALUE) / CAL_SAMPLES;
     ae6:	60 91 be 01 	lds	r22, 0x01BE
     aea:	70 91 bf 01 	lds	r23, 0x01BF
     aee:	80 91 c0 01 	lds	r24, 0x01C0
     af2:	90 91 c1 01 	lds	r25, 0x01C1
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 ec       	ldi	r19, 0xC0	; 192
     afa:	4f e7       	ldi	r20, 0x7F	; 127
     afc:	54 e4       	ldi	r21, 0x44	; 68
     afe:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	48 ec       	ldi	r20, 0xC8	; 200
     b08:	51 e4       	ldi	r21, 0x41	; 65
     b0a:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
     b0e:	60 93 b2 01 	sts	0x01B2, r22
     b12:	70 93 b3 01 	sts	0x01B3, r23
     b16:	80 93 b4 01 	sts	0x01B4, r24
     b1a:	90 93 b5 01 	sts	0x01B5, r25
	ADCcalib_value = 0.0;
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	80 93 be 01 	sts	0x01BE, r24
     b2a:	90 93 bf 01 	sts	0x01BF, r25
     b2e:	a0 93 c0 01 	sts	0x01C0, r26
     b32:	b0 93 c1 01 	sts	0x01C1, r27

	// Right Max Backward Calibration
	PORTD = (RIGHT_MOTOR_BACKWARD)|(LEFT_MOTOR_STOP);
     b36:	80 e8       	ldi	r24, 0x80	; 128
     b38:	82 bb       	out	0x12, r24	; 18
	PORTA = (1<<CALIB_BIT);
     b3a:	80 e1       	ldi	r24, 0x10	; 16
     b3c:	8b bb       	out	0x1b, r24	; 27

	for (i=0;i<CAL_SAMPLES;i++){
     b3e:	10 92 f4 01 	sts	0x01F4, r1
     b42:	25 c0       	rjmp	.+74     	; 0xb8e <__stack+0x32f>
		while (adcCompileReadyFlag == 0);
     b44:	80 91 38 02 	lds	r24, 0x0238
     b48:	88 23       	and	r24, r24
     b4a:	e1 f3       	breq	.-8      	; 0xb44 <__stack+0x2e5>
		compileAdcData();
     b4c:	0e 94 82 01 	call	0x304	; 0x304 <compileAdcData>
		//waitValueIsReady();
		ADCcalib_value += adcValues.right;
     b50:	60 91 be 01 	lds	r22, 0x01BE
     b54:	70 91 bf 01 	lds	r23, 0x01BF
     b58:	80 91 c0 01 	lds	r24, 0x01C0
     b5c:	90 91 c1 01 	lds	r25, 0x01C1
     b60:	20 91 94 01 	lds	r18, 0x0194
     b64:	30 91 95 01 	lds	r19, 0x0195
     b68:	40 91 96 01 	lds	r20, 0x0196
     b6c:	50 91 97 01 	lds	r21, 0x0197
     b70:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__addsf3>
     b74:	60 93 be 01 	sts	0x01BE, r22
     b78:	70 93 bf 01 	sts	0x01BF, r23
     b7c:	80 93 c0 01 	sts	0x01C0, r24
     b80:	90 93 c1 01 	sts	0x01C1, r25

	// Right Max Backward Calibration
	PORTD = (RIGHT_MOTOR_BACKWARD)|(LEFT_MOTOR_STOP);
	PORTA = (1<<CALIB_BIT);

	for (i=0;i<CAL_SAMPLES;i++){
     b84:	80 91 f4 01 	lds	r24, 0x01F4
     b88:	8f 5f       	subi	r24, 0xFF	; 255
     b8a:	80 93 f4 01 	sts	0x01F4, r24
     b8e:	80 91 f4 01 	lds	r24, 0x01F4
     b92:	89 31       	cpi	r24, 0x19	; 25
     b94:	b8 f2       	brcs	.-82     	; 0xb44 <__stack+0x2e5>
		while (adcCompileReadyFlag == 0);
		compileAdcData();
		//waitValueIsReady();
		ADCcalib_value += adcValues.right;
	}
	rightLimits.negMaxTEMP = (ADCcalib_value * MAX_ADC_VALUE) / CAL_SAMPLES;
     b96:	60 91 be 01 	lds	r22, 0x01BE
     b9a:	70 91 bf 01 	lds	r23, 0x01BF
     b9e:	80 91 c0 01 	lds	r24, 0x01C0
     ba2:	90 91 c1 01 	lds	r25, 0x01C1
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 ec       	ldi	r19, 0xC0	; 192
     baa:	4f e7       	ldi	r20, 0x7F	; 127
     bac:	54 e4       	ldi	r21, 0x44	; 68
     bae:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	48 ec       	ldi	r20, 0xC8	; 200
     bb8:	51 e4       	ldi	r21, 0x41	; 65
     bba:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
     bbe:	60 93 ae 01 	sts	0x01AE, r22
     bc2:	70 93 af 01 	sts	0x01AF, r23
     bc6:	80 93 b0 01 	sts	0x01B0, r24
     bca:	90 93 b1 01 	sts	0x01B1, r25
	ADCcalib_value = 0.0;
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	80 93 be 01 	sts	0x01BE, r24
     bda:	90 93 bf 01 	sts	0x01BF, r25
     bde:	a0 93 c0 01 	sts	0x01C0, r26
     be2:	b0 93 c1 01 	sts	0x01C1, r27

	// Right Zero Backward Calibration
	PORTD = (RIGHT_MOTOR_BACKWARD)|(LEFT_MOTOR_STOP);
     be6:	80 e8       	ldi	r24, 0x80	; 128
     be8:	82 bb       	out	0x12, r24	; 18
	PORTA = (0<<CALIB_BIT);
     bea:	1b ba       	out	0x1b, r1	; 27

	for (i=0;i<CAL_SAMPLES;i++){
     bec:	10 92 f4 01 	sts	0x01F4, r1
     bf0:	25 c0       	rjmp	.+74     	; 0xc3c <__stack+0x3dd>
		while (adcCompileReadyFlag == 0);
     bf2:	80 91 38 02 	lds	r24, 0x0238
     bf6:	88 23       	and	r24, r24
     bf8:	e1 f3       	breq	.-8      	; 0xbf2 <__stack+0x393>
		compileAdcData();
     bfa:	0e 94 82 01 	call	0x304	; 0x304 <compileAdcData>
		//waitValueIsReady();
		ADCcalib_value += adcValues.right;
     bfe:	60 91 be 01 	lds	r22, 0x01BE
     c02:	70 91 bf 01 	lds	r23, 0x01BF
     c06:	80 91 c0 01 	lds	r24, 0x01C0
     c0a:	90 91 c1 01 	lds	r25, 0x01C1
     c0e:	20 91 94 01 	lds	r18, 0x0194
     c12:	30 91 95 01 	lds	r19, 0x0195
     c16:	40 91 96 01 	lds	r20, 0x0196
     c1a:	50 91 97 01 	lds	r21, 0x0197
     c1e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__addsf3>
     c22:	60 93 be 01 	sts	0x01BE, r22
     c26:	70 93 bf 01 	sts	0x01BF, r23
     c2a:	80 93 c0 01 	sts	0x01C0, r24
     c2e:	90 93 c1 01 	sts	0x01C1, r25

	// Right Zero Backward Calibration
	PORTD = (RIGHT_MOTOR_BACKWARD)|(LEFT_MOTOR_STOP);
	PORTA = (0<<CALIB_BIT);

	for (i=0;i<CAL_SAMPLES;i++){
     c32:	80 91 f4 01 	lds	r24, 0x01F4
     c36:	8f 5f       	subi	r24, 0xFF	; 255
     c38:	80 93 f4 01 	sts	0x01F4, r24
     c3c:	80 91 f4 01 	lds	r24, 0x01F4
     c40:	89 31       	cpi	r24, 0x19	; 25
     c42:	b8 f2       	brcs	.-82     	; 0xbf2 <__stack+0x393>
		while (adcCompileReadyFlag == 0);
		compileAdcData();
		//waitValueIsReady();
		ADCcalib_value += adcValues.right;
	}
	rightLimits.negZeroTEMP = 	(ADCcalib_value * MAX_ADC_VALUE) / CAL_SAMPLES;
     c44:	60 91 be 01 	lds	r22, 0x01BE
     c48:	70 91 bf 01 	lds	r23, 0x01BF
     c4c:	80 91 c0 01 	lds	r24, 0x01C0
     c50:	90 91 c1 01 	lds	r25, 0x01C1
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 ec       	ldi	r19, 0xC0	; 192
     c58:	4f e7       	ldi	r20, 0x7F	; 127
     c5a:	54 e4       	ldi	r21, 0x44	; 68
     c5c:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	48 ec       	ldi	r20, 0xC8	; 200
     c66:	51 e4       	ldi	r21, 0x41	; 65
     c68:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
     c6c:	dc 01       	movw	r26, r24
     c6e:	9b 01       	movw	r18, r22
     c70:	ac 01       	movw	r20, r24
     c72:	20 93 b6 01 	sts	0x01B6, r18
     c76:	30 93 b7 01 	sts	0x01B7, r19
     c7a:	40 93 b8 01 	sts	0x01B8, r20
     c7e:	50 93 b9 01 	sts	0x01B9, r21
	ADCcalib_value = 0.0;
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	20 93 be 01 	sts	0x01BE, r18
     c8e:	30 93 bf 01 	sts	0x01BF, r19
     c92:	40 93 c0 01 	sts	0x01C0, r20
     c96:	50 93 c1 01 	sts	0x01C1, r21
	
*/ 

 //CHANGEMENT pour éviter chiage
	// Assign final values to limit var
	leftLimits.posMax = leftLimits.posMaxTEMP;
     c9a:	e0 90 0e 02 	lds	r14, 0x020E
     c9e:	f0 90 0f 02 	lds	r15, 0x020F
     ca2:	00 91 10 02 	lds	r16, 0x0210
     ca6:	10 91 11 02 	lds	r17, 0x0211
     caa:	e0 92 fe 01 	sts	0x01FE, r14
     cae:	f0 92 ff 01 	sts	0x01FF, r15
     cb2:	00 93 00 02 	sts	0x0200, r16
     cb6:	10 93 01 02 	sts	0x0201, r17
	leftLimits.posZero = leftLimits.posZeroTEMP;
     cba:	20 91 16 02 	lds	r18, 0x0216
     cbe:	30 91 17 02 	lds	r19, 0x0217
     cc2:	40 91 18 02 	lds	r20, 0x0218
     cc6:	50 91 19 02 	lds	r21, 0x0219
     cca:	20 93 06 02 	sts	0x0206, r18
     cce:	30 93 07 02 	sts	0x0207, r19
     cd2:	40 93 08 02 	sts	0x0208, r20
     cd6:	50 93 09 02 	sts	0x0209, r21
	leftLimits.negMax = leftLimits.negMaxTEMP;
     cda:	20 91 12 02 	lds	r18, 0x0212
     cde:	30 91 13 02 	lds	r19, 0x0213
     ce2:	40 91 14 02 	lds	r20, 0x0214
     ce6:	50 91 15 02 	lds	r21, 0x0215
     cea:	20 93 02 02 	sts	0x0202, r18
     cee:	30 93 03 02 	sts	0x0203, r19
     cf2:	40 93 04 02 	sts	0x0204, r20
     cf6:	50 93 05 02 	sts	0x0205, r21
	leftLimits.negZero = leftLimits.negZeroTEMP;
     cfa:	20 91 1a 02 	lds	r18, 0x021A
     cfe:	30 91 1b 02 	lds	r19, 0x021B
     d02:	40 91 1c 02 	lds	r20, 0x021C
     d06:	50 91 1d 02 	lds	r21, 0x021D
     d0a:	20 93 0a 02 	sts	0x020A, r18
     d0e:	30 93 0b 02 	sts	0x020B, r19
     d12:	40 93 0c 02 	sts	0x020C, r20
     d16:	50 93 0d 02 	sts	0x020D, r21
	rightLimits.posMax = rightLimits.posMaxTEMP;
     d1a:	20 91 aa 01 	lds	r18, 0x01AA
     d1e:	30 91 ab 01 	lds	r19, 0x01AB
     d22:	40 91 ac 01 	lds	r20, 0x01AC
     d26:	50 91 ad 01 	lds	r21, 0x01AD
     d2a:	20 93 9a 01 	sts	0x019A, r18
     d2e:	30 93 9b 01 	sts	0x019B, r19
     d32:	40 93 9c 01 	sts	0x019C, r20
     d36:	50 93 9d 01 	sts	0x019D, r21
	rightLimits.posZero = rightLimits.posZeroTEMP;
     d3a:	20 91 b2 01 	lds	r18, 0x01B2
     d3e:	30 91 b3 01 	lds	r19, 0x01B3
     d42:	40 91 b4 01 	lds	r20, 0x01B4
     d46:	50 91 b5 01 	lds	r21, 0x01B5
     d4a:	20 93 a2 01 	sts	0x01A2, r18
     d4e:	30 93 a3 01 	sts	0x01A3, r19
     d52:	40 93 a4 01 	sts	0x01A4, r20
     d56:	50 93 a5 01 	sts	0x01A5, r21
	rightLimits.negMax = rightLimits.negMaxTEMP;
     d5a:	20 91 ae 01 	lds	r18, 0x01AE
     d5e:	30 91 af 01 	lds	r19, 0x01AF
     d62:	40 91 b0 01 	lds	r20, 0x01B0
     d66:	50 91 b1 01 	lds	r21, 0x01B1
     d6a:	20 93 9e 01 	sts	0x019E, r18
     d6e:	30 93 9f 01 	sts	0x019F, r19
     d72:	40 93 a0 01 	sts	0x01A0, r20
     d76:	50 93 a1 01 	sts	0x01A1, r21
	rightLimits.negZero = rightLimits.negZeroTEMP;
     d7a:	cb 01       	movw	r24, r22
     d7c:	80 93 a6 01 	sts	0x01A6, r24
     d80:	90 93 a7 01 	sts	0x01A7, r25
     d84:	a0 93 a8 01 	sts	0x01A8, r26
     d88:	b0 93 a9 01 	sts	0x01A9, r27

	//DEBUG LAND
	if ((leftLimits.posMax > 25) && (leftLimits.posMax < 50))
     d8c:	c8 01       	movw	r24, r16
     d8e:	b7 01       	movw	r22, r14
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	48 ec       	ldi	r20, 0xC8	; 200
     d96:	51 e4       	ldi	r21, 0x41	; 65
     d98:	0e 94 37 13 	call	0x266e	; 0x266e <__gtsf2>
     d9c:	18 16       	cp	r1, r24
     d9e:	6c f4       	brge	.+26     	; 0xdba <__stack+0x55b>
     da0:	c8 01       	movw	r24, r16
     da2:	b7 01       	movw	r22, r14
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	48 e4       	ldi	r20, 0x48	; 72
     daa:	52 e4       	ldi	r21, 0x42	; 66
     dac:	0e 94 97 13 	call	0x272e	; 0x272e <__ltsf2>
     db0:	88 23       	and	r24, r24
     db2:	1c f4       	brge	.+6      	; 0xdba <__stack+0x55b>
	{
		PORTB=0x0E;
     db4:	8e e0       	ldi	r24, 0x0E	; 14
     db6:	88 bb       	out	0x18, r24	; 24
     db8:	ff cf       	rjmp	.-2      	; 0xdb8 <__stack+0x559>
		while(1);
	}
	
	// End calibration
	adcCalibrationFlag = 0;
     dba:	10 92 2a 02 	sts	0x022A, r1
	PORTD = (RIGHT_MOTOR_STOP) | (LEFT_MOTOR_STOP);
     dbe:	12 ba       	out	0x12, r1	; 18

}
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	08 95       	ret

00000dca <waitValueIsReady>:

void waitValueIsReady(void)
{
	//adcCompletedFlag = 0;		
	while (adcCompletedFlag == 0){}
     dca:	80 91 c9 01 	lds	r24, 0x01C9
     dce:	88 23       	and	r24, r24
     dd0:	e1 f3       	breq	.-8      	; 0xdca <waitValueIsReady>

	adcCompletedFlag = 0;
     dd2:	10 92 c9 01 	sts	0x01C9, r1
	while (adcCompletedFlag == 0){}
     dd6:	80 91 c9 01 	lds	r24, 0x01C9
     dda:	88 23       	and	r24, r24
     ddc:	e1 f3       	breq	.-8      	; 0xdd6 <waitValueIsReady+0xc>


}
     dde:	08 95       	ret

00000de0 <initLeds>:
//Return value:	-none
//
///////////////////////////////////////////
void initLeds(void)
{
	leftPingFlag  = 0;
     de0:	10 92 c2 01 	sts	0x01C2, r1
	rightPingFlag = 0;
     de4:	10 92 fa 01 	sts	0x01FA, r1
	uartLedFlag   = 0;
     de8:	10 92 2e 02 	sts	0x022E, r1
//
///////////////////////////////////////////
void ledDeadState(void)
{
	ledState.leds = (1<<LED6);
	PORTB = ~(ledState.leds);
     dec:	8f eb       	ldi	r24, 0xBF	; 191
     dee:	88 bb       	out	0x18, r24	; 24
	ledState.uartCounter = 0;
	ledState.leftPingCounter = 0;
	ledState.rightPingCounter = 0;
	rightPingFlag = 0;
     df0:	10 92 fa 01 	sts	0x01FA, r1
	leftPingFlag = 0;
     df4:	10 92 c2 01 	sts	0x01C2, r1
	uartLedFlag = 0;
     df8:	10 92 2e 02 	sts	0x022E, r1
//Return value:	-none
//
///////////////////////////////////////////
void ledAliveState(void)
{
	ledState.leds = (1<<LED7);
     dfc:	80 e8       	ldi	r24, 0x80	; 128
     dfe:	80 93 d9 01 	sts	0x01D9, r24
	PORTB = ~(ledState.leds);
     e02:	8f e7       	ldi	r24, 0x7F	; 127
     e04:	88 bb       	out	0x18, r24	; 24
	ledState.uartCounter = 0;
     e06:	10 92 dc 01 	sts	0x01DC, r1
     e0a:	10 92 db 01 	sts	0x01DB, r1
	ledState.leftPingCounter = 0;
     e0e:	10 92 de 01 	sts	0x01DE, r1
     e12:	10 92 dd 01 	sts	0x01DD, r1
	ledState.rightPingCounter = 0;
     e16:	10 92 e0 01 	sts	0x01E0, r1
     e1a:	10 92 df 01 	sts	0x01DF, r1
	rightPingFlag = 0;
     e1e:	10 92 fa 01 	sts	0x01FA, r1
	leftPingFlag = 0;
     e22:	10 92 c2 01 	sts	0x01C2, r1
	uartLedFlag = 0;
     e26:	10 92 2e 02 	sts	0x022E, r1
	leftObjectLed = 0;
     e2a:	10 92 d3 01 	sts	0x01D3, r1
	rightObjectLed = 0;
     e2e:	10 92 fb 01 	sts	0x01FB, r1
	leftPingFlag  = 0;
	rightPingFlag = 0;
	uartLedFlag   = 0;
	ledDeadState();
	ledAliveState();
}
     e32:	08 95       	ret

00000e34 <ledDeadState>:
//Return value:	-none
//
///////////////////////////////////////////
void ledDeadState(void)
{
	ledState.leds = (1<<LED6);
     e34:	80 e4       	ldi	r24, 0x40	; 64
     e36:	80 93 d9 01 	sts	0x01D9, r24
	PORTB = ~(ledState.leds);
     e3a:	8f eb       	ldi	r24, 0xBF	; 191
     e3c:	88 bb       	out	0x18, r24	; 24
	ledState.uartCounter = 0;
     e3e:	10 92 dc 01 	sts	0x01DC, r1
     e42:	10 92 db 01 	sts	0x01DB, r1
	ledState.leftPingCounter = 0;
     e46:	10 92 de 01 	sts	0x01DE, r1
     e4a:	10 92 dd 01 	sts	0x01DD, r1
	ledState.rightPingCounter = 0;
     e4e:	10 92 e0 01 	sts	0x01E0, r1
     e52:	10 92 df 01 	sts	0x01DF, r1
	rightPingFlag = 0;
     e56:	10 92 fa 01 	sts	0x01FA, r1
	leftPingFlag = 0;
     e5a:	10 92 c2 01 	sts	0x01C2, r1
	uartLedFlag = 0;
     e5e:	10 92 2e 02 	sts	0x022E, r1
}
     e62:	08 95       	ret

00000e64 <obstacleDetectedLeds>:
//Return value:	-none
//
///////////////////////////////////////////
void obstacleDetectedLeds(void)
{
	if (leftObjectLed)
     e64:	80 91 d3 01 	lds	r24, 0x01D3
     e68:	88 23       	and	r24, r24
     e6a:	21 f0       	breq	.+8      	; 0xe74 <obstacleDetectedLeds+0x10>
	{
		ledState.leds |= (1<<LED4);
     e6c:	80 91 d9 01 	lds	r24, 0x01D9
     e70:	80 61       	ori	r24, 0x10	; 16
     e72:	03 c0       	rjmp	.+6      	; 0xe7a <obstacleDetectedLeds+0x16>
	}
	else
	{
		ledState.leds &= ~(1<<LED4);
     e74:	80 91 d9 01 	lds	r24, 0x01D9
     e78:	8f 7e       	andi	r24, 0xEF	; 239
     e7a:	80 93 d9 01 	sts	0x01D9, r24
	}
	if (rightObjectLed)
     e7e:	80 91 fb 01 	lds	r24, 0x01FB
     e82:	88 23       	and	r24, r24
     e84:	21 f0       	breq	.+8      	; 0xe8e <obstacleDetectedLeds+0x2a>
	{
		ledState.leds |= (1<<LED2);
     e86:	80 91 d9 01 	lds	r24, 0x01D9
     e8a:	84 60       	ori	r24, 0x04	; 4
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <obstacleDetectedLeds+0x30>
	}
	else
	{
		ledState.leds &= ~(1<<LED2);
     e8e:	80 91 d9 01 	lds	r24, 0x01D9
     e92:	8b 7f       	andi	r24, 0xFB	; 251
     e94:	80 93 d9 01 	sts	0x01D9, r24
     e98:	08 95       	ret

00000e9a <ledAliveState>:
//Return value:	-none
//
///////////////////////////////////////////
void ledAliveState(void)
{
	ledState.leds = (1<<LED7);
     e9a:	80 e8       	ldi	r24, 0x80	; 128
     e9c:	80 93 d9 01 	sts	0x01D9, r24
	PORTB = ~(ledState.leds);
     ea0:	8f e7       	ldi	r24, 0x7F	; 127
     ea2:	88 bb       	out	0x18, r24	; 24
	ledState.uartCounter = 0;
     ea4:	10 92 dc 01 	sts	0x01DC, r1
     ea8:	10 92 db 01 	sts	0x01DB, r1
	ledState.leftPingCounter = 0;
     eac:	10 92 de 01 	sts	0x01DE, r1
     eb0:	10 92 dd 01 	sts	0x01DD, r1
	ledState.rightPingCounter = 0;
     eb4:	10 92 e0 01 	sts	0x01E0, r1
     eb8:	10 92 df 01 	sts	0x01DF, r1
	rightPingFlag = 0;
     ebc:	10 92 fa 01 	sts	0x01FA, r1
	leftPingFlag = 0;
     ec0:	10 92 c2 01 	sts	0x01C2, r1
	uartLedFlag = 0;
     ec4:	10 92 2e 02 	sts	0x022E, r1
	leftObjectLed = 0;
     ec8:	10 92 d3 01 	sts	0x01D3, r1
	rightObjectLed = 0;
     ecc:	10 92 fb 01 	sts	0x01FB, r1
}
     ed0:	08 95       	ret

00000ed2 <pingUart>:
//Return value:	-none
//
///////////////////////////////////////////
void pingUart(void)
{
	if ((uartLedFlag) && !(ledState.flashing & (1<<LED1)))//new led input received
     ed2:	80 91 2e 02 	lds	r24, 0x022E
     ed6:	88 23       	and	r24, r24
     ed8:	39 f0       	breq	.+14     	; 0xee8 <pingUart+0x16>
     eda:	80 91 da 01 	lds	r24, 0x01DA
     ede:	81 fd       	sbrc	r24, 1
     ee0:	03 c0       	rjmp	.+6      	; 0xee8 <pingUart+0x16>
	{
		ledState.flashing |= (1<<LED1);
     ee2:	82 60       	ori	r24, 0x02	; 2
     ee4:	80 93 da 01 	sts	0x01DA, r24
	}
	if (ledState.uartCounter)	//if counter is running
     ee8:	80 91 db 01 	lds	r24, 0x01DB
     eec:	90 91 dc 01 	lds	r25, 0x01DC
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	11 f1       	breq	.+68     	; 0xf38 <pingUart+0x66>
	{
		ledState.uartCounter++;
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	90 93 dc 01 	sts	0x01DC, r25
     efa:	80 93 db 01 	sts	0x01DB, r24
		if (ledState.uartCounter >= LED_UART_CYCLE_TIME)
     efe:	80 54       	subi	r24, 0x40	; 64
     f00:	9f 41       	sbci	r25, 0x1F	; 31
     f02:	48 f1       	brcs	.+82     	; 0xf56 <pingUart+0x84>
		{
			if (ledState.leds & (1<<LED1))
     f04:	80 91 d9 01 	lds	r24, 0x01D9
     f08:	81 ff       	sbrs	r24, 1
     f0a:	0a c0       	rjmp	.+20     	; 0xf20 <pingUart+0x4e>
			{
				ledState.leds &= (0xFF & ~(1<<LED1));	//turn led off
     f0c:	8d 7f       	andi	r24, 0xFD	; 253
     f0e:	80 93 d9 01 	sts	0x01D9, r24
				ledState.uartCounter = 1;	//calls a second loop to keep led off
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	90 93 dc 01 	sts	0x01DC, r25
     f1a:	80 93 db 01 	sts	0x01DB, r24
     f1e:	08 95       	ret
			}
			else
			{
				ledState.uartCounter = 0; //flash is finished
     f20:	10 92 dc 01 	sts	0x01DC, r1
     f24:	10 92 db 01 	sts	0x01DB, r1
				uartLedFlag = 0;
     f28:	10 92 2e 02 	sts	0x022E, r1
				ledState.flashing &= ~(1<<LED1);
     f2c:	80 91 da 01 	lds	r24, 0x01DA
     f30:	8d 7f       	andi	r24, 0xFD	; 253
     f32:	80 93 da 01 	sts	0x01DA, r24
     f36:	08 95       	ret
			}
		}
	}			
	else if (ledState.flashing & (1<<LED1))	//starts led counter
     f38:	80 91 da 01 	lds	r24, 0x01DA
     f3c:	81 ff       	sbrs	r24, 1
     f3e:	0b c0       	rjmp	.+22     	; 0xf56 <pingUart+0x84>
	{		
		ledState.leds |= (1<<LED1);
     f40:	80 91 d9 01 	lds	r24, 0x01D9
     f44:	82 60       	ori	r24, 0x02	; 2
     f46:	80 93 d9 01 	sts	0x01D9, r24
		ledState.uartCounter = 1;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	90 93 dc 01 	sts	0x01DC, r25
     f52:	80 93 db 01 	sts	0x01DB, r24
     f56:	08 95       	ret

00000f58 <pingSonarLeft>:
//Return value:	-none
//
///////////////////////////////////////////
void pingSonarLeft(void)
{
	if ((leftPingFlag) && !(ledState.flashing & (1<<LED5)))//new led input received
     f58:	80 91 c2 01 	lds	r24, 0x01C2
     f5c:	88 23       	and	r24, r24
     f5e:	39 f0       	breq	.+14     	; 0xf6e <pingSonarLeft+0x16>
     f60:	80 91 da 01 	lds	r24, 0x01DA
     f64:	85 fd       	sbrc	r24, 5
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <pingSonarLeft+0x16>
	{
		ledState.flashing |= (1<<LED5);
     f68:	80 62       	ori	r24, 0x20	; 32
     f6a:	80 93 da 01 	sts	0x01DA, r24
	}
	if (ledState.leftPingCounter)
     f6e:	80 91 dd 01 	lds	r24, 0x01DD
     f72:	90 91 de 01 	lds	r25, 0x01DE
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	11 f1       	breq	.+68     	; 0xfbe <pingSonarLeft+0x66>
	{
		ledState.leftPingCounter++;
     f7a:	01 96       	adiw	r24, 0x01	; 1
     f7c:	90 93 de 01 	sts	0x01DE, r25
     f80:	80 93 dd 01 	sts	0x01DD, r24
		if (ledState.leftPingCounter >= LED_PING_CYCLE_TIME)
     f84:	80 51       	subi	r24, 0x10	; 16
     f86:	97 42       	sbci	r25, 0x27	; 39
     f88:	48 f1       	brcs	.+82     	; 0xfdc <pingSonarLeft+0x84>
		{
			if (ledState.leds & (1<<LED5))
     f8a:	80 91 d9 01 	lds	r24, 0x01D9
     f8e:	85 ff       	sbrs	r24, 5
     f90:	0a c0       	rjmp	.+20     	; 0xfa6 <pingSonarLeft+0x4e>
			{
				ledState.leds &= (0xFF & ~(1<<LED5));	//turn led off
     f92:	8f 7d       	andi	r24, 0xDF	; 223
     f94:	80 93 d9 01 	sts	0x01D9, r24
				ledState.leftPingCounter = 1;	//calls a second loop to keep led off
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	90 93 de 01 	sts	0x01DE, r25
     fa0:	80 93 dd 01 	sts	0x01DD, r24
     fa4:	08 95       	ret
			}
			else
			{
				ledState.leftPingCounter = 0; //flash is finished
     fa6:	10 92 de 01 	sts	0x01DE, r1
     faa:	10 92 dd 01 	sts	0x01DD, r1
				leftPingFlag = 0;
     fae:	10 92 c2 01 	sts	0x01C2, r1
				ledState.flashing &= ~(1<<LED5);
     fb2:	80 91 da 01 	lds	r24, 0x01DA
     fb6:	8f 7d       	andi	r24, 0xDF	; 223
     fb8:	80 93 da 01 	sts	0x01DA, r24
     fbc:	08 95       	ret
			}
		}
	}			
	else if (ledState.flashing & (1<<LED5))//starts led counter
     fbe:	80 91 da 01 	lds	r24, 0x01DA
     fc2:	85 ff       	sbrs	r24, 5
     fc4:	0b c0       	rjmp	.+22     	; 0xfdc <pingSonarLeft+0x84>
	{		
		ledState.leds |= (1<<LED5);
     fc6:	80 91 d9 01 	lds	r24, 0x01D9
     fca:	80 62       	ori	r24, 0x20	; 32
     fcc:	80 93 d9 01 	sts	0x01D9, r24
		ledState.leftPingCounter = 1;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	90 93 de 01 	sts	0x01DE, r25
     fd8:	80 93 dd 01 	sts	0x01DD, r24
     fdc:	08 95       	ret

00000fde <pingSonarRight>:
//Return value:	-none
//
///////////////////////////////////////////
void pingSonarRight(void)
{
	if ((rightPingFlag) && !(ledState.flashing & (1<<LED3)))//new led input received
     fde:	80 91 fa 01 	lds	r24, 0x01FA
     fe2:	88 23       	and	r24, r24
     fe4:	39 f0       	breq	.+14     	; 0xff4 <pingSonarRight+0x16>
     fe6:	80 91 da 01 	lds	r24, 0x01DA
     fea:	83 fd       	sbrc	r24, 3
     fec:	03 c0       	rjmp	.+6      	; 0xff4 <pingSonarRight+0x16>
	{
		ledState.flashing |= (1<<LED3);
     fee:	88 60       	ori	r24, 0x08	; 8
     ff0:	80 93 da 01 	sts	0x01DA, r24
	}
	if (ledState.rightPingCounter)
     ff4:	80 91 df 01 	lds	r24, 0x01DF
     ff8:	90 91 e0 01 	lds	r25, 0x01E0
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	11 f1       	breq	.+68     	; 0x1044 <pingSonarRight+0x66>
	{
		ledState.rightPingCounter++;
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	90 93 e0 01 	sts	0x01E0, r25
    1006:	80 93 df 01 	sts	0x01DF, r24
		if (ledState.rightPingCounter >= LED_PING_CYCLE_TIME)
    100a:	80 51       	subi	r24, 0x10	; 16
    100c:	97 42       	sbci	r25, 0x27	; 39
    100e:	48 f1       	brcs	.+82     	; 0x1062 <pingSonarRight+0x84>
		{
			if (ledState.leds & (1<<LED3))
    1010:	80 91 d9 01 	lds	r24, 0x01D9
    1014:	83 ff       	sbrs	r24, 3
    1016:	0a c0       	rjmp	.+20     	; 0x102c <pingSonarRight+0x4e>
			{
				ledState.leds &= (0xFF & ~(1<<LED3));	//turn led off
    1018:	87 7f       	andi	r24, 0xF7	; 247
    101a:	80 93 d9 01 	sts	0x01D9, r24
				ledState.rightPingCounter = 1;	//calls a second loop to keep led off
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	90 93 e0 01 	sts	0x01E0, r25
    1026:	80 93 df 01 	sts	0x01DF, r24
    102a:	08 95       	ret
			}
			else
			{
				ledState.rightPingCounter = 0;	//flash is finished
    102c:	10 92 e0 01 	sts	0x01E0, r1
    1030:	10 92 df 01 	sts	0x01DF, r1
				rightPingFlag = 0;
    1034:	10 92 fa 01 	sts	0x01FA, r1
				ledState.flashing &= ~(1<<LED3);
    1038:	80 91 da 01 	lds	r24, 0x01DA
    103c:	87 7f       	andi	r24, 0xF7	; 247
    103e:	80 93 da 01 	sts	0x01DA, r24
    1042:	08 95       	ret
			}
		}
	}			
	else if (ledState.flashing & (1<<LED3))//starts led counter
    1044:	80 91 da 01 	lds	r24, 0x01DA
    1048:	83 ff       	sbrs	r24, 3
    104a:	0b c0       	rjmp	.+22     	; 0x1062 <pingSonarRight+0x84>
	{		
		ledState.leds |= (1<<LED3);
    104c:	80 91 d9 01 	lds	r24, 0x01D9
    1050:	88 60       	ori	r24, 0x08	; 8
    1052:	80 93 d9 01 	sts	0x01D9, r24
		ledState.rightPingCounter = 1;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	90 93 e0 01 	sts	0x01E0, r25
    105e:	80 93 df 01 	sts	0x01DF, r24
    1062:	08 95       	ret

00001064 <flashLeds>:
//Return value:	-none
//
///////////////////////////////////////////
void flashLeds(void)
{
	pingUart();
    1064:	0e 94 69 07 	call	0xed2	; 0xed2 <pingUart>
	pingSonarLeft();
    1068:	0e 94 ac 07 	call	0xf58	; 0xf58 <pingSonarLeft>
	pingSonarRight();
    106c:	0e 94 ef 07 	call	0xfde	; 0xfde <pingSonarRight>
//Return value:	-none
//
///////////////////////////////////////////
void obstacleDetectedLeds(void)
{
	if (leftObjectLed)
    1070:	80 91 d3 01 	lds	r24, 0x01D3
    1074:	88 23       	and	r24, r24
    1076:	21 f0       	breq	.+8      	; 0x1080 <flashLeds+0x1c>
	{
		ledState.leds |= (1<<LED4);
    1078:	80 91 d9 01 	lds	r24, 0x01D9
    107c:	80 61       	ori	r24, 0x10	; 16
    107e:	03 c0       	rjmp	.+6      	; 0x1086 <flashLeds+0x22>
	}
	else
	{
		ledState.leds &= ~(1<<LED4);
    1080:	80 91 d9 01 	lds	r24, 0x01D9
    1084:	8f 7e       	andi	r24, 0xEF	; 239
    1086:	80 93 d9 01 	sts	0x01D9, r24
	}
	if (rightObjectLed)
    108a:	80 91 fb 01 	lds	r24, 0x01FB
    108e:	88 23       	and	r24, r24
    1090:	21 f0       	breq	.+8      	; 0x109a <flashLeds+0x36>
	{
		ledState.leds |= (1<<LED2);
    1092:	80 91 d9 01 	lds	r24, 0x01D9
    1096:	84 60       	ori	r24, 0x04	; 4
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <flashLeds+0x3c>
	}
	else
	{
		ledState.leds &= ~(1<<LED2);
    109a:	80 91 d9 01 	lds	r24, 0x01D9
    109e:	8b 7f       	andi	r24, 0xFB	; 251
    10a0:	80 93 d9 01 	sts	0x01D9, r24
{
	pingUart();
	pingSonarLeft();
	pingSonarRight();
	obstacleDetectedLeds();
	ledState.leds |= (1<<LED7);
    10a4:	80 91 d9 01 	lds	r24, 0x01D9
    10a8:	80 68       	ori	r24, 0x80	; 128
    10aa:	80 93 d9 01 	sts	0x01D9, r24
	PORTB = ~(ledState.leds);
    10ae:	80 95       	com	r24
    10b0:	88 bb       	out	0x18, r24	; 24
}
    10b2:	08 95       	ret

000010b4 <CalculPWM>:
#include "moteur.h"


void CalculPWM(float Vitesse_D, float Angle_D, float Vg, float Vd, float *Duty_G, float *Duty_D)
{
    10b4:	2f 92       	push	r2
    10b6:	3f 92       	push	r3
    10b8:	4f 92       	push	r4
    10ba:	5f 92       	push	r5
    10bc:	6f 92       	push	r6
    10be:	7f 92       	push	r7
    10c0:	8f 92       	push	r8
    10c2:	9f 92       	push	r9
    10c4:	af 92       	push	r10
    10c6:	bf 92       	push	r11
    10c8:	cf 92       	push	r12
    10ca:	df 92       	push	r13
    10cc:	ef 92       	push	r14
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	60 97       	sbiw	r28, 0x10	; 16
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	6f 83       	std	Y+7, r22	; 0x07
    10ea:	78 87       	std	Y+8, r23	; 0x08
    10ec:	89 87       	std	Y+9, r24	; 0x09
    10ee:	9a 87       	std	Y+10, r25	; 0x0a
    10f0:	2b 87       	std	Y+11, r18	; 0x0b
    10f2:	3c 87       	std	Y+12, r19	; 0x0c
    10f4:	4d 87       	std	Y+13, r20	; 0x0d
    10f6:	5e 87       	std	Y+14, r21	; 0x0e
    10f8:	27 01       	movw	r4, r14
    10fa:	38 01       	movw	r6, r16
    10fc:	98 8a       	std	Y+16, r9	; 0x10
    10fe:	8f 86       	std	Y+15, r8	; 0x0f
	static float Ua     = 0.0;
	static int 	 Signe_Ua = 0;
	static int 	 Signe_Ut = 0;


	Vg = (Vg > 1.0) ? 1.0 : ((Vg < -1.0) ? -1.0 : Vg);  /* Regarde les limites (-1.0 à 1.0) */
    1100:	c8 01       	movw	r24, r16
    1102:	b7 01       	movw	r22, r14
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e8       	ldi	r20, 0x80	; 128
    110a:	5f e3       	ldi	r21, 0x3F	; 63
    110c:	0e 94 37 13 	call	0x266e	; 0x266e <__gtsf2>
    1110:	18 16       	cp	r1, r24
    1112:	5c f4       	brge	.+22     	; 0x112a <CalculPWM+0x76>
    1114:	0f 2e       	mov	r0, r31
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	4f 2e       	mov	r4, r31
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	5f 2e       	mov	r5, r31
    111e:	f0 e8       	ldi	r31, 0x80	; 128
    1120:	6f 2e       	mov	r6, r31
    1122:	ff e3       	ldi	r31, 0x3F	; 63
    1124:	7f 2e       	mov	r7, r31
    1126:	f0 2d       	mov	r31, r0
    1128:	14 c0       	rjmp	.+40     	; 0x1152 <CalculPWM+0x9e>
    112a:	c8 01       	movw	r24, r16
    112c:	b7 01       	movw	r22, r14
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	40 e8       	ldi	r20, 0x80	; 128
    1134:	5f eb       	ldi	r21, 0xBF	; 191
    1136:	0e 94 97 13 	call	0x272e	; 0x272e <__ltsf2>
    113a:	88 23       	and	r24, r24
    113c:	54 f4       	brge	.+20     	; 0x1152 <CalculPWM+0x9e>
    113e:	0f 2e       	mov	r0, r31
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	4f 2e       	mov	r4, r31
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	5f 2e       	mov	r5, r31
    1148:	f0 e8       	ldi	r31, 0x80	; 128
    114a:	6f 2e       	mov	r6, r31
    114c:	ff eb       	ldi	r31, 0xBF	; 191
    114e:	7f 2e       	mov	r7, r31
    1150:	f0 2d       	mov	r31, r0
	Vd = (Vd > 1.0) ? 1.0 : ((Vd < -1.0) ? -1.0 : Vd);  /* Regarde les limites (-1.0 à 1.0) */
    1152:	c6 01       	movw	r24, r12
    1154:	b5 01       	movw	r22, r10
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e8       	ldi	r20, 0x80	; 128
    115c:	5f e3       	ldi	r21, 0x3F	; 63
    115e:	0e 94 37 13 	call	0x266e	; 0x266e <__gtsf2>
    1162:	18 16       	cp	r1, r24
    1164:	5c f4       	brge	.+22     	; 0x117c <CalculPWM+0xc8>
    1166:	0f 2e       	mov	r0, r31
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	af 2e       	mov	r10, r31
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	bf 2e       	mov	r11, r31
    1170:	f0 e8       	ldi	r31, 0x80	; 128
    1172:	cf 2e       	mov	r12, r31
    1174:	ff e3       	ldi	r31, 0x3F	; 63
    1176:	df 2e       	mov	r13, r31
    1178:	f0 2d       	mov	r31, r0
    117a:	14 c0       	rjmp	.+40     	; 0x11a4 <CalculPWM+0xf0>
    117c:	c6 01       	movw	r24, r12
    117e:	b5 01       	movw	r22, r10
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e8       	ldi	r20, 0x80	; 128
    1186:	5f eb       	ldi	r21, 0xBF	; 191
    1188:	0e 94 97 13 	call	0x272e	; 0x272e <__ltsf2>
    118c:	88 23       	and	r24, r24
    118e:	54 f4       	brge	.+20     	; 0x11a4 <CalculPWM+0xf0>
    1190:	0f 2e       	mov	r0, r31
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	af 2e       	mov	r10, r31
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	bf 2e       	mov	r11, r31
    119a:	f0 e8       	ldi	r31, 0x80	; 128
    119c:	cf 2e       	mov	r12, r31
    119e:	ff eb       	ldi	r31, 0xBF	; 191
    11a0:	df 2e       	mov	r13, r31
    11a2:	f0 2d       	mov	r31, r0
		
	Old_W = W;
    11a4:	e0 90 7c 01 	lds	r14, 0x017C
    11a8:	f0 90 7d 01 	lds	r15, 0x017D
    11ac:	00 91 7e 01 	lds	r16, 0x017E
    11b0:	10 91 7f 01 	lds	r17, 0x017F
    11b4:	e0 92 78 01 	sts	0x0178, r14
    11b8:	f0 92 79 01 	sts	0x0179, r15
    11bc:	00 93 7a 01 	sts	0x017A, r16
    11c0:	10 93 7b 01 	sts	0x017B, r17
	W     = 0.5*(Vmax/RAYON)*(Vd-Vg);
    11c4:	c6 01       	movw	r24, r12
    11c6:	b5 01       	movw	r22, r10
    11c8:	a3 01       	movw	r20, r6
    11ca:	92 01       	movw	r18, r4
    11cc:	0e 94 33 11 	call	0x2266	; 0x2266 <__subsf3>
    11d0:	2a e1       	ldi	r18, 0x1A	; 26
    11d2:	32 e6       	ldi	r19, 0x62	; 98
    11d4:	46 e8       	ldi	r20, 0x86	; 134
    11d6:	50 e4       	ldi	r21, 0x40	; 64
    11d8:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
    11dc:	6b 83       	std	Y+3, r22	; 0x03
    11de:	7c 83       	std	Y+4, r23	; 0x04
    11e0:	8d 83       	std	Y+5, r24	; 0x05
    11e2:	9e 83       	std	Y+6, r25	; 0x06
    11e4:	60 93 7c 01 	sts	0x017C, r22
    11e8:	70 93 7d 01 	sts	0x017D, r23
    11ec:	80 93 7e 01 	sts	0x017E, r24
    11f0:	90 93 7f 01 	sts	0x017F, r25
	Vt    = 0.5*(Vd+Vg);
    11f4:	c6 01       	movw	r24, r12
    11f6:	b5 01       	movw	r22, r10
    11f8:	a3 01       	movw	r20, r6
    11fa:	92 01       	movw	r18, r4
    11fc:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__addsf3>
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	5f e3       	ldi	r21, 0x3F	; 63
    1208:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
    120c:	3b 01       	movw	r6, r22
    120e:	4c 01       	movw	r8, r24
    1210:	60 93 74 01 	sts	0x0174, r22
    1214:	70 93 75 01 	sts	0x0175, r23
    1218:	80 93 76 01 	sts	0x0176, r24
    121c:	90 93 77 01 	sts	0x0177, r25

	Angle = Angle + (0.5)*TS*(W+Old_W);
    1220:	6b 81       	ldd	r22, Y+3	; 0x03
    1222:	7c 81       	ldd	r23, Y+4	; 0x04
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	9e 81       	ldd	r25, Y+6	; 0x06
    1228:	a8 01       	movw	r20, r16
    122a:	97 01       	movw	r18, r14
    122c:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__addsf3>
    1230:	2a e0       	ldi	r18, 0x0A	; 10
    1232:	37 ed       	ldi	r19, 0xD7	; 215
    1234:	43 e2       	ldi	r20, 0x23	; 35
    1236:	5b e3       	ldi	r21, 0x3B	; 59
    1238:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
    123c:	20 91 84 01 	lds	r18, 0x0184
    1240:	30 91 85 01 	lds	r19, 0x0185
    1244:	40 91 86 01 	lds	r20, 0x0186
    1248:	50 91 87 01 	lds	r21, 0x0187
    124c:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__addsf3>
    1250:	7b 01       	movw	r14, r22
    1252:	8c 01       	movw	r16, r24
	Angle = (Angle > 2.0*Pi) ? Angle - 2*Pi : ((Angle < 0.0) ? Angle + 2*Pi : Angle); /* Angle entre 0 et 2 pi */
    1254:	2b ed       	ldi	r18, 0xDB	; 219
    1256:	3f e0       	ldi	r19, 0x0F	; 15
    1258:	49 ec       	ldi	r20, 0xC9	; 201
    125a:	50 e4       	ldi	r21, 0x40	; 64
    125c:	0e 94 37 13 	call	0x266e	; 0x266e <__gtsf2>
    1260:	18 16       	cp	r1, r24
    1262:	4c f4       	brge	.+18     	; 0x1276 <CalculPWM+0x1c2>
    1264:	c8 01       	movw	r24, r16
    1266:	b7 01       	movw	r22, r14
    1268:	2b ed       	ldi	r18, 0xDB	; 219
    126a:	3f e0       	ldi	r19, 0x0F	; 15
    126c:	49 ec       	ldi	r20, 0xC9	; 201
    126e:	50 e4       	ldi	r21, 0x40	; 64
    1270:	0e 94 33 11 	call	0x2266	; 0x2266 <__subsf3>
    1274:	12 c0       	rjmp	.+36     	; 0x129a <CalculPWM+0x1e6>
    1276:	c8 01       	movw	r24, r16
    1278:	b7 01       	movw	r22, r14
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e0       	ldi	r20, 0x00	; 0
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	0e 94 97 13 	call	0x272e	; 0x272e <__ltsf2>
    1286:	88 23       	and	r24, r24
    1288:	54 f4       	brge	.+20     	; 0x129e <CalculPWM+0x1ea>
    128a:	c8 01       	movw	r24, r16
    128c:	b7 01       	movw	r22, r14
    128e:	2b ed       	ldi	r18, 0xDB	; 219
    1290:	3f e0       	ldi	r19, 0x0F	; 15
    1292:	49 ec       	ldi	r20, 0xC9	; 201
    1294:	50 e4       	ldi	r21, 0x40	; 64
    1296:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__addsf3>
    129a:	7b 01       	movw	r14, r22
    129c:	8c 01       	movw	r16, r24
    129e:	e0 92 84 01 	sts	0x0184, r14
    12a2:	f0 92 85 01 	sts	0x0185, r15
    12a6:	00 93 86 01 	sts	0x0186, r16
    12aa:	10 93 87 01 	sts	0x0187, r17
	ErreurAngle = ((Angle_D >= Pi + Angle) ? Angle_D - 2*Pi : ((Angle_D <= -Pi + Angle) ? Angle_D + 2*Pi : Angle_D))-Angle;
    12ae:	c8 01       	movw	r24, r16
    12b0:	b7 01       	movw	r22, r14
    12b2:	2b ed       	ldi	r18, 0xDB	; 219
    12b4:	3f e0       	ldi	r19, 0x0F	; 15
    12b6:	49 e4       	ldi	r20, 0x49	; 73
    12b8:	50 e4       	ldi	r21, 0x40	; 64
    12ba:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__addsf3>
    12be:	9b 01       	movw	r18, r22
    12c0:	ac 01       	movw	r20, r24
    12c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ca:	0e 94 67 13 	call	0x26ce	; 0x26ce <__gesf2>
    12ce:	88 23       	and	r24, r24
    12d0:	5c f0       	brlt	.+22     	; 0x12e8 <CalculPWM+0x234>
    12d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12da:	2b ed       	ldi	r18, 0xDB	; 219
    12dc:	3f e0       	ldi	r19, 0x0F	; 15
    12de:	49 ec       	ldi	r20, 0xC9	; 201
    12e0:	50 e4       	ldi	r21, 0x40	; 64
    12e2:	0e 94 33 11 	call	0x2266	; 0x2266 <__subsf3>
    12e6:	1c c0       	rjmp	.+56     	; 0x1320 <CalculPWM+0x26c>
    12e8:	c8 01       	movw	r24, r16
    12ea:	b7 01       	movw	r22, r14
    12ec:	2b ed       	ldi	r18, 0xDB	; 219
    12ee:	3f e0       	ldi	r19, 0x0F	; 15
    12f0:	49 e4       	ldi	r20, 0x49	; 73
    12f2:	50 e4       	ldi	r21, 0x40	; 64
    12f4:	0e 94 33 11 	call	0x2266	; 0x2266 <__subsf3>
    12f8:	9b 01       	movw	r18, r22
    12fa:	ac 01       	movw	r20, r24
    12fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1300:	8d 85       	ldd	r24, Y+13	; 0x0d
    1302:	9e 85       	ldd	r25, Y+14	; 0x0e
    1304:	0e 94 c7 13 	call	0x278e	; 0x278e <__lesf2>
    1308:	18 16       	cp	r1, r24
    130a:	74 f0       	brlt	.+28     	; 0x1328 <CalculPWM+0x274>
    130c:	6b 85       	ldd	r22, Y+11	; 0x0b
    130e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1310:	8d 85       	ldd	r24, Y+13	; 0x0d
    1312:	9e 85       	ldd	r25, Y+14	; 0x0e
    1314:	2b ed       	ldi	r18, 0xDB	; 219
    1316:	3f e0       	ldi	r19, 0x0F	; 15
    1318:	49 ec       	ldi	r20, 0xC9	; 201
    131a:	50 e4       	ldi	r21, 0x40	; 64
    131c:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__addsf3>
    1320:	6b 87       	std	Y+11, r22	; 0x0b
    1322:	7c 87       	std	Y+12, r23	; 0x0c
    1324:	8d 87       	std	Y+13, r24	; 0x0d
    1326:	9e 87       	std	Y+14, r25	; 0x0e
    1328:	6b 85       	ldd	r22, Y+11	; 0x0b
    132a:	7c 85       	ldd	r23, Y+12	; 0x0c
    132c:	8d 85       	ldd	r24, Y+13	; 0x0d
    132e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1330:	a8 01       	movw	r20, r16
    1332:	97 01       	movw	r18, r14
    1334:	0e 94 33 11 	call	0x2266	; 0x2266 <__subsf3>
    1338:	5b 01       	movw	r10, r22
    133a:	6c 01       	movw	r12, r24
    133c:	60 93 80 01 	sts	0x0180, r22
    1340:	70 93 81 01 	sts	0x0181, r23
    1344:	80 93 82 01 	sts	0x0182, r24
    1348:	90 93 83 01 	sts	0x0183, r25

	Ut = -H11*Vt + H12*Vitesse_D;
    134c:	c4 01       	movw	r24, r8
    134e:	b3 01       	movw	r22, r6
    1350:	28 ee       	ldi	r18, 0xE8	; 232
    1352:	31 eb       	ldi	r19, 0xB1	; 177
    1354:	49 e7       	ldi	r20, 0x79	; 121
    1356:	50 ec       	ldi	r21, 0xC0	; 192
    1358:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
    135c:	7b 01       	movw	r14, r22
    135e:	8c 01       	movw	r16, r24
    1360:	6f 81       	ldd	r22, Y+7	; 0x07
    1362:	78 85       	ldd	r23, Y+8	; 0x08
    1364:	89 85       	ldd	r24, Y+9	; 0x09
    1366:	9a 85       	ldd	r25, Y+10	; 0x0a
    1368:	24 ef       	ldi	r18, 0xF4	; 244
    136a:	38 ed       	ldi	r19, 0xD8	; 216
    136c:	4c e9       	ldi	r20, 0x9C	; 156
    136e:	50 e4       	ldi	r21, 0x40	; 64
    1370:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
    1374:	9b 01       	movw	r18, r22
    1376:	ac 01       	movw	r20, r24
    1378:	c8 01       	movw	r24, r16
    137a:	b7 01       	movw	r22, r14
    137c:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__addsf3>
    1380:	3b 01       	movw	r6, r22
    1382:	4c 01       	movw	r8, r24
	Ua = H21*ErreurAngle - H22*W;
    1384:	c6 01       	movw	r24, r12
    1386:	b5 01       	movw	r22, r10
    1388:	21 e2       	ldi	r18, 0x21	; 33
    138a:	37 ea       	ldi	r19, 0xA7	; 167
    138c:	44 e9       	ldi	r20, 0x94	; 148
    138e:	5f e3       	ldi	r21, 0x3F	; 63
    1390:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
    1394:	7b 01       	movw	r14, r22
    1396:	8c 01       	movw	r16, r24
    1398:	6b 81       	ldd	r22, Y+3	; 0x03
    139a:	7c 81       	ldd	r23, Y+4	; 0x04
    139c:	8d 81       	ldd	r24, Y+5	; 0x05
    139e:	9e 81       	ldd	r25, Y+6	; 0x06
    13a0:	28 e1       	ldi	r18, 0x18	; 24
    13a2:	37 ea       	ldi	r19, 0xA7	; 167
    13a4:	44 e1       	ldi	r20, 0x14	; 20
    13a6:	5f eb       	ldi	r21, 0xBF	; 191
    13a8:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
    13ac:	9b 01       	movw	r18, r22
    13ae:	ac 01       	movw	r20, r24
    13b0:	c8 01       	movw	r24, r16
    13b2:	b7 01       	movw	r22, r14
    13b4:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__addsf3>
    13b8:	5b 01       	movw	r10, r22
    13ba:	6c 01       	movw	r12, r24
			
	Signe_Ua = (Ua >= 0.0)   ? 1 : -1;
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e0       	ldi	r20, 0x00	; 0
    13c2:	50 e0       	ldi	r21, 0x00	; 0
    13c4:	0e 94 67 13 	call	0x26ce	; 0x26ce <__gesf2>
    13c8:	87 ff       	sbrs	r24, 7
    13ca:	03 c0       	rjmp	.+6      	; 0x13d2 <CalculPWM+0x31e>
    13cc:	0f ef       	ldi	r16, 0xFF	; 255
    13ce:	1f ef       	ldi	r17, 0xFF	; 255
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <CalculPWM+0x322>
    13d2:	01 e0       	ldi	r16, 0x01	; 1
    13d4:	10 e0       	ldi	r17, 0x00	; 0
    13d6:	10 93 6b 01 	sts	0x016B, r17
    13da:	00 93 6a 01 	sts	0x016A, r16
	Signe_Ut = (Ut >= 0.0) ? 1 : -1;
    13de:	c4 01       	movw	r24, r8
    13e0:	b3 01       	movw	r22, r6
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	50 e0       	ldi	r21, 0x00	; 0
    13ea:	0e 94 67 13 	call	0x26ce	; 0x26ce <__gesf2>
    13ee:	87 ff       	sbrs	r24, 7
    13f0:	05 c0       	rjmp	.+10     	; 0x13fc <CalculPWM+0x348>
    13f2:	2f ef       	ldi	r18, 0xFF	; 255
    13f4:	3f ef       	ldi	r19, 0xFF	; 255
    13f6:	3a 83       	std	Y+2, r19	; 0x02
    13f8:	29 83       	std	Y+1, r18	; 0x01
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <CalculPWM+0x350>
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	9a 83       	std	Y+2, r25	; 0x02
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	a9 81       	ldd	r26, Y+1	; 0x01
    1406:	ba 81       	ldd	r27, Y+2	; 0x02
    1408:	b0 93 69 01 	sts	0x0169, r27
    140c:	a0 93 68 01 	sts	0x0168, r26
	
	Ua = (Signe_Ua*Ua > 1.0) ? Signe_Ua*1.0 : ((Signe_Ua*Ua <= 0.05) ? 0.0 : Ua);
    1410:	b8 01       	movw	r22, r16
    1412:	88 27       	eor	r24, r24
    1414:	77 fd       	sbrc	r23, 7
    1416:	80 95       	com	r24
    1418:	98 2f       	mov	r25, r24
    141a:	0e 94 f7 13 	call	0x27ee	; 0x27ee <__floatsisf>
    141e:	1b 01       	movw	r2, r22
    1420:	2c 01       	movw	r4, r24
    1422:	a6 01       	movw	r20, r12
    1424:	95 01       	movw	r18, r10
    1426:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
    142a:	7b 01       	movw	r14, r22
    142c:	8c 01       	movw	r16, r24
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e8       	ldi	r20, 0x80	; 128
    1434:	5f e3       	ldi	r21, 0x3F	; 63
    1436:	0e 94 37 13 	call	0x266e	; 0x266e <__gtsf2>
    143a:	18 16       	cp	r1, r24
    143c:	1c f4       	brge	.+6      	; 0x1444 <CalculPWM+0x390>
    143e:	62 01       	movw	r12, r4
    1440:	51 01       	movw	r10, r2
    1442:	14 c0       	rjmp	.+40     	; 0x146c <CalculPWM+0x3b8>
    1444:	c8 01       	movw	r24, r16
    1446:	b7 01       	movw	r22, r14
    1448:	2d ec       	ldi	r18, 0xCD	; 205
    144a:	3c ec       	ldi	r19, 0xCC	; 204
    144c:	4c e4       	ldi	r20, 0x4C	; 76
    144e:	5d e3       	ldi	r21, 0x3D	; 61
    1450:	0e 94 c7 13 	call	0x278e	; 0x278e <__lesf2>
    1454:	18 16       	cp	r1, r24
    1456:	54 f0       	brlt	.+20     	; 0x146c <CalculPWM+0x3b8>
    1458:	0f 2e       	mov	r0, r31
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	af 2e       	mov	r10, r31
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	bf 2e       	mov	r11, r31
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	cf 2e       	mov	r12, r31
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	df 2e       	mov	r13, r31
    146a:	f0 2d       	mov	r31, r0
    146c:	a0 92 6c 01 	sts	0x016C, r10
    1470:	b0 92 6d 01 	sts	0x016D, r11
    1474:	c0 92 6e 01 	sts	0x016E, r12
    1478:	d0 92 6f 01 	sts	0x016F, r13
	Ut = (Signe_Ut*Ut > 1.0) ? Signe_Ut*1.0 : Ut;
    147c:	e9 81       	ldd	r30, Y+1	; 0x01
    147e:	fa 81       	ldd	r31, Y+2	; 0x02
    1480:	bf 01       	movw	r22, r30
    1482:	88 27       	eor	r24, r24
    1484:	77 fd       	sbrc	r23, 7
    1486:	80 95       	com	r24
    1488:	98 2f       	mov	r25, r24
    148a:	0e 94 f7 13 	call	0x27ee	; 0x27ee <__floatsisf>
    148e:	7b 01       	movw	r14, r22
    1490:	8c 01       	movw	r16, r24
    1492:	a4 01       	movw	r20, r8
    1494:	93 01       	movw	r18, r6
    1496:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e8       	ldi	r20, 0x80	; 128
    14a0:	5f e3       	ldi	r21, 0x3F	; 63
    14a2:	0e 94 37 13 	call	0x266e	; 0x266e <__gtsf2>
    14a6:	18 16       	cp	r1, r24
    14a8:	14 f4       	brge	.+4      	; 0x14ae <CalculPWM+0x3fa>
    14aa:	37 01       	movw	r6, r14
    14ac:	48 01       	movw	r8, r16
	Ut = ((Signe_Ut*Ut) > (1.0 - Signe_Ua*Ua)) ? Signe_Ut*(1.0 - Signe_Ua*Ua) : Ut;
    14ae:	c2 01       	movw	r24, r4
    14b0:	b1 01       	movw	r22, r2
    14b2:	a6 01       	movw	r20, r12
    14b4:	95 01       	movw	r18, r10
    14b6:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
    14ba:	9b 01       	movw	r18, r22
    14bc:	ac 01       	movw	r20, r24
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	80 e8       	ldi	r24, 0x80	; 128
    14c4:	9f e3       	ldi	r25, 0x3F	; 63
    14c6:	0e 94 33 11 	call	0x2266	; 0x2266 <__subsf3>
    14ca:	1b 01       	movw	r2, r22
    14cc:	2c 01       	movw	r4, r24
    14ce:	c8 01       	movw	r24, r16
    14d0:	b7 01       	movw	r22, r14
    14d2:	a4 01       	movw	r20, r8
    14d4:	93 01       	movw	r18, r6
    14d6:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
    14da:	a2 01       	movw	r20, r4
    14dc:	91 01       	movw	r18, r2
    14de:	0e 94 37 13 	call	0x266e	; 0x266e <__gtsf2>
    14e2:	18 16       	cp	r1, r24
    14e4:	44 f4       	brge	.+16     	; 0x14f6 <CalculPWM+0x442>
    14e6:	c8 01       	movw	r24, r16
    14e8:	b7 01       	movw	r22, r14
    14ea:	a2 01       	movw	r20, r4
    14ec:	91 01       	movw	r18, r2
    14ee:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
    14f2:	3b 01       	movw	r6, r22
    14f4:	4c 01       	movw	r8, r24
    14f6:	60 92 70 01 	sts	0x0170, r6
    14fa:	70 92 71 01 	sts	0x0171, r7
    14fe:	80 92 72 01 	sts	0x0172, r8
    1502:	90 92 73 01 	sts	0x0173, r9


	*Duty_D = (Ut+Ua);
    1506:	c4 01       	movw	r24, r8
    1508:	b3 01       	movw	r22, r6
    150a:	a6 01       	movw	r20, r12
    150c:	95 01       	movw	r18, r10
    150e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__addsf3>
    1512:	ad a1       	ldd	r26, Y+37	; 0x25
    1514:	be a1       	ldd	r27, Y+38	; 0x26
    1516:	6d 93       	st	X+, r22
    1518:	7d 93       	st	X+, r23
    151a:	8d 93       	st	X+, r24
    151c:	9c 93       	st	X, r25
    151e:	13 97       	sbiw	r26, 0x03	; 3
	*Duty_G = (Ut-Ua);
    1520:	c4 01       	movw	r24, r8
    1522:	b3 01       	movw	r22, r6
    1524:	a6 01       	movw	r20, r12
    1526:	95 01       	movw	r18, r10
    1528:	0e 94 33 11 	call	0x2266	; 0x2266 <__subsf3>
    152c:	ef 85       	ldd	r30, Y+15	; 0x0f
    152e:	f8 89       	ldd	r31, Y+16	; 0x10
    1530:	60 83       	st	Z, r22
    1532:	71 83       	std	Z+1, r23	; 0x01
    1534:	82 83       	std	Z+2, r24	; 0x02
    1536:	93 83       	std	Z+3, r25	; 0x03

	*Duty_D = (*Duty_D > 0.99) ? 0.99 : ((*Duty_D < -0.99) ? -0.99 : *Duty_D);
    1538:	ad a1       	ldd	r26, Y+37	; 0x25
    153a:	be a1       	ldd	r27, Y+38	; 0x26
    153c:	ed 90       	ld	r14, X+
    153e:	fd 90       	ld	r15, X+
    1540:	0d 91       	ld	r16, X+
    1542:	1c 91       	ld	r17, X
    1544:	c8 01       	movw	r24, r16
    1546:	b7 01       	movw	r22, r14
    1548:	24 ea       	ldi	r18, 0xA4	; 164
    154a:	30 e7       	ldi	r19, 0x70	; 112
    154c:	4d e7       	ldi	r20, 0x7D	; 125
    154e:	5f e3       	ldi	r21, 0x3F	; 63
    1550:	0e 94 37 13 	call	0x266e	; 0x266e <__gtsf2>
    1554:	18 16       	cp	r1, r24
    1556:	5c f4       	brge	.+22     	; 0x156e <CalculPWM+0x4ba>
    1558:	0f 2e       	mov	r0, r31
    155a:	f4 ea       	ldi	r31, 0xA4	; 164
    155c:	ef 2e       	mov	r14, r31
    155e:	f0 e7       	ldi	r31, 0x70	; 112
    1560:	ff 2e       	mov	r15, r31
    1562:	fd e7       	ldi	r31, 0x7D	; 125
    1564:	0f 2f       	mov	r16, r31
    1566:	ff e3       	ldi	r31, 0x3F	; 63
    1568:	1f 2f       	mov	r17, r31
    156a:	f0 2d       	mov	r31, r0
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <CalculPWM+0x4e2>
    156e:	c8 01       	movw	r24, r16
    1570:	b7 01       	movw	r22, r14
    1572:	24 ea       	ldi	r18, 0xA4	; 164
    1574:	30 e7       	ldi	r19, 0x70	; 112
    1576:	4d e7       	ldi	r20, 0x7D	; 125
    1578:	5f eb       	ldi	r21, 0xBF	; 191
    157a:	0e 94 97 13 	call	0x272e	; 0x272e <__ltsf2>
    157e:	88 23       	and	r24, r24
    1580:	54 f4       	brge	.+20     	; 0x1596 <CalculPWM+0x4e2>
    1582:	0f 2e       	mov	r0, r31
    1584:	f4 ea       	ldi	r31, 0xA4	; 164
    1586:	ef 2e       	mov	r14, r31
    1588:	f0 e7       	ldi	r31, 0x70	; 112
    158a:	ff 2e       	mov	r15, r31
    158c:	fd e7       	ldi	r31, 0x7D	; 125
    158e:	0f 2f       	mov	r16, r31
    1590:	ff eb       	ldi	r31, 0xBF	; 191
    1592:	1f 2f       	mov	r17, r31
    1594:	f0 2d       	mov	r31, r0
    1596:	ed a1       	ldd	r30, Y+37	; 0x25
    1598:	fe a1       	ldd	r31, Y+38	; 0x26
    159a:	e0 82       	st	Z, r14
    159c:	f1 82       	std	Z+1, r15	; 0x01
    159e:	02 83       	std	Z+2, r16	; 0x02
    15a0:	13 83       	std	Z+3, r17	; 0x03
	*Duty_G = (*Duty_G > 0.99) ? 0.99 : ((*Duty_G < -0.99) ? -0.99 : *Duty_G);	
    15a2:	af 85       	ldd	r26, Y+15	; 0x0f
    15a4:	b8 89       	ldd	r27, Y+16	; 0x10
    15a6:	ed 90       	ld	r14, X+
    15a8:	fd 90       	ld	r15, X+
    15aa:	0d 91       	ld	r16, X+
    15ac:	1c 91       	ld	r17, X
    15ae:	c8 01       	movw	r24, r16
    15b0:	b7 01       	movw	r22, r14
    15b2:	24 ea       	ldi	r18, 0xA4	; 164
    15b4:	30 e7       	ldi	r19, 0x70	; 112
    15b6:	4d e7       	ldi	r20, 0x7D	; 125
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	0e 94 37 13 	call	0x266e	; 0x266e <__gtsf2>
    15be:	18 16       	cp	r1, r24
    15c0:	5c f4       	brge	.+22     	; 0x15d8 <CalculPWM+0x524>
    15c2:	0f 2e       	mov	r0, r31
    15c4:	f4 ea       	ldi	r31, 0xA4	; 164
    15c6:	ef 2e       	mov	r14, r31
    15c8:	f0 e7       	ldi	r31, 0x70	; 112
    15ca:	ff 2e       	mov	r15, r31
    15cc:	fd e7       	ldi	r31, 0x7D	; 125
    15ce:	0f 2f       	mov	r16, r31
    15d0:	ff e3       	ldi	r31, 0x3F	; 63
    15d2:	1f 2f       	mov	r17, r31
    15d4:	f0 2d       	mov	r31, r0
    15d6:	14 c0       	rjmp	.+40     	; 0x1600 <CalculPWM+0x54c>
    15d8:	c8 01       	movw	r24, r16
    15da:	b7 01       	movw	r22, r14
    15dc:	24 ea       	ldi	r18, 0xA4	; 164
    15de:	30 e7       	ldi	r19, 0x70	; 112
    15e0:	4d e7       	ldi	r20, 0x7D	; 125
    15e2:	5f eb       	ldi	r21, 0xBF	; 191
    15e4:	0e 94 97 13 	call	0x272e	; 0x272e <__ltsf2>
    15e8:	88 23       	and	r24, r24
    15ea:	54 f4       	brge	.+20     	; 0x1600 <CalculPWM+0x54c>
    15ec:	0f 2e       	mov	r0, r31
    15ee:	f4 ea       	ldi	r31, 0xA4	; 164
    15f0:	ef 2e       	mov	r14, r31
    15f2:	f0 e7       	ldi	r31, 0x70	; 112
    15f4:	ff 2e       	mov	r15, r31
    15f6:	fd e7       	ldi	r31, 0x7D	; 125
    15f8:	0f 2f       	mov	r16, r31
    15fa:	ff eb       	ldi	r31, 0xBF	; 191
    15fc:	1f 2f       	mov	r17, r31
    15fe:	f0 2d       	mov	r31, r0
    1600:	ef 85       	ldd	r30, Y+15	; 0x0f
    1602:	f8 89       	ldd	r31, Y+16	; 0x10
    1604:	e0 82       	st	Z, r14
    1606:	f1 82       	std	Z+1, r15	; 0x01
    1608:	02 83       	std	Z+2, r16	; 0x02
    160a:	13 83       	std	Z+3, r17	; 0x03
}
    160c:	60 96       	adiw	r28, 0x10	; 16
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	1f 91       	pop	r17
    161e:	0f 91       	pop	r16
    1620:	ff 90       	pop	r15
    1622:	ef 90       	pop	r14
    1624:	df 90       	pop	r13
    1626:	cf 90       	pop	r12
    1628:	bf 90       	pop	r11
    162a:	af 90       	pop	r10
    162c:	9f 90       	pop	r9
    162e:	8f 90       	pop	r8
    1630:	7f 90       	pop	r7
    1632:	6f 90       	pop	r6
    1634:	5f 90       	pop	r5
    1636:	4f 90       	pop	r4
    1638:	3f 90       	pop	r3
    163a:	2f 90       	pop	r2
    163c:	08 95       	ret

0000163e <initMotors>:
void initMotors(void)
{
	//TODO: move calib here
	
	//initialize motor direction outputs
	motorDirection = (LEFT_MOTOR_BRAKE)|(RIGHT_MOTOR_BRAKE);
    163e:	8c ec       	ldi	r24, 0xCC	; 204
    1640:	80 93 2d 02 	sts	0x022D, r24
	PORTD = motorDirection;
    1644:	80 91 2d 02 	lds	r24, 0x022D
    1648:	82 bb       	out	0x12, r24	; 18

	//Init motor command from controler
	requestedCommand.speed = 100;
    164a:	84 e6       	ldi	r24, 0x64	; 100
    164c:	80 93 f2 01 	sts	0x01F2, r24
	requestedCommand.angle = 0;
    1650:	10 92 f3 01 	sts	0x01F3, r1

	//init all motor and adc data
	adcValues.left = 0;
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	a0 e0       	ldi	r26, 0x00	; 0
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	80 93 90 01 	sts	0x0190, r24
    1660:	90 93 91 01 	sts	0x0191, r25
    1664:	a0 93 92 01 	sts	0x0192, r26
    1668:	b0 93 93 01 	sts	0x0193, r27
	adcValues.right = 0;
    166c:	80 93 94 01 	sts	0x0194, r24
    1670:	90 93 95 01 	sts	0x0195, r25
    1674:	a0 93 96 01 	sts	0x0196, r26
    1678:	b0 93 97 01 	sts	0x0197, r27
	dutyCycleLeft = 0;
    167c:	80 93 30 02 	sts	0x0230, r24
    1680:	90 93 31 02 	sts	0x0231, r25
    1684:	a0 93 32 02 	sts	0x0232, r26
    1688:	b0 93 33 02 	sts	0x0233, r27
	dutyCycleRight = 0;
    168c:	80 93 d4 01 	sts	0x01D4, r24
    1690:	90 93 d5 01 	sts	0x01D5, r25
    1694:	a0 93 d6 01 	sts	0x01D6, r26
    1698:	b0 93 d7 01 	sts	0x01D7, r27
	computedCommand.speed = 0.0;
    169c:	80 93 8c 01 	sts	0x018C, r24
    16a0:	90 93 8d 01 	sts	0x018D, r25
    16a4:	a0 93 8e 01 	sts	0x018E, r26
    16a8:	b0 93 8f 01 	sts	0x018F, r27
	computedCommand.angle = 0.0;
    16ac:	80 93 88 01 	sts	0x0188, r24
    16b0:	90 93 89 01 	sts	0x0189, r25
    16b4:	a0 93 8a 01 	sts	0x018A, r26
    16b8:	b0 93 8b 01 	sts	0x018B, r27
	
	//Set motors outputs to 0
	OCR1A = 0;
    16bc:	1b bc       	out	0x2b, r1	; 43
    16be:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;
    16c0:	19 bc       	out	0x29, r1	; 41
    16c2:	18 bc       	out	0x28, r1	; 40
}
    16c4:	08 95       	ret

000016c6 <checkDirection>:
//
///////////////////////////////////////////
void checkDirection(void)
{

	if (convertedMotorSpeed.left > ABSOLUTE_ZERO)	//if dutyCycle is positive
    16c6:	80 91 cc 01 	lds	r24, 0x01CC
    16ca:	90 91 cd 01 	lds	r25, 0x01CD
    16ce:	18 16       	cp	r1, r24
    16d0:	19 06       	cpc	r1, r25
    16d2:	24 f4       	brge	.+8      	; 0x16dc <checkDirection+0x16>
	{
		motorDirection = LEFT_MOTOR_FORWARD;
    16d4:	84 e0       	ldi	r24, 0x04	; 4
    16d6:	80 93 2d 02 	sts	0x022D, r24
    16da:	1d c0       	rjmp	.+58     	; 0x1716 <checkDirection+0x50>
	}	
	else if (convertedMotorSpeed.left < ABSOLUTE_ZERO)	//if it is negative
    16dc:	80 91 cc 01 	lds	r24, 0x01CC
    16e0:	90 91 cd 01 	lds	r25, 0x01CD
    16e4:	97 ff       	sbrs	r25, 7
    16e6:	0f c0       	rjmp	.+30     	; 0x1706 <checkDirection+0x40>
	{
		motorDirection = LEFT_MOTOR_BACKWARD;
    16e8:	88 e0       	ldi	r24, 0x08	; 8
    16ea:	80 93 2d 02 	sts	0x022D, r24
		convertedMotorSpeed.left = ((-1)*convertedMotorSpeed.left);
    16ee:	80 91 cc 01 	lds	r24, 0x01CC
    16f2:	90 91 cd 01 	lds	r25, 0x01CD
    16f6:	90 95       	com	r25
    16f8:	81 95       	neg	r24
    16fa:	9f 4f       	sbci	r25, 0xFF	; 255
    16fc:	90 93 cd 01 	sts	0x01CD, r25
    1700:	80 93 cc 01 	sts	0x01CC, r24
    1704:	08 c0       	rjmp	.+16     	; 0x1716 <checkDirection+0x50>
	}
	else if (convertedMotorSpeed.left == ABSOLUTE_ZERO)	//if we got a big 0
    1706:	80 91 cc 01 	lds	r24, 0x01CC
    170a:	90 91 cd 01 	lds	r25, 0x01CD
    170e:	89 2b       	or	r24, r25
    1710:	11 f4       	brne	.+4      	; 0x1716 <checkDirection+0x50>
	{
		motorDirection = LEFT_MOTOR_STOP;
    1712:	10 92 2d 02 	sts	0x022D, r1
	}
	
	if (convertedMotorSpeed.right > ABSOLUTE_ZERO)	//same thing as with left
    1716:	80 91 ce 01 	lds	r24, 0x01CE
    171a:	90 91 cf 01 	lds	r25, 0x01CF
    171e:	18 16       	cp	r1, r24
    1720:	19 06       	cpc	r1, r25
    1722:	24 f4       	brge	.+8      	; 0x172c <checkDirection+0x66>
	{
		motorDirection |= RIGHT_MOTOR_FORWARD;
    1724:	80 91 2d 02 	lds	r24, 0x022D
    1728:	80 64       	ori	r24, 0x40	; 64
    172a:	09 c0       	rjmp	.+18     	; 0x173e <checkDirection+0x78>
	}	
	else if (convertedMotorSpeed.right < ABSOLUTE_ZERO)
    172c:	80 91 ce 01 	lds	r24, 0x01CE
    1730:	90 91 cf 01 	lds	r25, 0x01CF
    1734:	97 ff       	sbrs	r25, 7
    1736:	06 c0       	rjmp	.+12     	; 0x1744 <checkDirection+0x7e>
	{
		motorDirection |= RIGHT_MOTOR_BACKWARD;
    1738:	80 91 2d 02 	lds	r24, 0x022D
    173c:	80 68       	ori	r24, 0x80	; 128
    173e:	80 93 2d 02 	sts	0x022D, r24
    1742:	08 95       	ret
	}
	else if (convertedMotorSpeed.right == ABSOLUTE_ZERO)	//in the case of a 0
    1744:	80 91 ce 01 	lds	r24, 0x01CE
    1748:	90 91 cf 01 	lds	r25, 0x01CF
    174c:	89 2b       	or	r24, r25
    174e:	a9 f4       	brne	.+42     	; 0x177a <checkDirection+0xb4>
	{
		if (motorDirection == (LEFT_MOTOR_STOP))	//verify if left is also 0
    1750:	80 91 2d 02 	lds	r24, 0x022D
    1754:	88 23       	and	r24, r24
    1756:	11 f4       	brne	.+4      	; 0x175c <checkDirection+0x96>
		{
			motorDirection = (LEFT_MOTOR_BRAKE | RIGHT_MOTOR_BRAKE);	//then brake
    1758:	8c ec       	ldi	r24, 0xCC	; 204
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <checkDirection+0x9a>
		}
		else
		{
			motorDirection |= RIGHT_MOTOR_STOP;	//else only send stop
    175c:	80 91 2d 02 	lds	r24, 0x022D
    1760:	80 93 2d 02 	sts	0x022D, r24
		}
		convertedMotorSpeed.right = ((-1)*convertedMotorSpeed.right);
    1764:	80 91 ce 01 	lds	r24, 0x01CE
    1768:	90 91 cf 01 	lds	r25, 0x01CF
    176c:	90 95       	com	r25
    176e:	81 95       	neg	r24
    1770:	9f 4f       	sbci	r25, 0xFF	; 255
    1772:	90 93 cf 01 	sts	0x01CF, r25
    1776:	80 93 ce 01 	sts	0x01CE, r24
    177a:	08 95       	ret

0000177c <setMotorOutputs>:


	//set motor outputs
	//TODO: Add a way to avoid obstacles
	
	if ((objectDetectedRight == 1) || (objectDetectedLeft == 1))
    177c:	80 91 24 02 	lds	r24, 0x0224
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	21 f0       	breq	.+8      	; 0x178c <setMotorOutputs+0x10>
    1784:	80 91 99 01 	lds	r24, 0x0199
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	31 f4       	brne	.+12     	; 0x1798 <setMotorOutputs+0x1c>
	{
		OCR1A = 0;
    178c:	1b bc       	out	0x2b, r1	; 43
    178e:	1a bc       	out	0x2a, r1	; 42
		OCR1B = 0;
    1790:	19 bc       	out	0x29, r1	; 41
    1792:	18 bc       	out	0x28, r1	; 40
		PORTD = (LEFT_MOTOR_BRAKE | RIGHT_MOTOR_BRAKE);
    1794:	8c ec       	ldi	r24, 0xCC	; 204
    1796:	0e c0       	rjmp	.+28     	; 0x17b4 <setMotorOutputs+0x38>

	}
	else
	{
		OCR1A = convertedMotorSpeed.left;
    1798:	80 91 cc 01 	lds	r24, 0x01CC
    179c:	90 91 cd 01 	lds	r25, 0x01CD
    17a0:	9b bd       	out	0x2b, r25	; 43
    17a2:	8a bd       	out	0x2a, r24	; 42
		OCR1B = convertedMotorSpeed.right;
    17a4:	80 91 ce 01 	lds	r24, 0x01CE
    17a8:	90 91 cf 01 	lds	r25, 0x01CF
    17ac:	99 bd       	out	0x29, r25	; 41
    17ae:	88 bd       	out	0x28, r24	; 40
		PORTD = motorDirection;
    17b0:	80 91 2d 02 	lds	r24, 0x022D
    17b4:	82 bb       	out	0x12, r24	; 18
    17b6:	08 95       	ret

000017b8 <convertValuesToInt>:
//
///////////////////////////////////////////
void convertValuesToInt(void)
{

	convertedMotorSpeed.left = (signed int)((dutyCycleLeft*MAX_OVERFLOW_VALUE));
    17b8:	60 91 30 02 	lds	r22, 0x0230
    17bc:	70 91 31 02 	lds	r23, 0x0231
    17c0:	80 91 32 02 	lds	r24, 0x0232
    17c4:	90 91 33 02 	lds	r25, 0x0233
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e4       	ldi	r19, 0x40	; 64
    17cc:	4c e1       	ldi	r20, 0x1C	; 28
    17ce:	56 e4       	ldi	r21, 0x46	; 70
    17d0:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
    17d4:	0e 94 55 14 	call	0x28aa	; 0x28aa <__fixsfsi>
    17d8:	70 93 cd 01 	sts	0x01CD, r23
    17dc:	60 93 cc 01 	sts	0x01CC, r22
	convertedMotorSpeed.right = (signed int)((dutyCycleRight*MAX_OVERFLOW_VALUE));
    17e0:	60 91 d4 01 	lds	r22, 0x01D4
    17e4:	70 91 d5 01 	lds	r23, 0x01D5
    17e8:	80 91 d6 01 	lds	r24, 0x01D6
    17ec:	90 91 d7 01 	lds	r25, 0x01D7
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e4       	ldi	r19, 0x40	; 64
    17f4:	4c e1       	ldi	r20, 0x1C	; 28
    17f6:	56 e4       	ldi	r21, 0x46	; 70
    17f8:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
    17fc:	0e 94 55 14 	call	0x28aa	; 0x28aa <__fixsfsi>
    1800:	70 93 cf 01 	sts	0x01CF, r23
    1804:	60 93 ce 01 	sts	0x01CE, r22

}
    1808:	08 95       	ret

0000180a <setMotors>:
//
//Return value:	-none
//
///////////////////////////////////////////
void setMotors(void)
{
    180a:	8f 92       	push	r8
    180c:	9f 92       	push	r9
    180e:	af 92       	push	r10
    1810:	bf 92       	push	r11
    1812:	cf 92       	push	r12
    1814:	df 92       	push	r13
    1816:	ef 92       	push	r14
    1818:	ff 92       	push	r15
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
	//get new duty cycle values
	CalculPWM((float)computedCommand.speed, (float)computedCommand.angle, adcValues.left, adcValues.right, &dutyCycleLeft, &dutyCycleRight);
    181e:	e0 90 90 01 	lds	r14, 0x0190
    1822:	f0 90 91 01 	lds	r15, 0x0191
    1826:	00 91 92 01 	lds	r16, 0x0192
    182a:	10 91 93 01 	lds	r17, 0x0193
    182e:	a0 90 94 01 	lds	r10, 0x0194
    1832:	b0 90 95 01 	lds	r11, 0x0195
    1836:	c0 90 96 01 	lds	r12, 0x0196
    183a:	d0 90 97 01 	lds	r13, 0x0197
    183e:	00 d0       	rcall	.+0      	; 0x1840 <setMotors+0x36>
    1840:	60 91 8c 01 	lds	r22, 0x018C
    1844:	70 91 8d 01 	lds	r23, 0x018D
    1848:	80 91 8e 01 	lds	r24, 0x018E
    184c:	90 91 8f 01 	lds	r25, 0x018F
    1850:	20 91 88 01 	lds	r18, 0x0188
    1854:	30 91 89 01 	lds	r19, 0x0189
    1858:	40 91 8a 01 	lds	r20, 0x018A
    185c:	50 91 8b 01 	lds	r21, 0x018B
    1860:	e4 ed       	ldi	r30, 0xD4	; 212
    1862:	f1 e0       	ldi	r31, 0x01	; 1
    1864:	ad b7       	in	r26, 0x3d	; 61
    1866:	be b7       	in	r27, 0x3e	; 62
    1868:	12 96       	adiw	r26, 0x02	; 2
    186a:	fc 93       	st	X, r31
    186c:	ee 93       	st	-X, r30
    186e:	11 97       	sbiw	r26, 0x01	; 1
    1870:	e0 e3       	ldi	r30, 0x30	; 48
    1872:	8e 2e       	mov	r8, r30
    1874:	e2 e0       	ldi	r30, 0x02	; 2
    1876:	9e 2e       	mov	r9, r30
    1878:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <CalculPWM>
//
///////////////////////////////////////////
void convertValuesToInt(void)
{

	convertedMotorSpeed.left = (signed int)((dutyCycleLeft*MAX_OVERFLOW_VALUE));
    187c:	60 91 30 02 	lds	r22, 0x0230
    1880:	70 91 31 02 	lds	r23, 0x0231
    1884:	80 91 32 02 	lds	r24, 0x0232
    1888:	90 91 33 02 	lds	r25, 0x0233
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e4       	ldi	r19, 0x40	; 64
    1890:	4c e1       	ldi	r20, 0x1C	; 28
    1892:	56 e4       	ldi	r21, 0x46	; 70
    1894:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
    1898:	0e 94 55 14 	call	0x28aa	; 0x28aa <__fixsfsi>
    189c:	70 93 cd 01 	sts	0x01CD, r23
    18a0:	60 93 cc 01 	sts	0x01CC, r22
	convertedMotorSpeed.right = (signed int)((dutyCycleRight*MAX_OVERFLOW_VALUE));
    18a4:	60 91 d4 01 	lds	r22, 0x01D4
    18a8:	70 91 d5 01 	lds	r23, 0x01D5
    18ac:	80 91 d6 01 	lds	r24, 0x01D6
    18b0:	90 91 d7 01 	lds	r25, 0x01D7
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e4       	ldi	r19, 0x40	; 64
    18b8:	4c e1       	ldi	r20, 0x1C	; 28
    18ba:	56 e4       	ldi	r21, 0x46	; 70
    18bc:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
    18c0:	0e 94 55 14 	call	0x28aa	; 0x28aa <__fixsfsi>
    18c4:	70 93 cf 01 	sts	0x01CF, r23
    18c8:	60 93 ce 01 	sts	0x01CE, r22
	//get new duty cycle values
	CalculPWM((float)computedCommand.speed, (float)computedCommand.angle, adcValues.left, adcValues.right, &dutyCycleLeft, &dutyCycleRight);
	//convert flot duty cycles to int
	convertValuesToInt();
	//set direction outputs
	checkDirection();
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <checkDirection>


	//set motor outputs
	//TODO: Add a way to avoid obstacles
	
	if ((objectDetectedRight == 1) || (objectDetectedLeft == 1))
    18d4:	80 91 24 02 	lds	r24, 0x0224
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	21 f0       	breq	.+8      	; 0x18e4 <setMotors+0xda>
    18dc:	80 91 99 01 	lds	r24, 0x0199
    18e0:	81 30       	cpi	r24, 0x01	; 1
    18e2:	31 f4       	brne	.+12     	; 0x18f0 <setMotors+0xe6>
	{
		OCR1A = 0;
    18e4:	1b bc       	out	0x2b, r1	; 43
    18e6:	1a bc       	out	0x2a, r1	; 42
		OCR1B = 0;
    18e8:	19 bc       	out	0x29, r1	; 41
    18ea:	18 bc       	out	0x28, r1	; 40
		PORTD = (LEFT_MOTOR_BRAKE | RIGHT_MOTOR_BRAKE);
    18ec:	8c ec       	ldi	r24, 0xCC	; 204
    18ee:	0e c0       	rjmp	.+28     	; 0x190c <setMotors+0x102>

	}
	else
	{
		OCR1A = convertedMotorSpeed.left;
    18f0:	80 91 cc 01 	lds	r24, 0x01CC
    18f4:	90 91 cd 01 	lds	r25, 0x01CD
    18f8:	9b bd       	out	0x2b, r25	; 43
    18fa:	8a bd       	out	0x2a, r24	; 42
		OCR1B = convertedMotorSpeed.right;
    18fc:	80 91 ce 01 	lds	r24, 0x01CE
    1900:	90 91 cf 01 	lds	r25, 0x01CF
    1904:	99 bd       	out	0x29, r25	; 41
    1906:	88 bd       	out	0x28, r24	; 40
		PORTD = motorDirection;
    1908:	80 91 2d 02 	lds	r24, 0x022D
    190c:	82 bb       	out	0x12, r24	; 18
	//set direction outputs
	checkDirection();
	//set pwm values on timer1
	setMotorOutputs();

	adcCompletedFlag = 0;	//flag to ADC that it can restart its job
    190e:	10 92 c9 01 	sts	0x01C9, r1

}
    1912:	1f 91       	pop	r17
    1914:	0f 91       	pop	r16
    1916:	ff 90       	pop	r15
    1918:	ef 90       	pop	r14
    191a:	df 90       	pop	r13
    191c:	cf 90       	pop	r12
    191e:	bf 90       	pop	r11
    1920:	af 90       	pop	r10
    1922:	9f 90       	pop	r9
    1924:	8f 90       	pop	r8
    1926:	08 95       	ret

00001928 <initPorts>:
//Return value:	-none
//
///////////////////////////////////////////
void initPorts(void)
{
	DDRB = 0xFF;            	//PortB output
    1928:	8f ef       	ldi	r24, 0xFF	; 255
    192a:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFE; 				//port D = all out but Rx bit
    192c:	8e ef       	ldi	r24, 0xFE	; 254
    192e:	81 bb       	out	0x11, r24	; 17
	DDRA = 0x10;				//All out but calib bit. Note that bit 5 is unused
    1930:	80 e1       	ldi	r24, 0x10	; 16
    1932:	8a bb       	out	0x1a, r24	; 26
	robotState = STATE_ASLEEP;	//start robot at DEAD state
    1934:	10 92 2c 02 	sts	0x022C, r1
}
    1938:	08 95       	ret

0000193a <setWatchDog>:
//
///////////////////////////////////////////
void setWatchDog(void)
{
	//enable + presacaler value.... value is fine tuned for smooth operations
	WDTCR = (1<<WDTOE)|(1<<WDE)|(1<<WDP2)|(0<<WDP1)|(0<<WDP0);
    193a:	8c e1       	ldi	r24, 0x1C	; 28
    193c:	81 bd       	out	0x21, r24	; 33
}
    193e:	08 95       	ret

00001940 <checkControls>:
//Return value:	-none
//
///////////////////////////////////////////
void checkControls(void)	//Check switch inputs 
{
	if (~PINA & INPUT_LIVE)
    1940:	ce 99       	sbic	0x19, 6	; 25
    1942:	0c c0       	rjmp	.+24     	; 0x195c <checkControls+0x1c>
	{
		robotState = STATE_ALIVE;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	80 93 2c 02 	sts	0x022C, r24
		PORTB = 0x00;	//light leds to notice it received the input
    194a:	18 ba       	out	0x18, r1	; 24

		while(~PINA & INPUT_LIVE){}	// to make sure switch is released
    194c:	ce 9b       	sbis	0x19, 6	; 25
    194e:	fe cf       	rjmp	.-4      	; 0x194c <checkControls+0xc>
		
		ledAliveState();	//set leds for normal ops
    1950:	0e 94 4d 07 	call	0xe9a	; 0xe9a <ledAliveState>
//
///////////////////////////////////////////
void setWatchDog(void)
{
	//enable + presacaler value.... value is fine tuned for smooth operations
	WDTCR = (1<<WDTOE)|(1<<WDE)|(1<<WDP2)|(0<<WDP1)|(0<<WDP0);
    1954:	8c e1       	ldi	r24, 0x1C	; 28
    1956:	81 bd       	out	0x21, r24	; 33

		while(~PINA & INPUT_LIVE){}	// to make sure switch is released
		
		ledAliveState();	//set leds for normal ops
		setWatchDog();		//enable watchdog
		resetTWI();			//reset TWI com
    1958:	0e 94 c8 0c 	call	0x1990	; 0x1990 <resetTWI>
	}
	if (~PINA & INPUT_DIE)
    195c:	cf 99       	sbic	0x19, 7	; 25
    195e:	0a c0       	rjmp	.+20     	; 0x1974 <checkControls+0x34>
	{
		robotState = STATE_ASLEEP;
    1960:	10 92 2c 02 	sts	0x022C, r1
		
		OCR1A = 0;
    1964:	1b bc       	out	0x2b, r1	; 43
    1966:	1a bc       	out	0x2a, r1	; 42
		OCR1B = 0;
    1968:	19 bc       	out	0x29, r1	; 41
    196a:	18 bc       	out	0x28, r1	; 40
		PORTB = 0x00;	//light leds to notice it received the input
    196c:	18 ba       	out	0x18, r1	; 24

		while(~PINA & INPUT_DIE){}	// to make sure switch is released
    196e:	cf 9b       	sbis	0x19, 7	; 25
    1970:	fe cf       	rjmp	.-4      	; 0x196e <checkControls+0x2e>

		wdt_reset();
    1972:	a8 95       	wdr
    1974:	08 95       	ret

00001976 <configureTWI>:
///////////////////////////////////////////
void configureTWI(void)
{
	//init all data
	//memset((void*) &SonarData, 0, sizeof(SonarData));	//init all values	
	SonarData.initFlag = 1;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	80 93 e8 01 	sts	0x01E8, r24
	SonarData.sendCompleteFlag = 1;
    197c:	80 93 ea 01 	sts	0x01EA, r24
	pingCounter = 0;
    1980:	10 92 cb 01 	sts	0x01CB, r1
	twiStateMachine = 0;
    1984:	10 92 98 01 	sts	0x0198, r1
	
	//set TWI frequency
	TWSR = TWPS_PRESCALER_VALUE;
    1988:	81 b9       	out	0x01, r24	; 1
	TWBR = TWBR_REGISTER_VALUE;
    198a:	86 ec       	ldi	r24, 0xC6	; 198
    198c:	80 b9       	out	0x00, r24	; 0
	
}
    198e:	08 95       	ret

00001990 <resetTWI>:
///////////////////////////////////////////
void resetTWI(void)
{
	//memset((void*) &SonarData, 0, sizeof(SonarData));

	twiStateMachine = 0;
    1990:	10 92 98 01 	sts	0x0198, r1

	//set initial values
	SonarData.initFlag = 1;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	80 93 e8 01 	sts	0x01E8, r24
	SonarData.sendCompleteFlag = 1;
    199a:	80 93 ea 01 	sts	0x01EA, r24
	objectDetectedRight = 0;
    199e:	10 92 24 02 	sts	0x0224, r1
	objectDetectedLeft = 0;
    19a2:	10 92 99 01 	sts	0x0199, r1
	pingCounter = 0;
    19a6:	10 92 cb 01 	sts	0x01CB, r1
	SonarData.pingSide = 0;
    19aa:	10 92 e9 01 	sts	0x01E9, r1
	SonarData.range = INIT_SONAR_RANGE;
    19ae:	8e e2       	ldi	r24, 0x2E	; 46
    19b0:	80 93 e1 01 	sts	0x01E1, r24
}
    19b4:	08 95       	ret

000019b6 <TWIcheckState>:
//Return value:	-none
//
///////////////////////////////////////////									
void TWIcheckState(void)
{
	TWIstate = (TWSR & TWSR_MASK);	//get newest TW status value
    19b6:	81 b1       	in	r24, 0x01	; 1
    19b8:	88 7f       	andi	r24, 0xF8	; 248
    19ba:	80 93 d8 01 	sts	0x01D8, r24
	switch (TWIstate)
    19be:	80 91 d8 01 	lds	r24, 0x01D8
    19c2:	88 32       	cpi	r24, 0x28	; 40
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <TWIcheckState+0x12>
    19c6:	3f c0       	rjmp	.+126    	; 0x1a46 <TWIcheckState+0x90>
    19c8:	89 32       	cpi	r24, 0x29	; 41
    19ca:	88 f4       	brcc	.+34     	; 0x19ee <TWIcheckState+0x38>
    19cc:	80 31       	cpi	r24, 0x10	; 16
    19ce:	01 f1       	breq	.+64     	; 0x1a10 <TWIcheckState+0x5a>
    19d0:	81 31       	cpi	r24, 0x11	; 17
    19d2:	38 f4       	brcc	.+14     	; 0x19e2 <TWIcheckState+0x2c>
    19d4:	88 23       	and	r24, r24
    19d6:	09 f4       	brne	.+2      	; 0x19da <TWIcheckState+0x24>
    19d8:	a0 c0       	rjmp	.+320    	; 0x1b1a <TWIcheckState+0x164>
    19da:	88 30       	cpi	r24, 0x08	; 8
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <TWIcheckState+0x2a>
    19de:	a3 c0       	rjmp	.+326    	; 0x1b26 <TWIcheckState+0x170>
    19e0:	26 c0       	rjmp	.+76     	; 0x1a2e <TWIcheckState+0x78>
    19e2:	88 31       	cpi	r24, 0x18	; 24
    19e4:	41 f1       	breq	.+80     	; 0x1a36 <TWIcheckState+0x80>
    19e6:	80 32       	cpi	r24, 0x20	; 32
    19e8:	09 f0       	breq	.+2      	; 0x19ec <TWIcheckState+0x36>
    19ea:	9d c0       	rjmp	.+314    	; 0x1b26 <TWIcheckState+0x170>
    19ec:	28 c0       	rjmp	.+80     	; 0x1a3e <TWIcheckState+0x88>
    19ee:	80 34       	cpi	r24, 0x40	; 64
    19f0:	f1 f1       	breq	.+124    	; 0x1a6e <TWIcheckState+0xb8>
    19f2:	81 34       	cpi	r24, 0x41	; 65
    19f4:	38 f4       	brcc	.+14     	; 0x1a04 <TWIcheckState+0x4e>
    19f6:	80 33       	cpi	r24, 0x30	; 48
    19f8:	09 f4       	brne	.+2      	; 0x19fc <TWIcheckState+0x46>
    19fa:	95 c0       	rjmp	.+298    	; 0x1b26 <TWIcheckState+0x170>
    19fc:	88 33       	cpi	r24, 0x38	; 56
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <TWIcheckState+0x4c>
    1a00:	92 c0       	rjmp	.+292    	; 0x1b26 <TWIcheckState+0x170>
    1a02:	8b c0       	rjmp	.+278    	; 0x1b1a <TWIcheckState+0x164>
    1a04:	80 35       	cpi	r24, 0x50	; 80
    1a06:	a9 f1       	breq	.+106    	; 0x1a72 <TWIcheckState+0xbc>
    1a08:	88 35       	cpi	r24, 0x58	; 88
    1a0a:	09 f0       	breq	.+2      	; 0x1a0e <TWIcheckState+0x58>
    1a0c:	8c c0       	rjmp	.+280    	; 0x1b26 <TWIcheckState+0x170>
    1a0e:	85 c0       	rjmp	.+266    	; 0x1b1a <TWIcheckState+0x164>
			TWCR = TWI_ENABLE;
			break;
		}
		case (TW_REP_START):	//repeated start...	
		{
			if (SonarData.pingingFlag)
    1a10:	80 91 e7 01 	lds	r24, 0x01E7
    1a14:	88 23       	and	r24, r24
    1a16:	59 f0       	breq	.+22     	; 0x1a2e <TWIcheckState+0x78>
			{
				SonarData.pingingFlag = 0;	//if pinging mode, send SLA+R
    1a18:	10 92 e7 01 	sts	0x01E7, r1
				if (SonarData.pingSide == 2)
    1a1c:	80 91 e9 01 	lds	r24, 0x01E9
    1a20:	82 30       	cpi	r24, 0x02	; 2
    1a22:	11 f4       	brne	.+4      	; 0x1a28 <TWIcheckState+0x72>
				{
					SonarData.slaveAdd = LEFT_SONAR_READ;
    1a24:	83 ee       	ldi	r24, 0xE3	; 227
    1a26:	01 c0       	rjmp	.+2      	; 0x1a2a <TWIcheckState+0x74>
				}
				else
				{
					SonarData.slaveAdd = RIGHT_SONAR_READ;
    1a28:	81 ee       	ldi	r24, 0xE1	; 225
    1a2a:	80 93 e2 01 	sts	0x01E2, r24
				}
			}
			TWDR = SonarData.slaveAdd;		//else, re-send actual address
    1a2e:	80 91 e2 01 	lds	r24, 0x01E2
    1a32:	83 b9       	out	0x03, r24	; 3
    1a34:	70 c0       	rjmp	.+224    	; 0x1b16 <TWIcheckState+0x160>
			TWCR = TWI_ENABLE;
			break;
		}
		case (TW_SLA_ACK):	//slave write ack, send register to modify
		{	
			TWDR = SonarData.slaveReg;
    1a36:	80 91 e3 01 	lds	r24, 0x01E3
    1a3a:	83 b9       	out	0x03, r24	; 3
    1a3c:	18 c0       	rjmp	.+48     	; 0x1a6e <TWIcheckState+0xb8>
			TWCR = TWI_ENABLE | TWI_ACK;
			break;
		}
		case (TW_SLA_NACK):	//slave write not ack, restart
		{
			SonarData.sendCompleteFlag = 1;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	80 93 ea 01 	sts	0x01EA, r24
    1a44:	68 c0       	rjmp	.+208    	; 0x1b16 <TWIcheckState+0x160>
			TWCR = TWI_ENABLE;
			break;
		}
		case (TW_DATA_ACK):	//slave received data
		{		
			if (SonarData.valueFlag)	//if we got additional value to send
    1a46:	80 91 e5 01 	lds	r24, 0x01E5
    1a4a:	88 23       	and	r24, r24
    1a4c:	31 f0       	breq	.+12     	; 0x1a5a <TWIcheckState+0xa4>
			{
				TWDR = SonarData.valueToSend;
    1a4e:	80 91 e4 01 	lds	r24, 0x01E4
    1a52:	83 b9       	out	0x03, r24	; 3
				SonarData.valueFlag = 0;	//only one data after register value.. leave it hardcoded for now
    1a54:	10 92 e5 01 	sts	0x01E5, r1
    1a58:	5e c0       	rjmp	.+188    	; 0x1b16 <TWIcheckState+0x160>
				TWCR = TWI_ENABLE;

			}
			else if (SonarData.pingFlag) //if ping mode
    1a5a:	80 91 e6 01 	lds	r24, 0x01E6
    1a5e:	88 23       	and	r24, r24
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <TWIcheckState+0xae>
    1a62:	5b c0       	rjmp	.+182    	; 0x1b1a <TWIcheckState+0x164>
			{
				
				SonarData.pingingFlag = 1;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	80 93 e7 01 	sts	0x01E7, r24
				TWCR = TWI_START;	//send repeated start for read
    1a6a:	85 ea       	ldi	r24, 0xA5	; 165
    1a6c:	5a c0       	rjmp	.+180    	; 0x1b22 <TWIcheckState+0x16c>
			TWCR = TWI_STOP;	//give up, release master powers
			break;
		}
		case (TW_SLA_READ_ACK):	//SLA+R ack
		{
			TWCR = TWI_ENABLE | TWI_ACK;	//send ack bit
    1a6e:	85 ec       	ldi	r24, 0xC5	; 197
    1a70:	58 c0       	rjmp	.+176    	; 0x1b22 <TWIcheckState+0x16c>
			break;
		}
		case (TW_SLAVE_DATA_ACK):	//data received from slave
		{
			//robustness purpose: makes sure it is in good state to receive data
			if ((twiStateMachine == STATE_3)&&(SonarData.pingFlag))
    1a72:	80 91 98 01 	lds	r24, 0x0198
    1a76:	82 30       	cpi	r24, 0x02	; 2
    1a78:	a1 f4       	brne	.+40     	; 0x1aa2 <TWIcheckState+0xec>
    1a7a:	80 91 e6 01 	lds	r24, 0x01E6
    1a7e:	88 23       	and	r24, r24
    1a80:	81 f0       	breq	.+32     	; 0x1aa2 <TWIcheckState+0xec>
			{	
				if (SonarData.pingSide == PING_LEFT)
    1a82:	80 91 e9 01 	lds	r24, 0x01E9
    1a86:	82 30       	cpi	r24, 0x02	; 2
    1a88:	21 f4       	brne	.+8      	; 0x1a92 <TWIcheckState+0xdc>
				{
					SonarData.valueLeftMSB = TWDR;
    1a8a:	83 b1       	in	r24, 0x03	; 3
    1a8c:	80 93 ee 01 	sts	0x01EE, r24
    1a90:	42 c0       	rjmp	.+132    	; 0x1b16 <TWIcheckState+0x160>
					
				}
				else if (SonarData.pingSide == PING_RIGHT)//robustness: reverify ping side
    1a92:	80 91 e9 01 	lds	r24, 0x01E9
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	f1 f5       	brne	.+124    	; 0x1b16 <TWIcheckState+0x160>
				{
					SonarData.valueRightMSB = TWDR;
    1a9a:	83 b1       	in	r24, 0x03	; 3
    1a9c:	80 93 ec 01 	sts	0x01EC, r24
    1aa0:	3a c0       	rjmp	.+116    	; 0x1b16 <TWIcheckState+0x160>
				}

			}		
			//robustness purpose: makes sure it is in good state to receive data			
			else if ((twiStateMachine == STATE_4)&&(SonarData.pingFlag))
    1aa2:	80 91 98 01 	lds	r24, 0x0198
    1aa6:	83 30       	cpi	r24, 0x03	; 3
    1aa8:	b1 f5       	brne	.+108    	; 0x1b16 <TWIcheckState+0x160>
    1aaa:	80 91 e6 01 	lds	r24, 0x01E6
    1aae:	88 23       	and	r24, r24
    1ab0:	91 f1       	breq	.+100    	; 0x1b16 <TWIcheckState+0x160>
			{
				if (SonarData.pingSide == PING_LEFT)
    1ab2:	80 91 e9 01 	lds	r24, 0x01E9
    1ab6:	82 30       	cpi	r24, 0x02	; 2
    1ab8:	b1 f4       	brne	.+44     	; 0x1ae6 <TWIcheckState+0x130>
				{
					SonarData.valueLeftLSB = TWDR;
    1aba:	83 b1       	in	r24, 0x03	; 3
    1abc:	80 93 ed 01 	sts	0x01ED, r24
					//These are actual values when no object in sight
					if ((SonarData.valueLeftLSB != PING_ZEROVALUE_LSB)&&(SonarData.valueLeftMSB != PING_ZEROVALUE_MSB))
    1ac0:	80 91 ed 01 	lds	r24, 0x01ED
    1ac4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac6:	51 f0       	breq	.+20     	; 0x1adc <TWIcheckState+0x126>
    1ac8:	80 91 ee 01 	lds	r24, 0x01EE
    1acc:	8f 30       	cpi	r24, 0x0F	; 15
    1ace:	31 f0       	breq	.+12     	; 0x1adc <TWIcheckState+0x126>
					{
						objectDetectedLeft = 1;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	80 93 99 01 	sts	0x0199, r24
						leftObjectLed = 1;
    1ad6:	80 93 d3 01 	sts	0x01D3, r24
    1ada:	1d c0       	rjmp	.+58     	; 0x1b16 <TWIcheckState+0x160>
					}
					else
					{
						objectDetectedLeft = 0;
    1adc:	10 92 99 01 	sts	0x0199, r1
						leftObjectLed = 0;
    1ae0:	10 92 d3 01 	sts	0x01D3, r1
    1ae4:	18 c0       	rjmp	.+48     	; 0x1b16 <TWIcheckState+0x160>
					}
				}
				else if (SonarData.pingSide == PING_RIGHT)
    1ae6:	90 91 e9 01 	lds	r25, 0x01E9
    1aea:	91 30       	cpi	r25, 0x01	; 1
    1aec:	a1 f4       	brne	.+40     	; 0x1b16 <TWIcheckState+0x160>
				{
					SonarData.valueRightLSB = TWDR;
    1aee:	83 b1       	in	r24, 0x03	; 3
    1af0:	80 93 eb 01 	sts	0x01EB, r24
					//These are actual values when no object in sight
					if ((SonarData.valueRightLSB != PING_ZEROVALUE_LSB)&&(SonarData.valueRightMSB != PING_ZEROVALUE_MSB))
    1af4:	80 91 eb 01 	lds	r24, 0x01EB
    1af8:	8f 3f       	cpi	r24, 0xFF	; 255
    1afa:	49 f0       	breq	.+18     	; 0x1b0e <TWIcheckState+0x158>
    1afc:	80 91 ec 01 	lds	r24, 0x01EC
    1b00:	8f 30       	cpi	r24, 0x0F	; 15
    1b02:	29 f0       	breq	.+10     	; 0x1b0e <TWIcheckState+0x158>
					{
						objectDetectedRight = 1;
    1b04:	90 93 24 02 	sts	0x0224, r25
						rightObjectLed = 1;
    1b08:	90 93 fb 01 	sts	0x01FB, r25
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <TWIcheckState+0x160>
					}
					else
					{
						objectDetectedRight = 0;
    1b0e:	10 92 24 02 	sts	0x0224, r1
						rightObjectLed = 0;
    1b12:	10 92 fb 01 	sts	0x01FB, r1
					}
				}
			}
			TWCR = TWI_ENABLE;	//send no-ack, data is received
    1b16:	85 e8       	ldi	r24, 0x85	; 133
    1b18:	04 c0       	rjmp	.+8      	; 0x1b22 <TWIcheckState+0x16c>
			TWCR = TWI_STOP;	//stop COM
			break;
		}
		case (TW_BUS_ERROR):	//this should never happen
		{
			SonarData.sendCompleteFlag = 1;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	80 93 ea 01 	sts	0x01EA, r24
			TWCR = TWI_STOP;	//give up, release master powers
    1b20:	84 e9       	ldi	r24, 0x94	; 148
    1b22:	86 bf       	out	0x36, r24	; 54
    1b24:	08 95       	ret
			break;
		}
		default:
		{
			SonarData.sendCompleteFlag = 1;	//this should never happer
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	80 93 ea 01 	sts	0x01EA, r24
    1b2c:	08 95       	ret

00001b2e <__vector_19>:
//Brief: Calls TWIcheckState which reads TWSR
//		 status to process TWI communications.
//
///////////////////////////////////////////
ISR(TWI_vect)	//TWI interrupt vector
{		
    1b2e:	1f 92       	push	r1
    1b30:	0f 92       	push	r0
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	0f 92       	push	r0
    1b36:	11 24       	eor	r1, r1
    1b38:	2f 93       	push	r18
    1b3a:	3f 93       	push	r19
    1b3c:	4f 93       	push	r20
    1b3e:	5f 93       	push	r21
    1b40:	6f 93       	push	r22
    1b42:	7f 93       	push	r23
    1b44:	8f 93       	push	r24
    1b46:	9f 93       	push	r25
    1b48:	af 93       	push	r26
    1b4a:	bf 93       	push	r27
    1b4c:	ef 93       	push	r30
    1b4e:	ff 93       	push	r31
	TWIcheckState();	//TWI Rx or Tx
    1b50:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <TWIcheckState>
}
    1b54:	ff 91       	pop	r31
    1b56:	ef 91       	pop	r30
    1b58:	bf 91       	pop	r27
    1b5a:	af 91       	pop	r26
    1b5c:	9f 91       	pop	r25
    1b5e:	8f 91       	pop	r24
    1b60:	7f 91       	pop	r23
    1b62:	6f 91       	pop	r22
    1b64:	5f 91       	pop	r21
    1b66:	4f 91       	pop	r20
    1b68:	3f 91       	pop	r19
    1b6a:	2f 91       	pop	r18
    1b6c:	0f 90       	pop	r0
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	0f 90       	pop	r0
    1b72:	1f 90       	pop	r1
    1b74:	18 95       	reti

00001b76 <setTWIstream>:
//
///////////////////////////////////////////	
void setTWIstream(void)
{

	if (SonarData.initFlag == 1)	//change register values
    1b76:	90 91 e8 01 	lds	r25, 0x01E8
    1b7a:	91 30       	cpi	r25, 0x01	; 1
    1b7c:	09 f0       	breq	.+2      	; 0x1b80 <setTWIstream+0xa>
    1b7e:	4d c0       	rjmp	.+154    	; 0x1c1a <setTWIstream+0xa4>
	{
		SonarData.valueFlag = 1;
    1b80:	90 93 e5 01 	sts	0x01E5, r25
		switch (twiStateMachine)
    1b84:	80 91 98 01 	lds	r24, 0x0198
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	c9 f0       	breq	.+50     	; 0x1bbe <setTWIstream+0x48>
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	28 f0       	brcs	.+10     	; 0x1b9a <setTWIstream+0x24>
    1b90:	82 30       	cpi	r24, 0x02	; 2
    1b92:	f1 f0       	breq	.+60     	; 0x1bd0 <setTWIstream+0x5a>
    1b94:	83 30       	cpi	r24, 0x03	; 3
    1b96:	71 f5       	brne	.+92     	; 0x1bf4 <setTWIstream+0x7e>
    1b98:	2b c0       	rjmp	.+86     	; 0x1bf0 <setTWIstream+0x7a>
		{
			case (STATE_1):
			{

				SonarData.slaveAdd = LEFT_SONAR_WRITE;
    1b9a:	82 ee       	ldi	r24, 0xE2	; 226
    1b9c:	80 93 e2 01 	sts	0x01E2, r24
				SonarData.slaveReg = SONAR_RANGE_REGISTER;
    1ba0:	82 e0       	ldi	r24, 0x02	; 2
    1ba2:	80 93 e3 01 	sts	0x01E3, r24
				SonarData.valueToSend = SonarData.range;
    1ba6:	80 91 e1 01 	lds	r24, 0x01E1
    1baa:	80 93 e4 01 	sts	0x01E4, r24
				twiStateMachine++;
    1bae:	80 91 98 01 	lds	r24, 0x0198
    1bb2:	8f 5f       	subi	r24, 0xFF	; 255
    1bb4:	80 93 98 01 	sts	0x0198, r24
				TWCR = TWI_START;
    1bb8:	85 ea       	ldi	r24, 0xA5	; 165
    1bba:	86 bf       	out	0x36, r24	; 54
    1bbc:	2e c0       	rjmp	.+92     	; 0x1c1a <setTWIstream+0xa4>
				break;
			}
			case (STATE_2):
			{
				SonarData.slaveAdd = RIGHT_SONAR_WRITE;
    1bbe:	80 ee       	ldi	r24, 0xE0	; 224
    1bc0:	80 93 e2 01 	sts	0x01E2, r24
				SonarData.slaveReg = SONAR_RANGE_REGISTER;
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	80 93 e3 01 	sts	0x01E3, r24
				SonarData.valueToSend = SonarData.range;
    1bca:	80 91 e1 01 	lds	r24, 0x01E1
    1bce:	06 c0       	rjmp	.+12     	; 0x1bdc <setTWIstream+0x66>
				twiStateMachine++;
				break;
			}
			case (STATE_3):
			{
				SonarData.slaveAdd = LEFT_SONAR_WRITE;
    1bd0:	82 ee       	ldi	r24, 0xE2	; 226
    1bd2:	80 93 e2 01 	sts	0x01E2, r24
				SonarData.slaveReg = SONAR_GAIN_REGISTER;
    1bd6:	90 93 e3 01 	sts	0x01E3, r25
				SonarData.valueToSend = INIT_SONAR_GAIN;
    1bda:	8a e0       	ldi	r24, 0x0A	; 10
    1bdc:	80 93 e4 01 	sts	0x01E4, r24
				TWCR = TWI_START;
    1be0:	85 ea       	ldi	r24, 0xA5	; 165
    1be2:	86 bf       	out	0x36, r24	; 54
				twiStateMachine++;
    1be4:	80 91 98 01 	lds	r24, 0x0198
    1be8:	8f 5f       	subi	r24, 0xFF	; 255
    1bea:	80 93 98 01 	sts	0x0198, r24
    1bee:	15 c0       	rjmp	.+42     	; 0x1c1a <setTWIstream+0xa4>
				break;
			}
			case (STATE_4):
			{
				SonarData.slaveAdd = RIGHT_SONAR_WRITE;
    1bf0:	80 ee       	ldi	r24, 0xE0	; 224
    1bf2:	ef cf       	rjmp	.-34     	; 0x1bd2 <setTWIstream+0x5c>
				break;
			}

			default:
			{
				twiStateMachine=0;			//start pinging
    1bf4:	10 92 98 01 	sts	0x0198, r1
				SonarData.valueFlag = 0;	//robustness call
    1bf8:	10 92 e5 01 	sts	0x01E5, r1
				SonarData.initFlag = 0;		//most of these values are already set
    1bfc:	10 92 e8 01 	sts	0x01E8, r1
				SonarData.pingFlag = 1;					
    1c00:	90 93 e6 01 	sts	0x01E6, r25
				SonarData.slaveAdd = LEFT_SONAR_WRITE;
    1c04:	82 ee       	ldi	r24, 0xE2	; 226
    1c06:	80 93 e2 01 	sts	0x01E2, r24
				pingCounter = 0;
    1c0a:	10 92 cb 01 	sts	0x01CB, r1
				SonarData.sendCompleteFlag = 1;
    1c0e:	90 93 ea 01 	sts	0x01EA, r25
				SonarData.pingSide = 1;
    1c12:	90 93 e9 01 	sts	0x01E9, r25
				SonarData.valueFlag = 0;
    1c16:	10 92 e5 01 	sts	0x01E5, r1
	}/*	FUTUR GROWTH: SONAR RANGE SETTINGS MUST CHANGE ALONG SPEED
	else if (SonarData.changeRangeFlag)
	{

	}*/
	if (SonarData.pingFlag)
    1c1a:	80 91 e6 01 	lds	r24, 0x01E6
    1c1e:	88 23       	and	r24, r24
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <setTWIstream+0xae>
    1c22:	67 c0       	rjmp	.+206    	; 0x1cf2 <setTWIstream+0x17c>
	{
		//switch ping side
		if (pingCounter >= MAX_DELAY_PING)
    1c24:	80 91 cb 01 	lds	r24, 0x01CB
    1c28:	8a 30       	cpi	r24, 0x0A	; 10
    1c2a:	b8 f0       	brcs	.+46     	; 0x1c5a <setTWIstream+0xe4>
		{

			if (SonarData.pingSide == PING_LEFT)
    1c2c:	80 91 e9 01 	lds	r24, 0x01E9
    1c30:	82 30       	cpi	r24, 0x02	; 2
    1c32:	31 f4       	brne	.+12     	; 0x1c40 <setTWIstream+0xca>
			{
				SonarData.pingSide = PING_RIGHT;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	80 93 e9 01 	sts	0x01E9, r24
				leftPingFlag = 1;
    1c3a:	80 93 c2 01 	sts	0x01C2, r24
    1c3e:	06 c0       	rjmp	.+12     	; 0x1c4c <setTWIstream+0xd6>
			}
			else
			{
				SonarData.pingSide = PING_LEFT;
    1c40:	82 e0       	ldi	r24, 0x02	; 2
    1c42:	80 93 e9 01 	sts	0x01E9, r24
				rightPingFlag= PING_RIGHT;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	80 93 fa 01 	sts	0x01FA, r24
			}

			//ready for next TWI COM
			twiStateMachine = 0;
    1c4c:	10 92 98 01 	sts	0x0198, r1
			pingCounter = 0;	
    1c50:	10 92 cb 01 	sts	0x01CB, r1
			SonarData.sendCompleteFlag = 1;	
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	80 93 ea 01 	sts	0x01EA, r24

		}		
		//PINGING MODE
		switch (twiStateMachine)
    1c5a:	80 91 98 01 	lds	r24, 0x0198
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	01 f1       	breq	.+64     	; 0x1ca2 <setTWIstream+0x12c>
    1c62:	81 30       	cpi	r24, 0x01	; 1
    1c64:	18 f0       	brcs	.+6      	; 0x1c6c <setTWIstream+0xf6>
    1c66:	82 30       	cpi	r24, 0x02	; 2
    1c68:	e1 f5       	brne	.+120    	; 0x1ce2 <setTWIstream+0x16c>
    1c6a:	26 c0       	rjmp	.+76     	; 0x1cb8 <setTWIstream+0x142>
		{		
			case (STATE_1):
			{		
				//send ping to other sonar
				if (SonarData.pingSide == PING_LEFT)
    1c6c:	80 91 e9 01 	lds	r24, 0x01E9
    1c70:	82 30       	cpi	r24, 0x02	; 2
    1c72:	11 f4       	brne	.+4      	; 0x1c78 <setTWIstream+0x102>
				{
					SonarData.slaveAdd = RIGHT_SONAR_WRITE;
    1c74:	80 ee       	ldi	r24, 0xE0	; 224
    1c76:	01 c0       	rjmp	.+2      	; 0x1c7a <setTWIstream+0x104>
				}
				else
				{
					SonarData.slaveAdd = LEFT_SONAR_WRITE;
    1c78:	82 ee       	ldi	r24, 0xE2	; 226
    1c7a:	80 93 e2 01 	sts	0x01E2, r24
				}
				SonarData.slaveReg = SONAR_CMD_REGISTER;
    1c7e:	10 92 e3 01 	sts	0x01E3, r1
				SonarData.valueFlag = 1;
    1c82:	91 e0       	ldi	r25, 0x01	; 1
    1c84:	90 93 e5 01 	sts	0x01E5, r25
				SonarData.valueToSend = PING_CMD_CM;
    1c88:	81 e5       	ldi	r24, 0x51	; 81
    1c8a:	80 93 e4 01 	sts	0x01E4, r24
				twiStateMachine++;
    1c8e:	80 91 98 01 	lds	r24, 0x0198
    1c92:	8f 5f       	subi	r24, 0xFF	; 255
    1c94:	80 93 98 01 	sts	0x0198, r24
				TWCR = TWI_START;
    1c98:	85 ea       	ldi	r24, 0xA5	; 165
    1c9a:	86 bf       	out	0x36, r24	; 54
				SonarData.pingFlag = 1;
    1c9c:	90 93 e6 01 	sts	0x01E6, r25
    1ca0:	08 95       	ret
				break;
			}
			case (STATE_2):
			{
				if (SonarData.pingSide == PING_LEFT)
    1ca2:	80 91 e9 01 	lds	r24, 0x01E9
    1ca6:	82 30       	cpi	r24, 0x02	; 2
    1ca8:	11 f4       	brne	.+4      	; 0x1cae <setTWIstream+0x138>
				{
					SonarData.slaveAdd = LEFT_SONAR_WRITE;
    1caa:	82 ee       	ldi	r24, 0xE2	; 226
    1cac:	01 c0       	rjmp	.+2      	; 0x1cb0 <setTWIstream+0x13a>
				}
				else
				{
					SonarData.slaveAdd = RIGHT_SONAR_WRITE;
    1cae:	80 ee       	ldi	r24, 0xE0	; 224
    1cb0:	80 93 e2 01 	sts	0x01E2, r24
				}

				SonarData.slaveReg = SONAR_MSB_VALUE_REGISTER;
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	06 c0       	rjmp	.+12     	; 0x1cc4 <setTWIstream+0x14e>
				SonarData.pingFlag = 1;
				break;
			}
			case (STATE_3):	//ask value low right
			{
				SonarData.slaveAdd = (SonarData.slaveAdd & ~SONAR_READ_FLAG);	//remove write flag
    1cb8:	80 91 e2 01 	lds	r24, 0x01E2
    1cbc:	8e 7f       	andi	r24, 0xFE	; 254
    1cbe:	80 93 e2 01 	sts	0x01E2, r24
				SonarData.slaveReg = SONAR_LSB_VALUE_REGISTER;
    1cc2:	83 e0       	ldi	r24, 0x03	; 3
    1cc4:	80 93 e3 01 	sts	0x01E3, r24
				SonarData.valueFlag = 0;
    1cc8:	10 92 e5 01 	sts	0x01E5, r1
				TWCR = TWI_START;
    1ccc:	85 ea       	ldi	r24, 0xA5	; 165
    1cce:	86 bf       	out	0x36, r24	; 54
				twiStateMachine++;
    1cd0:	80 91 98 01 	lds	r24, 0x0198
    1cd4:	8f 5f       	subi	r24, 0xFF	; 255
    1cd6:	80 93 98 01 	sts	0x0198, r24
				SonarData.pingFlag = 1;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	80 93 e6 01 	sts	0x01E6, r24
    1ce0:	08 95       	ret
				break;
			}
			default:
			{
				twiStateMachine = STATE_4;
    1ce2:	83 e0       	ldi	r24, 0x03	; 3
    1ce4:	80 93 98 01 	sts	0x0198, r24
				SonarData.sendCompleteFlag = 1;	
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	80 93 ea 01 	sts	0x01EA, r24
				SonarData.pingFlag = 1;
    1cee:	80 93 e6 01 	sts	0x01E6, r24
    1cf2:	08 95       	ret

00001cf4 <processTWI>:
//Return value:	-none
//
///////////////////////////////////////////
void processTWI(void)
{	
	if (SonarData.sendCompleteFlag)
    1cf4:	80 91 ea 01 	lds	r24, 0x01EA
    1cf8:	88 23       	and	r24, r24
    1cfa:	21 f0       	breq	.+8      	; 0x1d04 <processTWI+0x10>
	{
		SonarData.sendCompleteFlag = 0;
    1cfc:	10 92 ea 01 	sts	0x01EA, r1
		setTWIstream();
    1d00:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <setTWIstream>
    1d04:	08 95       	ret

00001d06 <__vector_9>:
//Brief: Sets motorReadyFlag to set new values
//		 on motor outputs.
//
///////////////////////////////////////////
ISR(TIMER1_OVF_vect) //timer1 overflow
{
    1d06:	1f 92       	push	r1
    1d08:	0f 92       	push	r0
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	0f 92       	push	r0
    1d0e:	11 24       	eor	r1, r1
    1d10:	8f 93       	push	r24
	motorReadyFlag = 1;	//flag for motors
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	80 93 2b 02 	sts	0x022B, r24
}
    1d18:	8f 91       	pop	r24
    1d1a:	0f 90       	pop	r0
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	0f 90       	pop	r0
    1d20:	1f 90       	pop	r1
    1d22:	18 95       	reti

00001d24 <initTimer1>:
///////////////////////////////////////////
void initTimer1(void)
{
	//Set timer1 register values for desired operation
	//won't change output settings, fast PWM, using output compare, disable input capture
	TCCR1A = (0<<COM1A0) | (1<<COM1A1) | (0<<COM1B0) | (1<<COM1B1) | (0<<FOC1A) | (0<<FOC1B) | (1<<WGM11) | (0<<WGM10);
    1d24:	82 ea       	ldi	r24, 0xA2	; 162
    1d26:	8f bd       	out	0x2f, r24	; 47
	//no noise cancelation, detection on falling edge, reserved bit, fast PWM, prescaler = 8 
	TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<5) | (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
    1d28:	8a e1       	ldi	r24, 0x1A	; 26
    1d2a:	8e bd       	out	0x2e, r24	; 46

	ICR1 = MAX_OVERFLOW_VALUE;	//set max overflow value
    1d2c:	80 e1       	ldi	r24, 0x10	; 16
    1d2e:	97 e2       	ldi	r25, 0x27	; 39
    1d30:	97 bd       	out	0x27, r25	; 39
    1d32:	86 bd       	out	0x26, r24	; 38

	//enable interrupt on timer1 (input capture and output compare disable, enable interrupt on timer overflow)
	TIMSK |= (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1);
    1d34:	89 b7       	in	r24, 0x39	; 57
    1d36:	84 60       	ori	r24, 0x04	; 4
    1d38:	89 bf       	out	0x39, r24	; 57

	//init outputs to 0
	OCR1A = 0;
    1d3a:	1b bc       	out	0x2b, r1	; 43
    1d3c:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;
    1d3e:	19 bc       	out	0x29, r1	; 41
    1d40:	18 bc       	out	0x28, r1	; 40
	
	//init flags
	timer1ReadyFlag = 0;
    1d42:	10 92 c8 01 	sts	0x01C8, r1
	motorReadyFlag = 0;
    1d46:	10 92 2b 02 	sts	0x022B, r1
	adcCalibrationFlag = 0;
    1d4a:	10 92 2a 02 	sts	0x022A, r1
}
    1d4e:	08 95       	ret

00001d50 <dealWithMotors>:
//Return value:	-none
//
///////////////////////////////////////////
void dealWithMotors(void)
{
	if (motorReadyFlag == 1)
    1d50:	80 91 2b 02 	lds	r24, 0x022B
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	69 f4       	brne	.+26     	; 0x1d72 <dealWithMotors+0x22>
	{
		if (pingCounter <= MAX_DELAY_PING)	//increase counter for pings
    1d58:	80 91 cb 01 	lds	r24, 0x01CB
    1d5c:	8b 30       	cpi	r24, 0x0B	; 11
    1d5e:	28 f4       	brcc	.+10     	; 0x1d6a <dealWithMotors+0x1a>
		{
			pingCounter++;
    1d60:	80 91 cb 01 	lds	r24, 0x01CB
    1d64:	8f 5f       	subi	r24, 0xFF	; 255
    1d66:	80 93 cb 01 	sts	0x01CB, r24
		}	
		setMotors();	//set motor outputs
    1d6a:	0e 94 05 0c 	call	0x180a	; 0x180a <setMotors>
		motorReadyFlag = 0;
    1d6e:	10 92 2b 02 	sts	0x022B, r1
    1d72:	08 95       	ret

00001d74 <__vector_15>:
//Brief: Set uartTxReady flag for transmit methods
//
///////////////////////////////////////////
ISR(USART_TXC_vect) 	//TX ready     
// signal handler for uart txd ready interrupt
{
    1d74:	1f 92       	push	r1
    1d76:	0f 92       	push	r0
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	0f 92       	push	r0
    1d7c:	11 24       	eor	r1, r1
    1d7e:	8f 93       	push	r24
	uartTxReady = 1;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	80 93 26 02 	sts	0x0226, r24
}
    1d86:	8f 91       	pop	r24
    1d88:	0f 90       	pop	r0
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	0f 90       	pop	r0
    1d8e:	1f 90       	pop	r1
    1d90:	18 95       	reti

00001d92 <uart_init>:
///////////////////////////////////////////
void uart_init(void)
{
	
	//set uart set-up registers
	UCSRC = UCSRC_REGISTER_SELECTIONS;
    1d92:	86 e8       	ldi	r24, 0x86	; 134
    1d94:	80 bd       	out	0x20, r24	; 32
	UCSRB = UCSRB_REGISTER_SELECTIONS;
    1d96:	88 ed       	ldi	r24, 0xD8	; 216
    1d98:	8a b9       	out	0x0a, r24	; 10
    /* set baud rate */
    UBRRH = ((uint8_t)(UART_BAUD_SELECT >> 8));
    1d9a:	10 bc       	out	0x20, r1	; 32
    UBRRL = ((uint8_t)(UART_BAUD_SELECT & 0x00FF));
    1d9c:	87 e6       	ldi	r24, 0x67	; 103
    1d9e:	89 b9       	out	0x09, r24	; 9
	//set receiver state machine to waiting
	ReceiverState = STATE_WAITING;    
    1da0:	10 92 23 02 	sts	0x0223, r1
	
	//init all flags
	uartTxReady = 1;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	80 93 26 02 	sts	0x0226, r24
	uartReadyFlag = 0;
    1daa:	10 92 39 02 	sts	0x0239, r1
	motorCommandCompletedFlag = 0;
    1dae:	10 92 25 02 	sts	0x0225, r1
	actualCommand.speed = 0;
    1db2:	10 92 f0 01 	sts	0x01F0, r1
	actualCommand.angle = 0;
    1db6:	10 92 f1 01 	sts	0x01F1, r1
	stopFlag = 0;
    1dba:	10 92 f5 01 	sts	0x01F5, r1
}
    1dbe:	08 95       	ret

00001dc0 <processData>:
//
///////////////////////////////////////////
void processData(void)
{

	switch (ReceiverState)
    1dc0:	80 91 23 02 	lds	r24, 0x0223
    1dc4:	81 30       	cpi	r24, 0x01	; 1
    1dc6:	e1 f0       	breq	.+56     	; 0x1e00 <processData+0x40>
    1dc8:	81 30       	cpi	r24, 0x01	; 1
    1dca:	18 f0       	brcs	.+6      	; 0x1dd2 <processData+0x12>
    1dcc:	82 30       	cpi	r24, 0x02	; 2
    1dce:	61 f5       	brne	.+88     	; 0x1e28 <processData+0x68>
    1dd0:	1f c0       	rjmp	.+62     	; 0x1e10 <processData+0x50>
	{
		case (STATE_WAITING):	//waiting for new command
			
			if (data == 0xF1) //signal for new incomming command
    1dd2:	80 91 22 02 	lds	r24, 0x0222
    1dd6:	81 3f       	cpi	r24, 0xF1	; 241
    1dd8:	11 f4       	brne	.+4      	; 0x1dde <processData+0x1e>
			{
				ReceiverState = STATE_CMD_RECEIVED;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	16 c0       	rjmp	.+44     	; 0x1e0a <processData+0x4a>
			}
			else if (stopFlag == 2)	//if flag as been received
    1dde:	80 91 f5 01 	lds	r24, 0x01F5
    1de2:	82 30       	cpi	r24, 0x02	; 2
    1de4:	19 f4       	brne	.+6      	; 0x1dec <processData+0x2c>
			{
				stopFlag = 0;
    1de6:	10 92 f5 01 	sts	0x01F5, r1
    1dea:	08 95       	ret
			}
			else if (data == 0xF0)	//stop command
    1dec:	80 91 22 02 	lds	r24, 0x0222
    1df0:	80 3f       	cpi	r24, 0xF0	; 240
    1df2:	d1 f4       	brne	.+52     	; 0x1e28 <processData+0x68>
			{
				ReceiverState = STATE_WAITING;	//come back to waiting
    1df4:	10 92 23 02 	sts	0x0223, r1
				stopFlag = 1;	
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	80 93 f5 01 	sts	0x01F5, r24
    1dfe:	08 95       	ret
			}
			
			break;
		case (STATE_CMD_RECEIVED):	//command as been received, retrieve speed
		{
			requestedCommand.speed = data;
    1e00:	80 91 22 02 	lds	r24, 0x0222
    1e04:	80 93 f2 01 	sts	0x01F2, r24
			ReceiverState = STATE_SPEED_RECEIVED;
    1e08:	82 e0       	ldi	r24, 0x02	; 2
    1e0a:	80 93 23 02 	sts	0x0223, r24
    1e0e:	08 95       	ret
			break;
		}
		case (STATE_SPEED_RECEIVED):	//speed as been received, retrieve angle
		{
			requestedCommand.angle = data;
    1e10:	80 91 22 02 	lds	r24, 0x0222
    1e14:	80 93 f3 01 	sts	0x01F3, r24
			ReceiverState = STATE_ANGLE_RECEIVED;
    1e18:	83 e0       	ldi	r24, 0x03	; 3
    1e1a:	80 93 23 02 	sts	0x0223, r24
			motorCommandCompletedFlag = 1;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	80 93 25 02 	sts	0x0225, r24
			uartLedFlag = 1;
    1e24:	80 93 2e 02 	sts	0x022E, r24
    1e28:	08 95       	ret

00001e2a <__vector_13>:
//		 not in debug mode.
//
///////////////////////////////////////////
ISR(USART_RXC_vect)     //RX ready 
// signal handler for receive complete interrupt
{
    1e2a:	1f 92       	push	r1
    1e2c:	0f 92       	push	r0
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	0f 92       	push	r0
    1e32:	11 24       	eor	r1, r1
    1e34:	2f 93       	push	r18
    1e36:	3f 93       	push	r19
    1e38:	4f 93       	push	r20
    1e3a:	5f 93       	push	r21
    1e3c:	6f 93       	push	r22
    1e3e:	7f 93       	push	r23
    1e40:	8f 93       	push	r24
    1e42:	9f 93       	push	r25
    1e44:	af 93       	push	r26
    1e46:	bf 93       	push	r27
    1e48:	ef 93       	push	r30
    1e4a:	ff 93       	push	r31
	data = UDR;        // read byte for UART data buffer
    1e4c:	8c b1       	in	r24, 0x0c	; 12
    1e4e:	80 93 22 02 	sts	0x0222, r24
	
	processData();
    1e52:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <processData>
	if ((echo_on_flag == 1))
    1e56:	80 91 2f 02 	lds	r24, 0x022F
    1e5a:	81 30       	cpi	r24, 0x01	; 1
    1e5c:	39 f4       	brne	.+14     	; 0x1e6c <__vector_13+0x42>
	{
		while(!uartTxReady){}
    1e5e:	80 91 26 02 	lds	r24, 0x0226
    1e62:	88 23       	and	r24, r24
    1e64:	e1 f3       	breq	.-8      	; 0x1e5e <__vector_13+0x34>
		UDR = data;
    1e66:	80 91 22 02 	lds	r24, 0x0222
    1e6a:	8c b9       	out	0x0c, r24	; 12
	}

	uartReadyFlag = 1;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	80 93 39 02 	sts	0x0239, r24
}
    1e72:	ff 91       	pop	r31
    1e74:	ef 91       	pop	r30
    1e76:	bf 91       	pop	r27
    1e78:	af 91       	pop	r26
    1e7a:	9f 91       	pop	r25
    1e7c:	8f 91       	pop	r24
    1e7e:	7f 91       	pop	r23
    1e80:	6f 91       	pop	r22
    1e82:	5f 91       	pop	r21
    1e84:	4f 91       	pop	r20
    1e86:	3f 91       	pop	r19
    1e88:	2f 91       	pop	r18
    1e8a:	0f 90       	pop	r0
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	0f 90       	pop	r0
    1e90:	1f 90       	pop	r1
    1e92:	18 95       	reti

00001e94 <uart_send>:
//
//Return value:	-none
//
///////////////////////////////////////////
void uart_send(char *buf, unsigned char size)
{  
    1e94:	48 2f       	mov	r20, r24
	echo_on_flag = 0;				//Debug mode, stop echo on incomming data
    1e96:	10 92 2f 02 	sts	0x022F, r1
//Return value:	-none
//
///////////////////////////////////////////
void transmitByte(unsigned char dataToSend)
{
	while(!uartTxReady){}	//wait transmitter is ready	
    1e9a:	80 91 26 02 	lds	r24, 0x0226
    1e9e:	88 23       	and	r24, r24
    1ea0:	e1 f3       	breq	.-8      	; 0x1e9a <uart_send+0x6>
	uartTxReady = 0;		//reset tx ready flag
    1ea2:	10 92 26 02 	sts	0x0226, r1
	UDR = dataToSend;		//send data
    1ea6:	8e ef       	ldi	r24, 0xFE	; 254
    1ea8:	8c b9       	out	0x0c, r24	; 12
    1eaa:	24 2f       	mov	r18, r20
    1eac:	39 2f       	mov	r19, r25
    1eae:	c9 01       	movw	r24, r18
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	0a c0       	rjmp	.+20     	; 0x1eca <uart_send+0x36>
{  
	echo_on_flag = 0;				//Debug mode, stop echo on incomming data
	transmitByte(0xFE);				//Start debug string signal
	for (unsigned char i = 0; i<size; i++)	//Send all bytes
	{
		transmitByte(buf[i]);
    1eb6:	20 81       	ld	r18, Z
//Return value:	-none
//
///////////////////////////////////////////
void transmitByte(unsigned char dataToSend)
{
	while(!uartTxReady){}	//wait transmitter is ready	
    1eb8:	80 91 26 02 	lds	r24, 0x0226
    1ebc:	88 23       	and	r24, r24
    1ebe:	e1 f3       	breq	.-8      	; 0x1eb8 <uart_send+0x24>
	uartTxReady = 0;		//reset tx ready flag
    1ec0:	10 92 26 02 	sts	0x0226, r1
	UDR = dataToSend;		//send data
    1ec4:	2c b9       	out	0x0c, r18	; 12
///////////////////////////////////////////
void uart_send(char *buf, unsigned char size)
{  
	echo_on_flag = 0;				//Debug mode, stop echo on incomming data
	transmitByte(0xFE);				//Start debug string signal
	for (unsigned char i = 0; i<size; i++)	//Send all bytes
    1ec6:	9f 5f       	subi	r25, 0xFF	; 255
    1ec8:	31 96       	adiw	r30, 0x01	; 1
    1eca:	96 17       	cp	r25, r22
    1ecc:	a0 f3       	brcs	.-24     	; 0x1eb6 <uart_send+0x22>
//Return value:	-none
//
///////////////////////////////////////////
void transmitByte(unsigned char dataToSend)
{
	while(!uartTxReady){}	//wait transmitter is ready	
    1ece:	80 91 26 02 	lds	r24, 0x0226
    1ed2:	88 23       	and	r24, r24
    1ed4:	e1 f3       	breq	.-8      	; 0x1ece <uart_send+0x3a>
	uartTxReady = 0;		//reset tx ready flag
    1ed6:	10 92 26 02 	sts	0x0226, r1
	UDR = dataToSend;		//send data
    1eda:	8f ef       	ldi	r24, 0xFF	; 255
    1edc:	8c b9       	out	0x0c, r24	; 12
	{
		transmitByte(buf[i]);
	}
	transmitByte(0xFF);			//End of debug string signal

	echo_on_flag = 1;	//Remove if bug persist
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	80 93 2f 02 	sts	0x022F, r24
}
    1ee4:	08 95       	ret

00001ee6 <transmitByte>:
//
//Return value:	-none
//
///////////////////////////////////////////
void transmitByte(unsigned char dataToSend)
{
    1ee6:	98 2f       	mov	r25, r24
	while(!uartTxReady){}	//wait transmitter is ready	
    1ee8:	80 91 26 02 	lds	r24, 0x0226
    1eec:	88 23       	and	r24, r24
    1eee:	e1 f3       	breq	.-8      	; 0x1ee8 <transmitByte+0x2>
	uartTxReady = 0;		//reset tx ready flag
    1ef0:	10 92 26 02 	sts	0x0226, r1
	UDR = dataToSend;		//send data
    1ef4:	9c b9       	out	0x0c, r25	; 12
}
    1ef6:	08 95       	ret

00001ef8 <uartReceive>:
//
///////////////////////////////////////////
void uartReceive(void)
{
	//wait for new command from controler
	if (motorCommandCompletedFlag == 1)	//if new command fully received
    1ef8:	80 91 25 02 	lds	r24, 0x0225
    1efc:	81 30       	cpi	r24, 0x01	; 1
    1efe:	09 f0       	breq	.+2      	; 0x1f02 <uartReceive+0xa>
    1f00:	4a c0       	rjmp	.+148    	; 0x1f96 <uartReceive+0x9e>
	{		
		wdt_reset();	//reset watchdog	//reset watchdog --> Robot still in control
    1f02:	a8 95       	wdr
		
		if (actualCommand.speed != requestedCommand.speed)	//if speed is different
    1f04:	90 91 f0 01 	lds	r25, 0x01F0
    1f08:	80 91 f2 01 	lds	r24, 0x01F2
    1f0c:	98 17       	cp	r25, r24
    1f0e:	f9 f0       	breq	.+62     	; 0x1f4e <uartReceive+0x56>
		{													//compute new speed
			actualCommand.speed = requestedCommand.speed;
    1f10:	80 91 f2 01 	lds	r24, 0x01F2
    1f14:	80 93 f0 01 	sts	0x01F0, r24
			computedCommand.speed = (((float)(actualCommand.speed) - 100.0) / 100.0); 
    1f18:	60 91 f0 01 	lds	r22, 0x01F0
    1f1c:	70 e0       	ldi	r23, 0x00	; 0
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	0e 94 a9 14 	call	0x2952	; 0x2952 <__floatunsisf>
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	48 ec       	ldi	r20, 0xC8	; 200
    1f2c:	52 e4       	ldi	r21, 0x42	; 66
    1f2e:	0e 94 33 11 	call	0x2266	; 0x2266 <__subsf3>
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	48 ec       	ldi	r20, 0xC8	; 200
    1f38:	52 e4       	ldi	r21, 0x42	; 66
    1f3a:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1f3e:	60 93 8c 01 	sts	0x018C, r22
    1f42:	70 93 8d 01 	sts	0x018D, r23
    1f46:	80 93 8e 01 	sts	0x018E, r24
    1f4a:	90 93 8f 01 	sts	0x018F, r25
		}

		if (actualCommand.angle != requestedCommand.angle)	//same with angle
    1f4e:	90 91 f1 01 	lds	r25, 0x01F1
    1f52:	80 91 f3 01 	lds	r24, 0x01F3
    1f56:	98 17       	cp	r25, r24
    1f58:	d9 f0       	breq	.+54     	; 0x1f90 <uartReceive+0x98>
		{
			actualCommand.angle = requestedCommand.angle;
    1f5a:	80 91 f3 01 	lds	r24, 0x01F3
    1f5e:	80 93 f1 01 	sts	0x01F1, r24
			computedCommand.angle = ((actualCommand.angle)*ANGLE_RATIO);
    1f62:	60 91 f1 01 	lds	r22, 0x01F1
    1f66:	70 e0       	ldi	r23, 0x00	; 0
    1f68:	88 27       	eor	r24, r24
    1f6a:	77 fd       	sbrc	r23, 7
    1f6c:	80 95       	com	r24
    1f6e:	98 2f       	mov	r25, r24
    1f70:	0e 94 f7 13 	call	0x27ee	; 0x27ee <__floatsisf>
    1f74:	26 e3       	ldi	r18, 0x36	; 54
    1f76:	3a ef       	ldi	r19, 0xFA	; 250
    1f78:	4e e0       	ldi	r20, 0x0E	; 14
    1f7a:	5d e3       	ldi	r21, 0x3D	; 61
    1f7c:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3>
    1f80:	60 93 88 01 	sts	0x0188, r22
    1f84:	70 93 89 01 	sts	0x0189, r23
    1f88:	80 93 8a 01 	sts	0x018A, r24
    1f8c:	90 93 8b 01 	sts	0x018B, r25
		}			

		motorCommandCompletedFlag = 0;
    1f90:	10 92 25 02 	sts	0x0225, r1
    1f94:	08 95       	ret
	}
	else if (stopFlag)
    1f96:	80 91 f5 01 	lds	r24, 0x01F5
    1f9a:	88 23       	and	r24, r24
    1f9c:	b9 f0       	breq	.+46     	; 0x1fcc <uartReceive+0xd4>
	{
		wdt_reset(); //reset watchdog --> Robot still listenning
    1f9e:	a8 95       	wdr
		
		actualCommand.speed = 100;	//Emergency stop
    1fa0:	84 e6       	ldi	r24, 0x64	; 100
    1fa2:	80 93 f0 01 	sts	0x01F0, r24
		actualCommand.angle = 0;	
    1fa6:	10 92 f1 01 	sts	0x01F1, r1
		requestedCommand.speed = 100;
    1faa:	80 93 f2 01 	sts	0x01F2, r24
		//requestedCommand.angle = 0;	
		computedCommand.speed = 0;
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a0 e0       	ldi	r26, 0x00	; 0
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	80 93 8c 01 	sts	0x018C, r24
    1fba:	90 93 8d 01 	sts	0x018D, r25
    1fbe:	a0 93 8e 01 	sts	0x018E, r26
    1fc2:	b0 93 8f 01 	sts	0x018F, r27
		//computedCommand.angle = 0;
		stopFlag = 2;				//signal for receiver state machine
    1fc6:	82 e0       	ldi	r24, 0x02	; 2
    1fc8:	80 93 f5 01 	sts	0x01F5, r24
    1fcc:	08 95       	ret

00001fce <_fpadd_parts>:
    1fce:	a0 e0       	ldi	r26, 0x00	; 0
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	ed ee       	ldi	r30, 0xED	; 237
    1fd4:	ff e0       	ldi	r31, 0x0F	; 15
    1fd6:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__prologue_saves__>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	2b 01       	movw	r4, r22
    1fde:	fa 01       	movw	r30, r20
    1fe0:	9c 91       	ld	r25, X
    1fe2:	92 30       	cpi	r25, 0x02	; 2
    1fe4:	08 f4       	brcc	.+2      	; 0x1fe8 <_fpadd_parts+0x1a>
    1fe6:	39 c1       	rjmp	.+626    	; 0x225a <_fpadd_parts+0x28c>
    1fe8:	eb 01       	movw	r28, r22
    1fea:	88 81       	ld	r24, Y
    1fec:	82 30       	cpi	r24, 0x02	; 2
    1fee:	08 f4       	brcc	.+2      	; 0x1ff2 <_fpadd_parts+0x24>
    1ff0:	33 c1       	rjmp	.+614    	; 0x2258 <_fpadd_parts+0x28a>
    1ff2:	94 30       	cpi	r25, 0x04	; 4
    1ff4:	69 f4       	brne	.+26     	; 0x2010 <_fpadd_parts+0x42>
    1ff6:	84 30       	cpi	r24, 0x04	; 4
    1ff8:	09 f0       	breq	.+2      	; 0x1ffc <_fpadd_parts+0x2e>
    1ffa:	2f c1       	rjmp	.+606    	; 0x225a <_fpadd_parts+0x28c>
    1ffc:	11 96       	adiw	r26, 0x01	; 1
    1ffe:	9c 91       	ld	r25, X
    2000:	11 97       	sbiw	r26, 0x01	; 1
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	98 17       	cp	r25, r24
    2006:	09 f4       	brne	.+2      	; 0x200a <_fpadd_parts+0x3c>
    2008:	28 c1       	rjmp	.+592    	; 0x225a <_fpadd_parts+0x28c>
    200a:	a0 e6       	ldi	r26, 0x60	; 96
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	25 c1       	rjmp	.+586    	; 0x225a <_fpadd_parts+0x28c>
    2010:	84 30       	cpi	r24, 0x04	; 4
    2012:	09 f4       	brne	.+2      	; 0x2016 <_fpadd_parts+0x48>
    2014:	21 c1       	rjmp	.+578    	; 0x2258 <_fpadd_parts+0x28a>
    2016:	82 30       	cpi	r24, 0x02	; 2
    2018:	a9 f4       	brne	.+42     	; 0x2044 <_fpadd_parts+0x76>
    201a:	92 30       	cpi	r25, 0x02	; 2
    201c:	09 f0       	breq	.+2      	; 0x2020 <_fpadd_parts+0x52>
    201e:	1d c1       	rjmp	.+570    	; 0x225a <_fpadd_parts+0x28c>
    2020:	9a 01       	movw	r18, r20
    2022:	ad 01       	movw	r20, r26
    2024:	88 e0       	ldi	r24, 0x08	; 8
    2026:	ea 01       	movw	r28, r20
    2028:	09 90       	ld	r0, Y+
    202a:	ae 01       	movw	r20, r28
    202c:	e9 01       	movw	r28, r18
    202e:	09 92       	st	Y+, r0
    2030:	9e 01       	movw	r18, r28
    2032:	81 50       	subi	r24, 0x01	; 1
    2034:	c1 f7       	brne	.-16     	; 0x2026 <_fpadd_parts+0x58>
    2036:	e2 01       	movw	r28, r4
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	11 96       	adiw	r26, 0x01	; 1
    203c:	9c 91       	ld	r25, X
    203e:	89 23       	and	r24, r25
    2040:	81 83       	std	Z+1, r24	; 0x01
    2042:	08 c1       	rjmp	.+528    	; 0x2254 <_fpadd_parts+0x286>
    2044:	92 30       	cpi	r25, 0x02	; 2
    2046:	09 f4       	brne	.+2      	; 0x204a <_fpadd_parts+0x7c>
    2048:	07 c1       	rjmp	.+526    	; 0x2258 <_fpadd_parts+0x28a>
    204a:	12 96       	adiw	r26, 0x02	; 2
    204c:	2d 90       	ld	r2, X+
    204e:	3c 90       	ld	r3, X
    2050:	13 97       	sbiw	r26, 0x03	; 3
    2052:	eb 01       	movw	r28, r22
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	9b 81       	ldd	r25, Y+3	; 0x03
    2058:	14 96       	adiw	r26, 0x04	; 4
    205a:	ad 90       	ld	r10, X+
    205c:	bd 90       	ld	r11, X+
    205e:	cd 90       	ld	r12, X+
    2060:	dc 90       	ld	r13, X
    2062:	17 97       	sbiw	r26, 0x07	; 7
    2064:	ec 80       	ldd	r14, Y+4	; 0x04
    2066:	fd 80       	ldd	r15, Y+5	; 0x05
    2068:	0e 81       	ldd	r16, Y+6	; 0x06
    206a:	1f 81       	ldd	r17, Y+7	; 0x07
    206c:	91 01       	movw	r18, r2
    206e:	28 1b       	sub	r18, r24
    2070:	39 0b       	sbc	r19, r25
    2072:	b9 01       	movw	r22, r18
    2074:	37 ff       	sbrs	r19, 7
    2076:	04 c0       	rjmp	.+8      	; 0x2080 <_fpadd_parts+0xb2>
    2078:	66 27       	eor	r22, r22
    207a:	77 27       	eor	r23, r23
    207c:	62 1b       	sub	r22, r18
    207e:	73 0b       	sbc	r23, r19
    2080:	60 32       	cpi	r22, 0x20	; 32
    2082:	71 05       	cpc	r23, r1
    2084:	0c f0       	brlt	.+2      	; 0x2088 <_fpadd_parts+0xba>
    2086:	61 c0       	rjmp	.+194    	; 0x214a <_fpadd_parts+0x17c>
    2088:	12 16       	cp	r1, r18
    208a:	13 06       	cpc	r1, r19
    208c:	6c f5       	brge	.+90     	; 0x20e8 <_fpadd_parts+0x11a>
    208e:	37 01       	movw	r6, r14
    2090:	48 01       	movw	r8, r16
    2092:	06 2e       	mov	r0, r22
    2094:	04 c0       	rjmp	.+8      	; 0x209e <_fpadd_parts+0xd0>
    2096:	96 94       	lsr	r9
    2098:	87 94       	ror	r8
    209a:	77 94       	ror	r7
    209c:	67 94       	ror	r6
    209e:	0a 94       	dec	r0
    20a0:	d2 f7       	brpl	.-12     	; 0x2096 <_fpadd_parts+0xc8>
    20a2:	21 e0       	ldi	r18, 0x01	; 1
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e0       	ldi	r20, 0x00	; 0
    20a8:	50 e0       	ldi	r21, 0x00	; 0
    20aa:	04 c0       	rjmp	.+8      	; 0x20b4 <_fpadd_parts+0xe6>
    20ac:	22 0f       	add	r18, r18
    20ae:	33 1f       	adc	r19, r19
    20b0:	44 1f       	adc	r20, r20
    20b2:	55 1f       	adc	r21, r21
    20b4:	6a 95       	dec	r22
    20b6:	d2 f7       	brpl	.-12     	; 0x20ac <_fpadd_parts+0xde>
    20b8:	21 50       	subi	r18, 0x01	; 1
    20ba:	30 40       	sbci	r19, 0x00	; 0
    20bc:	40 40       	sbci	r20, 0x00	; 0
    20be:	50 40       	sbci	r21, 0x00	; 0
    20c0:	2e 21       	and	r18, r14
    20c2:	3f 21       	and	r19, r15
    20c4:	40 23       	and	r20, r16
    20c6:	51 23       	and	r21, r17
    20c8:	21 15       	cp	r18, r1
    20ca:	31 05       	cpc	r19, r1
    20cc:	41 05       	cpc	r20, r1
    20ce:	51 05       	cpc	r21, r1
    20d0:	21 f0       	breq	.+8      	; 0x20da <_fpadd_parts+0x10c>
    20d2:	21 e0       	ldi	r18, 0x01	; 1
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e0       	ldi	r20, 0x00	; 0
    20d8:	50 e0       	ldi	r21, 0x00	; 0
    20da:	79 01       	movw	r14, r18
    20dc:	8a 01       	movw	r16, r20
    20de:	e6 28       	or	r14, r6
    20e0:	f7 28       	or	r15, r7
    20e2:	08 29       	or	r16, r8
    20e4:	19 29       	or	r17, r9
    20e6:	3c c0       	rjmp	.+120    	; 0x2160 <_fpadd_parts+0x192>
    20e8:	23 2b       	or	r18, r19
    20ea:	d1 f1       	breq	.+116    	; 0x2160 <_fpadd_parts+0x192>
    20ec:	26 0e       	add	r2, r22
    20ee:	37 1e       	adc	r3, r23
    20f0:	35 01       	movw	r6, r10
    20f2:	46 01       	movw	r8, r12
    20f4:	06 2e       	mov	r0, r22
    20f6:	04 c0       	rjmp	.+8      	; 0x2100 <_fpadd_parts+0x132>
    20f8:	96 94       	lsr	r9
    20fa:	87 94       	ror	r8
    20fc:	77 94       	ror	r7
    20fe:	67 94       	ror	r6
    2100:	0a 94       	dec	r0
    2102:	d2 f7       	brpl	.-12     	; 0x20f8 <_fpadd_parts+0x12a>
    2104:	21 e0       	ldi	r18, 0x01	; 1
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	50 e0       	ldi	r21, 0x00	; 0
    210c:	04 c0       	rjmp	.+8      	; 0x2116 <_fpadd_parts+0x148>
    210e:	22 0f       	add	r18, r18
    2110:	33 1f       	adc	r19, r19
    2112:	44 1f       	adc	r20, r20
    2114:	55 1f       	adc	r21, r21
    2116:	6a 95       	dec	r22
    2118:	d2 f7       	brpl	.-12     	; 0x210e <_fpadd_parts+0x140>
    211a:	21 50       	subi	r18, 0x01	; 1
    211c:	30 40       	sbci	r19, 0x00	; 0
    211e:	40 40       	sbci	r20, 0x00	; 0
    2120:	50 40       	sbci	r21, 0x00	; 0
    2122:	2a 21       	and	r18, r10
    2124:	3b 21       	and	r19, r11
    2126:	4c 21       	and	r20, r12
    2128:	5d 21       	and	r21, r13
    212a:	21 15       	cp	r18, r1
    212c:	31 05       	cpc	r19, r1
    212e:	41 05       	cpc	r20, r1
    2130:	51 05       	cpc	r21, r1
    2132:	21 f0       	breq	.+8      	; 0x213c <_fpadd_parts+0x16e>
    2134:	21 e0       	ldi	r18, 0x01	; 1
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e0       	ldi	r20, 0x00	; 0
    213a:	50 e0       	ldi	r21, 0x00	; 0
    213c:	59 01       	movw	r10, r18
    213e:	6a 01       	movw	r12, r20
    2140:	a6 28       	or	r10, r6
    2142:	b7 28       	or	r11, r7
    2144:	c8 28       	or	r12, r8
    2146:	d9 28       	or	r13, r9
    2148:	0b c0       	rjmp	.+22     	; 0x2160 <_fpadd_parts+0x192>
    214a:	82 15       	cp	r24, r2
    214c:	93 05       	cpc	r25, r3
    214e:	2c f0       	brlt	.+10     	; 0x215a <_fpadd_parts+0x18c>
    2150:	1c 01       	movw	r2, r24
    2152:	aa 24       	eor	r10, r10
    2154:	bb 24       	eor	r11, r11
    2156:	65 01       	movw	r12, r10
    2158:	03 c0       	rjmp	.+6      	; 0x2160 <_fpadd_parts+0x192>
    215a:	ee 24       	eor	r14, r14
    215c:	ff 24       	eor	r15, r15
    215e:	87 01       	movw	r16, r14
    2160:	11 96       	adiw	r26, 0x01	; 1
    2162:	9c 91       	ld	r25, X
    2164:	d2 01       	movw	r26, r4
    2166:	11 96       	adiw	r26, 0x01	; 1
    2168:	8c 91       	ld	r24, X
    216a:	98 17       	cp	r25, r24
    216c:	09 f4       	brne	.+2      	; 0x2170 <_fpadd_parts+0x1a2>
    216e:	45 c0       	rjmp	.+138    	; 0x21fa <_fpadd_parts+0x22c>
    2170:	99 23       	and	r25, r25
    2172:	39 f0       	breq	.+14     	; 0x2182 <_fpadd_parts+0x1b4>
    2174:	a8 01       	movw	r20, r16
    2176:	97 01       	movw	r18, r14
    2178:	2a 19       	sub	r18, r10
    217a:	3b 09       	sbc	r19, r11
    217c:	4c 09       	sbc	r20, r12
    217e:	5d 09       	sbc	r21, r13
    2180:	06 c0       	rjmp	.+12     	; 0x218e <_fpadd_parts+0x1c0>
    2182:	a6 01       	movw	r20, r12
    2184:	95 01       	movw	r18, r10
    2186:	2e 19       	sub	r18, r14
    2188:	3f 09       	sbc	r19, r15
    218a:	40 0b       	sbc	r20, r16
    218c:	51 0b       	sbc	r21, r17
    218e:	57 fd       	sbrc	r21, 7
    2190:	08 c0       	rjmp	.+16     	; 0x21a2 <_fpadd_parts+0x1d4>
    2192:	11 82       	std	Z+1, r1	; 0x01
    2194:	33 82       	std	Z+3, r3	; 0x03
    2196:	22 82       	std	Z+2, r2	; 0x02
    2198:	24 83       	std	Z+4, r18	; 0x04
    219a:	35 83       	std	Z+5, r19	; 0x05
    219c:	46 83       	std	Z+6, r20	; 0x06
    219e:	57 83       	std	Z+7, r21	; 0x07
    21a0:	1d c0       	rjmp	.+58     	; 0x21dc <_fpadd_parts+0x20e>
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	81 83       	std	Z+1, r24	; 0x01
    21a6:	33 82       	std	Z+3, r3	; 0x03
    21a8:	22 82       	std	Z+2, r2	; 0x02
    21aa:	88 27       	eor	r24, r24
    21ac:	99 27       	eor	r25, r25
    21ae:	dc 01       	movw	r26, r24
    21b0:	82 1b       	sub	r24, r18
    21b2:	93 0b       	sbc	r25, r19
    21b4:	a4 0b       	sbc	r26, r20
    21b6:	b5 0b       	sbc	r27, r21
    21b8:	84 83       	std	Z+4, r24	; 0x04
    21ba:	95 83       	std	Z+5, r25	; 0x05
    21bc:	a6 83       	std	Z+6, r26	; 0x06
    21be:	b7 83       	std	Z+7, r27	; 0x07
    21c0:	0d c0       	rjmp	.+26     	; 0x21dc <_fpadd_parts+0x20e>
    21c2:	22 0f       	add	r18, r18
    21c4:	33 1f       	adc	r19, r19
    21c6:	44 1f       	adc	r20, r20
    21c8:	55 1f       	adc	r21, r21
    21ca:	24 83       	std	Z+4, r18	; 0x04
    21cc:	35 83       	std	Z+5, r19	; 0x05
    21ce:	46 83       	std	Z+6, r20	; 0x06
    21d0:	57 83       	std	Z+7, r21	; 0x07
    21d2:	82 81       	ldd	r24, Z+2	; 0x02
    21d4:	93 81       	ldd	r25, Z+3	; 0x03
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	93 83       	std	Z+3, r25	; 0x03
    21da:	82 83       	std	Z+2, r24	; 0x02
    21dc:	24 81       	ldd	r18, Z+4	; 0x04
    21de:	35 81       	ldd	r19, Z+5	; 0x05
    21e0:	46 81       	ldd	r20, Z+6	; 0x06
    21e2:	57 81       	ldd	r21, Z+7	; 0x07
    21e4:	da 01       	movw	r26, r20
    21e6:	c9 01       	movw	r24, r18
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	a1 09       	sbc	r26, r1
    21ec:	b1 09       	sbc	r27, r1
    21ee:	8f 5f       	subi	r24, 0xFF	; 255
    21f0:	9f 4f       	sbci	r25, 0xFF	; 255
    21f2:	af 4f       	sbci	r26, 0xFF	; 255
    21f4:	bf 43       	sbci	r27, 0x3F	; 63
    21f6:	28 f3       	brcs	.-54     	; 0x21c2 <_fpadd_parts+0x1f4>
    21f8:	0b c0       	rjmp	.+22     	; 0x2210 <_fpadd_parts+0x242>
    21fa:	91 83       	std	Z+1, r25	; 0x01
    21fc:	33 82       	std	Z+3, r3	; 0x03
    21fe:	22 82       	std	Z+2, r2	; 0x02
    2200:	ea 0c       	add	r14, r10
    2202:	fb 1c       	adc	r15, r11
    2204:	0c 1d       	adc	r16, r12
    2206:	1d 1d       	adc	r17, r13
    2208:	e4 82       	std	Z+4, r14	; 0x04
    220a:	f5 82       	std	Z+5, r15	; 0x05
    220c:	06 83       	std	Z+6, r16	; 0x06
    220e:	17 83       	std	Z+7, r17	; 0x07
    2210:	83 e0       	ldi	r24, 0x03	; 3
    2212:	80 83       	st	Z, r24
    2214:	24 81       	ldd	r18, Z+4	; 0x04
    2216:	35 81       	ldd	r19, Z+5	; 0x05
    2218:	46 81       	ldd	r20, Z+6	; 0x06
    221a:	57 81       	ldd	r21, Z+7	; 0x07
    221c:	57 ff       	sbrs	r21, 7
    221e:	1a c0       	rjmp	.+52     	; 0x2254 <_fpadd_parts+0x286>
    2220:	c9 01       	movw	r24, r18
    2222:	aa 27       	eor	r26, r26
    2224:	97 fd       	sbrc	r25, 7
    2226:	a0 95       	com	r26
    2228:	ba 2f       	mov	r27, r26
    222a:	81 70       	andi	r24, 0x01	; 1
    222c:	90 70       	andi	r25, 0x00	; 0
    222e:	a0 70       	andi	r26, 0x00	; 0
    2230:	b0 70       	andi	r27, 0x00	; 0
    2232:	56 95       	lsr	r21
    2234:	47 95       	ror	r20
    2236:	37 95       	ror	r19
    2238:	27 95       	ror	r18
    223a:	82 2b       	or	r24, r18
    223c:	93 2b       	or	r25, r19
    223e:	a4 2b       	or	r26, r20
    2240:	b5 2b       	or	r27, r21
    2242:	84 83       	std	Z+4, r24	; 0x04
    2244:	95 83       	std	Z+5, r25	; 0x05
    2246:	a6 83       	std	Z+6, r26	; 0x06
    2248:	b7 83       	std	Z+7, r27	; 0x07
    224a:	82 81       	ldd	r24, Z+2	; 0x02
    224c:	93 81       	ldd	r25, Z+3	; 0x03
    224e:	01 96       	adiw	r24, 0x01	; 1
    2250:	93 83       	std	Z+3, r25	; 0x03
    2252:	82 83       	std	Z+2, r24	; 0x02
    2254:	df 01       	movw	r26, r30
    2256:	01 c0       	rjmp	.+2      	; 0x225a <_fpadd_parts+0x28c>
    2258:	d2 01       	movw	r26, r4
    225a:	cd 01       	movw	r24, r26
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	e2 e1       	ldi	r30, 0x12	; 18
    2262:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__epilogue_restores__>

00002266 <__subsf3>:
    2266:	a0 e2       	ldi	r26, 0x20	; 32
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e9 e3       	ldi	r30, 0x39	; 57
    226c:	f1 e1       	ldi	r31, 0x11	; 17
    226e:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <__prologue_saves__+0x18>
    2272:	69 83       	std	Y+1, r22	; 0x01
    2274:	7a 83       	std	Y+2, r23	; 0x02
    2276:	8b 83       	std	Y+3, r24	; 0x03
    2278:	9c 83       	std	Y+4, r25	; 0x04
    227a:	2d 83       	std	Y+5, r18	; 0x05
    227c:	3e 83       	std	Y+6, r19	; 0x06
    227e:	4f 83       	std	Y+7, r20	; 0x07
    2280:	58 87       	std	Y+8, r21	; 0x08
    2282:	e9 e0       	ldi	r30, 0x09	; 9
    2284:	ee 2e       	mov	r14, r30
    2286:	f1 2c       	mov	r15, r1
    2288:	ec 0e       	add	r14, r28
    228a:	fd 1e       	adc	r15, r29
    228c:	ce 01       	movw	r24, r28
    228e:	01 96       	adiw	r24, 0x01	; 1
    2290:	b7 01       	movw	r22, r14
    2292:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__unpack_f>
    2296:	8e 01       	movw	r16, r28
    2298:	0f 5e       	subi	r16, 0xEF	; 239
    229a:	1f 4f       	sbci	r17, 0xFF	; 255
    229c:	ce 01       	movw	r24, r28
    229e:	05 96       	adiw	r24, 0x05	; 5
    22a0:	b8 01       	movw	r22, r16
    22a2:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__unpack_f>
    22a6:	8a 89       	ldd	r24, Y+18	; 0x12
    22a8:	91 e0       	ldi	r25, 0x01	; 1
    22aa:	89 27       	eor	r24, r25
    22ac:	8a 8b       	std	Y+18, r24	; 0x12
    22ae:	c7 01       	movw	r24, r14
    22b0:	b8 01       	movw	r22, r16
    22b2:	ae 01       	movw	r20, r28
    22b4:	47 5e       	subi	r20, 0xE7	; 231
    22b6:	5f 4f       	sbci	r21, 0xFF	; 255
    22b8:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <_fpadd_parts>
    22bc:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__pack_f>
    22c0:	a0 96       	adiw	r28, 0x20	; 32
    22c2:	e6 e0       	ldi	r30, 0x06	; 6
    22c4:	0c 94 53 17 	jmp	0x2ea6	; 0x2ea6 <__epilogue_restores__+0x18>

000022c8 <__addsf3>:
    22c8:	a0 e2       	ldi	r26, 0x20	; 32
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	ea e6       	ldi	r30, 0x6A	; 106
    22ce:	f1 e1       	ldi	r31, 0x11	; 17
    22d0:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <__prologue_saves__+0x18>
    22d4:	69 83       	std	Y+1, r22	; 0x01
    22d6:	7a 83       	std	Y+2, r23	; 0x02
    22d8:	8b 83       	std	Y+3, r24	; 0x03
    22da:	9c 83       	std	Y+4, r25	; 0x04
    22dc:	2d 83       	std	Y+5, r18	; 0x05
    22de:	3e 83       	std	Y+6, r19	; 0x06
    22e0:	4f 83       	std	Y+7, r20	; 0x07
    22e2:	58 87       	std	Y+8, r21	; 0x08
    22e4:	f9 e0       	ldi	r31, 0x09	; 9
    22e6:	ef 2e       	mov	r14, r31
    22e8:	f1 2c       	mov	r15, r1
    22ea:	ec 0e       	add	r14, r28
    22ec:	fd 1e       	adc	r15, r29
    22ee:	ce 01       	movw	r24, r28
    22f0:	01 96       	adiw	r24, 0x01	; 1
    22f2:	b7 01       	movw	r22, r14
    22f4:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__unpack_f>
    22f8:	8e 01       	movw	r16, r28
    22fa:	0f 5e       	subi	r16, 0xEF	; 239
    22fc:	1f 4f       	sbci	r17, 0xFF	; 255
    22fe:	ce 01       	movw	r24, r28
    2300:	05 96       	adiw	r24, 0x05	; 5
    2302:	b8 01       	movw	r22, r16
    2304:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__unpack_f>
    2308:	c7 01       	movw	r24, r14
    230a:	b8 01       	movw	r22, r16
    230c:	ae 01       	movw	r20, r28
    230e:	47 5e       	subi	r20, 0xE7	; 231
    2310:	5f 4f       	sbci	r21, 0xFF	; 255
    2312:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <_fpadd_parts>
    2316:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__pack_f>
    231a:	a0 96       	adiw	r28, 0x20	; 32
    231c:	e6 e0       	ldi	r30, 0x06	; 6
    231e:	0c 94 53 17 	jmp	0x2ea6	; 0x2ea6 <__epilogue_restores__+0x18>

00002322 <__mulsf3>:
    2322:	a0 e2       	ldi	r26, 0x20	; 32
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e7 e9       	ldi	r30, 0x97	; 151
    2328:	f1 e1       	ldi	r31, 0x11	; 17
    232a:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__prologue_saves__>
    232e:	69 83       	std	Y+1, r22	; 0x01
    2330:	7a 83       	std	Y+2, r23	; 0x02
    2332:	8b 83       	std	Y+3, r24	; 0x03
    2334:	9c 83       	std	Y+4, r25	; 0x04
    2336:	2d 83       	std	Y+5, r18	; 0x05
    2338:	3e 83       	std	Y+6, r19	; 0x06
    233a:	4f 83       	std	Y+7, r20	; 0x07
    233c:	58 87       	std	Y+8, r21	; 0x08
    233e:	ce 01       	movw	r24, r28
    2340:	01 96       	adiw	r24, 0x01	; 1
    2342:	be 01       	movw	r22, r28
    2344:	67 5f       	subi	r22, 0xF7	; 247
    2346:	7f 4f       	sbci	r23, 0xFF	; 255
    2348:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__unpack_f>
    234c:	ce 01       	movw	r24, r28
    234e:	05 96       	adiw	r24, 0x05	; 5
    2350:	be 01       	movw	r22, r28
    2352:	6f 5e       	subi	r22, 0xEF	; 239
    2354:	7f 4f       	sbci	r23, 0xFF	; 255
    2356:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__unpack_f>
    235a:	99 85       	ldd	r25, Y+9	; 0x09
    235c:	92 30       	cpi	r25, 0x02	; 2
    235e:	88 f0       	brcs	.+34     	; 0x2382 <__mulsf3+0x60>
    2360:	89 89       	ldd	r24, Y+17	; 0x11
    2362:	82 30       	cpi	r24, 0x02	; 2
    2364:	c8 f0       	brcs	.+50     	; 0x2398 <__mulsf3+0x76>
    2366:	94 30       	cpi	r25, 0x04	; 4
    2368:	19 f4       	brne	.+6      	; 0x2370 <__mulsf3+0x4e>
    236a:	82 30       	cpi	r24, 0x02	; 2
    236c:	51 f4       	brne	.+20     	; 0x2382 <__mulsf3+0x60>
    236e:	04 c0       	rjmp	.+8      	; 0x2378 <__mulsf3+0x56>
    2370:	84 30       	cpi	r24, 0x04	; 4
    2372:	29 f4       	brne	.+10     	; 0x237e <__mulsf3+0x5c>
    2374:	92 30       	cpi	r25, 0x02	; 2
    2376:	81 f4       	brne	.+32     	; 0x2398 <__mulsf3+0x76>
    2378:	80 e6       	ldi	r24, 0x60	; 96
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	c6 c0       	rjmp	.+396    	; 0x250a <__mulsf3+0x1e8>
    237e:	92 30       	cpi	r25, 0x02	; 2
    2380:	49 f4       	brne	.+18     	; 0x2394 <__mulsf3+0x72>
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	8a 89       	ldd	r24, Y+18	; 0x12
    2388:	98 13       	cpse	r25, r24
    238a:	21 e0       	ldi	r18, 0x01	; 1
    238c:	2a 87       	std	Y+10, r18	; 0x0a
    238e:	ce 01       	movw	r24, r28
    2390:	09 96       	adiw	r24, 0x09	; 9
    2392:	bb c0       	rjmp	.+374    	; 0x250a <__mulsf3+0x1e8>
    2394:	82 30       	cpi	r24, 0x02	; 2
    2396:	49 f4       	brne	.+18     	; 0x23aa <__mulsf3+0x88>
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	9a 85       	ldd	r25, Y+10	; 0x0a
    239c:	8a 89       	ldd	r24, Y+18	; 0x12
    239e:	98 13       	cpse	r25, r24
    23a0:	21 e0       	ldi	r18, 0x01	; 1
    23a2:	2a 8b       	std	Y+18, r18	; 0x12
    23a4:	ce 01       	movw	r24, r28
    23a6:	41 96       	adiw	r24, 0x11	; 17
    23a8:	b0 c0       	rjmp	.+352    	; 0x250a <__mulsf3+0x1e8>
    23aa:	2d 84       	ldd	r2, Y+13	; 0x0d
    23ac:	3e 84       	ldd	r3, Y+14	; 0x0e
    23ae:	4f 84       	ldd	r4, Y+15	; 0x0f
    23b0:	58 88       	ldd	r5, Y+16	; 0x10
    23b2:	6d 88       	ldd	r6, Y+21	; 0x15
    23b4:	7e 88       	ldd	r7, Y+22	; 0x16
    23b6:	8f 88       	ldd	r8, Y+23	; 0x17
    23b8:	98 8c       	ldd	r9, Y+24	; 0x18
    23ba:	ee 24       	eor	r14, r14
    23bc:	ff 24       	eor	r15, r15
    23be:	87 01       	movw	r16, r14
    23c0:	aa 24       	eor	r10, r10
    23c2:	bb 24       	eor	r11, r11
    23c4:	65 01       	movw	r12, r10
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	50 e0       	ldi	r21, 0x00	; 0
    23ca:	60 e0       	ldi	r22, 0x00	; 0
    23cc:	70 e0       	ldi	r23, 0x00	; 0
    23ce:	e0 e0       	ldi	r30, 0x00	; 0
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	c1 01       	movw	r24, r2
    23d4:	81 70       	andi	r24, 0x01	; 1
    23d6:	90 70       	andi	r25, 0x00	; 0
    23d8:	89 2b       	or	r24, r25
    23da:	e9 f0       	breq	.+58     	; 0x2416 <__mulsf3+0xf4>
    23dc:	e6 0c       	add	r14, r6
    23de:	f7 1c       	adc	r15, r7
    23e0:	08 1d       	adc	r16, r8
    23e2:	19 1d       	adc	r17, r9
    23e4:	9a 01       	movw	r18, r20
    23e6:	ab 01       	movw	r20, r22
    23e8:	2a 0d       	add	r18, r10
    23ea:	3b 1d       	adc	r19, r11
    23ec:	4c 1d       	adc	r20, r12
    23ee:	5d 1d       	adc	r21, r13
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	a0 e0       	ldi	r26, 0x00	; 0
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e6 14       	cp	r14, r6
    23fa:	f7 04       	cpc	r15, r7
    23fc:	08 05       	cpc	r16, r8
    23fe:	19 05       	cpc	r17, r9
    2400:	20 f4       	brcc	.+8      	; 0x240a <__mulsf3+0xe8>
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	a0 e0       	ldi	r26, 0x00	; 0
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	ba 01       	movw	r22, r20
    240c:	a9 01       	movw	r20, r18
    240e:	48 0f       	add	r20, r24
    2410:	59 1f       	adc	r21, r25
    2412:	6a 1f       	adc	r22, r26
    2414:	7b 1f       	adc	r23, r27
    2416:	aa 0c       	add	r10, r10
    2418:	bb 1c       	adc	r11, r11
    241a:	cc 1c       	adc	r12, r12
    241c:	dd 1c       	adc	r13, r13
    241e:	97 fe       	sbrs	r9, 7
    2420:	08 c0       	rjmp	.+16     	; 0x2432 <__mulsf3+0x110>
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	a0 e0       	ldi	r26, 0x00	; 0
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	a8 2a       	or	r10, r24
    242c:	b9 2a       	or	r11, r25
    242e:	ca 2a       	or	r12, r26
    2430:	db 2a       	or	r13, r27
    2432:	31 96       	adiw	r30, 0x01	; 1
    2434:	e0 32       	cpi	r30, 0x20	; 32
    2436:	f1 05       	cpc	r31, r1
    2438:	49 f0       	breq	.+18     	; 0x244c <__mulsf3+0x12a>
    243a:	66 0c       	add	r6, r6
    243c:	77 1c       	adc	r7, r7
    243e:	88 1c       	adc	r8, r8
    2440:	99 1c       	adc	r9, r9
    2442:	56 94       	lsr	r5
    2444:	47 94       	ror	r4
    2446:	37 94       	ror	r3
    2448:	27 94       	ror	r2
    244a:	c3 cf       	rjmp	.-122    	; 0x23d2 <__mulsf3+0xb0>
    244c:	fa 85       	ldd	r31, Y+10	; 0x0a
    244e:	ea 89       	ldd	r30, Y+18	; 0x12
    2450:	2b 89       	ldd	r18, Y+19	; 0x13
    2452:	3c 89       	ldd	r19, Y+20	; 0x14
    2454:	8b 85       	ldd	r24, Y+11	; 0x0b
    2456:	9c 85       	ldd	r25, Y+12	; 0x0c
    2458:	28 0f       	add	r18, r24
    245a:	39 1f       	adc	r19, r25
    245c:	2e 5f       	subi	r18, 0xFE	; 254
    245e:	3f 4f       	sbci	r19, 0xFF	; 255
    2460:	17 c0       	rjmp	.+46     	; 0x2490 <__mulsf3+0x16e>
    2462:	ca 01       	movw	r24, r20
    2464:	81 70       	andi	r24, 0x01	; 1
    2466:	90 70       	andi	r25, 0x00	; 0
    2468:	89 2b       	or	r24, r25
    246a:	61 f0       	breq	.+24     	; 0x2484 <__mulsf3+0x162>
    246c:	16 95       	lsr	r17
    246e:	07 95       	ror	r16
    2470:	f7 94       	ror	r15
    2472:	e7 94       	ror	r14
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	a0 e0       	ldi	r26, 0x00	; 0
    247a:	b0 e8       	ldi	r27, 0x80	; 128
    247c:	e8 2a       	or	r14, r24
    247e:	f9 2a       	or	r15, r25
    2480:	0a 2b       	or	r16, r26
    2482:	1b 2b       	or	r17, r27
    2484:	76 95       	lsr	r23
    2486:	67 95       	ror	r22
    2488:	57 95       	ror	r21
    248a:	47 95       	ror	r20
    248c:	2f 5f       	subi	r18, 0xFF	; 255
    248e:	3f 4f       	sbci	r19, 0xFF	; 255
    2490:	77 fd       	sbrc	r23, 7
    2492:	e7 cf       	rjmp	.-50     	; 0x2462 <__mulsf3+0x140>
    2494:	0c c0       	rjmp	.+24     	; 0x24ae <__mulsf3+0x18c>
    2496:	44 0f       	add	r20, r20
    2498:	55 1f       	adc	r21, r21
    249a:	66 1f       	adc	r22, r22
    249c:	77 1f       	adc	r23, r23
    249e:	17 fd       	sbrc	r17, 7
    24a0:	41 60       	ori	r20, 0x01	; 1
    24a2:	ee 0c       	add	r14, r14
    24a4:	ff 1c       	adc	r15, r15
    24a6:	00 1f       	adc	r16, r16
    24a8:	11 1f       	adc	r17, r17
    24aa:	21 50       	subi	r18, 0x01	; 1
    24ac:	30 40       	sbci	r19, 0x00	; 0
    24ae:	40 30       	cpi	r20, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	59 07       	cpc	r21, r25
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	69 07       	cpc	r22, r25
    24b8:	90 e4       	ldi	r25, 0x40	; 64
    24ba:	79 07       	cpc	r23, r25
    24bc:	60 f3       	brcs	.-40     	; 0x2496 <__mulsf3+0x174>
    24be:	2b 8f       	std	Y+27, r18	; 0x1b
    24c0:	3c 8f       	std	Y+28, r19	; 0x1c
    24c2:	db 01       	movw	r26, r22
    24c4:	ca 01       	movw	r24, r20
    24c6:	8f 77       	andi	r24, 0x7F	; 127
    24c8:	90 70       	andi	r25, 0x00	; 0
    24ca:	a0 70       	andi	r26, 0x00	; 0
    24cc:	b0 70       	andi	r27, 0x00	; 0
    24ce:	80 34       	cpi	r24, 0x40	; 64
    24d0:	91 05       	cpc	r25, r1
    24d2:	a1 05       	cpc	r26, r1
    24d4:	b1 05       	cpc	r27, r1
    24d6:	61 f4       	brne	.+24     	; 0x24f0 <__mulsf3+0x1ce>
    24d8:	47 fd       	sbrc	r20, 7
    24da:	0a c0       	rjmp	.+20     	; 0x24f0 <__mulsf3+0x1ce>
    24dc:	e1 14       	cp	r14, r1
    24de:	f1 04       	cpc	r15, r1
    24e0:	01 05       	cpc	r16, r1
    24e2:	11 05       	cpc	r17, r1
    24e4:	29 f0       	breq	.+10     	; 0x24f0 <__mulsf3+0x1ce>
    24e6:	40 5c       	subi	r20, 0xC0	; 192
    24e8:	5f 4f       	sbci	r21, 0xFF	; 255
    24ea:	6f 4f       	sbci	r22, 0xFF	; 255
    24ec:	7f 4f       	sbci	r23, 0xFF	; 255
    24ee:	40 78       	andi	r20, 0x80	; 128
    24f0:	1a 8e       	std	Y+26, r1	; 0x1a
    24f2:	fe 17       	cp	r31, r30
    24f4:	11 f0       	breq	.+4      	; 0x24fa <__mulsf3+0x1d8>
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	8a 8f       	std	Y+26, r24	; 0x1a
    24fa:	4d 8f       	std	Y+29, r20	; 0x1d
    24fc:	5e 8f       	std	Y+30, r21	; 0x1e
    24fe:	6f 8f       	std	Y+31, r22	; 0x1f
    2500:	78 a3       	std	Y+32, r23	; 0x20
    2502:	83 e0       	ldi	r24, 0x03	; 3
    2504:	89 8f       	std	Y+25, r24	; 0x19
    2506:	ce 01       	movw	r24, r28
    2508:	49 96       	adiw	r24, 0x19	; 25
    250a:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__pack_f>
    250e:	a0 96       	adiw	r28, 0x20	; 32
    2510:	e2 e1       	ldi	r30, 0x12	; 18
    2512:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__epilogue_restores__>

00002516 <__divsf3>:
    2516:	a8 e1       	ldi	r26, 0x18	; 24
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	e1 e9       	ldi	r30, 0x91	; 145
    251c:	f2 e1       	ldi	r31, 0x12	; 18
    251e:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__prologue_saves__+0x10>
    2522:	69 83       	std	Y+1, r22	; 0x01
    2524:	7a 83       	std	Y+2, r23	; 0x02
    2526:	8b 83       	std	Y+3, r24	; 0x03
    2528:	9c 83       	std	Y+4, r25	; 0x04
    252a:	2d 83       	std	Y+5, r18	; 0x05
    252c:	3e 83       	std	Y+6, r19	; 0x06
    252e:	4f 83       	std	Y+7, r20	; 0x07
    2530:	58 87       	std	Y+8, r21	; 0x08
    2532:	b9 e0       	ldi	r27, 0x09	; 9
    2534:	eb 2e       	mov	r14, r27
    2536:	f1 2c       	mov	r15, r1
    2538:	ec 0e       	add	r14, r28
    253a:	fd 1e       	adc	r15, r29
    253c:	ce 01       	movw	r24, r28
    253e:	01 96       	adiw	r24, 0x01	; 1
    2540:	b7 01       	movw	r22, r14
    2542:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__unpack_f>
    2546:	8e 01       	movw	r16, r28
    2548:	0f 5e       	subi	r16, 0xEF	; 239
    254a:	1f 4f       	sbci	r17, 0xFF	; 255
    254c:	ce 01       	movw	r24, r28
    254e:	05 96       	adiw	r24, 0x05	; 5
    2550:	b8 01       	movw	r22, r16
    2552:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__unpack_f>
    2556:	29 85       	ldd	r18, Y+9	; 0x09
    2558:	22 30       	cpi	r18, 0x02	; 2
    255a:	08 f4       	brcc	.+2      	; 0x255e <__divsf3+0x48>
    255c:	7e c0       	rjmp	.+252    	; 0x265a <__divsf3+0x144>
    255e:	39 89       	ldd	r19, Y+17	; 0x11
    2560:	32 30       	cpi	r19, 0x02	; 2
    2562:	10 f4       	brcc	.+4      	; 0x2568 <__divsf3+0x52>
    2564:	b8 01       	movw	r22, r16
    2566:	7c c0       	rjmp	.+248    	; 0x2660 <__divsf3+0x14a>
    2568:	8a 85       	ldd	r24, Y+10	; 0x0a
    256a:	9a 89       	ldd	r25, Y+18	; 0x12
    256c:	89 27       	eor	r24, r25
    256e:	8a 87       	std	Y+10, r24	; 0x0a
    2570:	24 30       	cpi	r18, 0x04	; 4
    2572:	11 f0       	breq	.+4      	; 0x2578 <__divsf3+0x62>
    2574:	22 30       	cpi	r18, 0x02	; 2
    2576:	31 f4       	brne	.+12     	; 0x2584 <__divsf3+0x6e>
    2578:	23 17       	cp	r18, r19
    257a:	09 f0       	breq	.+2      	; 0x257e <__divsf3+0x68>
    257c:	6e c0       	rjmp	.+220    	; 0x265a <__divsf3+0x144>
    257e:	60 e6       	ldi	r22, 0x60	; 96
    2580:	70 e0       	ldi	r23, 0x00	; 0
    2582:	6e c0       	rjmp	.+220    	; 0x2660 <__divsf3+0x14a>
    2584:	34 30       	cpi	r19, 0x04	; 4
    2586:	39 f4       	brne	.+14     	; 0x2596 <__divsf3+0x80>
    2588:	1d 86       	std	Y+13, r1	; 0x0d
    258a:	1e 86       	std	Y+14, r1	; 0x0e
    258c:	1f 86       	std	Y+15, r1	; 0x0f
    258e:	18 8a       	std	Y+16, r1	; 0x10
    2590:	1c 86       	std	Y+12, r1	; 0x0c
    2592:	1b 86       	std	Y+11, r1	; 0x0b
    2594:	04 c0       	rjmp	.+8      	; 0x259e <__divsf3+0x88>
    2596:	32 30       	cpi	r19, 0x02	; 2
    2598:	21 f4       	brne	.+8      	; 0x25a2 <__divsf3+0x8c>
    259a:	84 e0       	ldi	r24, 0x04	; 4
    259c:	89 87       	std	Y+9, r24	; 0x09
    259e:	b7 01       	movw	r22, r14
    25a0:	5f c0       	rjmp	.+190    	; 0x2660 <__divsf3+0x14a>
    25a2:	2b 85       	ldd	r18, Y+11	; 0x0b
    25a4:	3c 85       	ldd	r19, Y+12	; 0x0c
    25a6:	8b 89       	ldd	r24, Y+19	; 0x13
    25a8:	9c 89       	ldd	r25, Y+20	; 0x14
    25aa:	28 1b       	sub	r18, r24
    25ac:	39 0b       	sbc	r19, r25
    25ae:	3c 87       	std	Y+12, r19	; 0x0c
    25b0:	2b 87       	std	Y+11, r18	; 0x0b
    25b2:	ed 84       	ldd	r14, Y+13	; 0x0d
    25b4:	fe 84       	ldd	r15, Y+14	; 0x0e
    25b6:	0f 85       	ldd	r16, Y+15	; 0x0f
    25b8:	18 89       	ldd	r17, Y+16	; 0x10
    25ba:	ad 88       	ldd	r10, Y+21	; 0x15
    25bc:	be 88       	ldd	r11, Y+22	; 0x16
    25be:	cf 88       	ldd	r12, Y+23	; 0x17
    25c0:	d8 8c       	ldd	r13, Y+24	; 0x18
    25c2:	ea 14       	cp	r14, r10
    25c4:	fb 04       	cpc	r15, r11
    25c6:	0c 05       	cpc	r16, r12
    25c8:	1d 05       	cpc	r17, r13
    25ca:	40 f4       	brcc	.+16     	; 0x25dc <__divsf3+0xc6>
    25cc:	ee 0c       	add	r14, r14
    25ce:	ff 1c       	adc	r15, r15
    25d0:	00 1f       	adc	r16, r16
    25d2:	11 1f       	adc	r17, r17
    25d4:	21 50       	subi	r18, 0x01	; 1
    25d6:	30 40       	sbci	r19, 0x00	; 0
    25d8:	3c 87       	std	Y+12, r19	; 0x0c
    25da:	2b 87       	std	Y+11, r18	; 0x0b
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	40 e0       	ldi	r20, 0x00	; 0
    25e2:	50 e0       	ldi	r21, 0x00	; 0
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	a0 e0       	ldi	r26, 0x00	; 0
    25ea:	b0 e4       	ldi	r27, 0x40	; 64
    25ec:	60 e0       	ldi	r22, 0x00	; 0
    25ee:	70 e0       	ldi	r23, 0x00	; 0
    25f0:	ea 14       	cp	r14, r10
    25f2:	fb 04       	cpc	r15, r11
    25f4:	0c 05       	cpc	r16, r12
    25f6:	1d 05       	cpc	r17, r13
    25f8:	40 f0       	brcs	.+16     	; 0x260a <__divsf3+0xf4>
    25fa:	28 2b       	or	r18, r24
    25fc:	39 2b       	or	r19, r25
    25fe:	4a 2b       	or	r20, r26
    2600:	5b 2b       	or	r21, r27
    2602:	ea 18       	sub	r14, r10
    2604:	fb 08       	sbc	r15, r11
    2606:	0c 09       	sbc	r16, r12
    2608:	1d 09       	sbc	r17, r13
    260a:	b6 95       	lsr	r27
    260c:	a7 95       	ror	r26
    260e:	97 95       	ror	r25
    2610:	87 95       	ror	r24
    2612:	ee 0c       	add	r14, r14
    2614:	ff 1c       	adc	r15, r15
    2616:	00 1f       	adc	r16, r16
    2618:	11 1f       	adc	r17, r17
    261a:	6f 5f       	subi	r22, 0xFF	; 255
    261c:	7f 4f       	sbci	r23, 0xFF	; 255
    261e:	6f 31       	cpi	r22, 0x1F	; 31
    2620:	71 05       	cpc	r23, r1
    2622:	31 f7       	brne	.-52     	; 0x25f0 <__divsf3+0xda>
    2624:	da 01       	movw	r26, r20
    2626:	c9 01       	movw	r24, r18
    2628:	8f 77       	andi	r24, 0x7F	; 127
    262a:	90 70       	andi	r25, 0x00	; 0
    262c:	a0 70       	andi	r26, 0x00	; 0
    262e:	b0 70       	andi	r27, 0x00	; 0
    2630:	80 34       	cpi	r24, 0x40	; 64
    2632:	91 05       	cpc	r25, r1
    2634:	a1 05       	cpc	r26, r1
    2636:	b1 05       	cpc	r27, r1
    2638:	61 f4       	brne	.+24     	; 0x2652 <__divsf3+0x13c>
    263a:	27 fd       	sbrc	r18, 7
    263c:	0a c0       	rjmp	.+20     	; 0x2652 <__divsf3+0x13c>
    263e:	e1 14       	cp	r14, r1
    2640:	f1 04       	cpc	r15, r1
    2642:	01 05       	cpc	r16, r1
    2644:	11 05       	cpc	r17, r1
    2646:	29 f0       	breq	.+10     	; 0x2652 <__divsf3+0x13c>
    2648:	20 5c       	subi	r18, 0xC0	; 192
    264a:	3f 4f       	sbci	r19, 0xFF	; 255
    264c:	4f 4f       	sbci	r20, 0xFF	; 255
    264e:	5f 4f       	sbci	r21, 0xFF	; 255
    2650:	20 78       	andi	r18, 0x80	; 128
    2652:	2d 87       	std	Y+13, r18	; 0x0d
    2654:	3e 87       	std	Y+14, r19	; 0x0e
    2656:	4f 87       	std	Y+15, r20	; 0x0f
    2658:	58 8b       	std	Y+16, r21	; 0x10
    265a:	be 01       	movw	r22, r28
    265c:	67 5f       	subi	r22, 0xF7	; 247
    265e:	7f 4f       	sbci	r23, 0xFF	; 255
    2660:	cb 01       	movw	r24, r22
    2662:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__pack_f>
    2666:	68 96       	adiw	r28, 0x18	; 24
    2668:	ea e0       	ldi	r30, 0x0A	; 10
    266a:	0c 94 4f 17 	jmp	0x2e9e	; 0x2e9e <__epilogue_restores__+0x10>

0000266e <__gtsf2>:
    266e:	a8 e1       	ldi	r26, 0x18	; 24
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	ed e3       	ldi	r30, 0x3D	; 61
    2674:	f3 e1       	ldi	r31, 0x13	; 19
    2676:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <__prologue_saves__+0x18>
    267a:	69 83       	std	Y+1, r22	; 0x01
    267c:	7a 83       	std	Y+2, r23	; 0x02
    267e:	8b 83       	std	Y+3, r24	; 0x03
    2680:	9c 83       	std	Y+4, r25	; 0x04
    2682:	2d 83       	std	Y+5, r18	; 0x05
    2684:	3e 83       	std	Y+6, r19	; 0x06
    2686:	4f 83       	std	Y+7, r20	; 0x07
    2688:	58 87       	std	Y+8, r21	; 0x08
    268a:	89 e0       	ldi	r24, 0x09	; 9
    268c:	e8 2e       	mov	r14, r24
    268e:	f1 2c       	mov	r15, r1
    2690:	ec 0e       	add	r14, r28
    2692:	fd 1e       	adc	r15, r29
    2694:	ce 01       	movw	r24, r28
    2696:	01 96       	adiw	r24, 0x01	; 1
    2698:	b7 01       	movw	r22, r14
    269a:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__unpack_f>
    269e:	8e 01       	movw	r16, r28
    26a0:	0f 5e       	subi	r16, 0xEF	; 239
    26a2:	1f 4f       	sbci	r17, 0xFF	; 255
    26a4:	ce 01       	movw	r24, r28
    26a6:	05 96       	adiw	r24, 0x05	; 5
    26a8:	b8 01       	movw	r22, r16
    26aa:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__unpack_f>
    26ae:	89 85       	ldd	r24, Y+9	; 0x09
    26b0:	82 30       	cpi	r24, 0x02	; 2
    26b2:	40 f0       	brcs	.+16     	; 0x26c4 <__gtsf2+0x56>
    26b4:	89 89       	ldd	r24, Y+17	; 0x11
    26b6:	82 30       	cpi	r24, 0x02	; 2
    26b8:	28 f0       	brcs	.+10     	; 0x26c4 <__gtsf2+0x56>
    26ba:	c7 01       	movw	r24, r14
    26bc:	b8 01       	movw	r22, r16
    26be:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__fpcmp_parts_f>
    26c2:	01 c0       	rjmp	.+2      	; 0x26c6 <__gtsf2+0x58>
    26c4:	8f ef       	ldi	r24, 0xFF	; 255
    26c6:	68 96       	adiw	r28, 0x18	; 24
    26c8:	e6 e0       	ldi	r30, 0x06	; 6
    26ca:	0c 94 53 17 	jmp	0x2ea6	; 0x2ea6 <__epilogue_restores__+0x18>

000026ce <__gesf2>:
    26ce:	a8 e1       	ldi	r26, 0x18	; 24
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	ed e6       	ldi	r30, 0x6D	; 109
    26d4:	f3 e1       	ldi	r31, 0x13	; 19
    26d6:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <__prologue_saves__+0x18>
    26da:	69 83       	std	Y+1, r22	; 0x01
    26dc:	7a 83       	std	Y+2, r23	; 0x02
    26de:	8b 83       	std	Y+3, r24	; 0x03
    26e0:	9c 83       	std	Y+4, r25	; 0x04
    26e2:	2d 83       	std	Y+5, r18	; 0x05
    26e4:	3e 83       	std	Y+6, r19	; 0x06
    26e6:	4f 83       	std	Y+7, r20	; 0x07
    26e8:	58 87       	std	Y+8, r21	; 0x08
    26ea:	89 e0       	ldi	r24, 0x09	; 9
    26ec:	e8 2e       	mov	r14, r24
    26ee:	f1 2c       	mov	r15, r1
    26f0:	ec 0e       	add	r14, r28
    26f2:	fd 1e       	adc	r15, r29
    26f4:	ce 01       	movw	r24, r28
    26f6:	01 96       	adiw	r24, 0x01	; 1
    26f8:	b7 01       	movw	r22, r14
    26fa:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__unpack_f>
    26fe:	8e 01       	movw	r16, r28
    2700:	0f 5e       	subi	r16, 0xEF	; 239
    2702:	1f 4f       	sbci	r17, 0xFF	; 255
    2704:	ce 01       	movw	r24, r28
    2706:	05 96       	adiw	r24, 0x05	; 5
    2708:	b8 01       	movw	r22, r16
    270a:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__unpack_f>
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	82 30       	cpi	r24, 0x02	; 2
    2712:	40 f0       	brcs	.+16     	; 0x2724 <__gesf2+0x56>
    2714:	89 89       	ldd	r24, Y+17	; 0x11
    2716:	82 30       	cpi	r24, 0x02	; 2
    2718:	28 f0       	brcs	.+10     	; 0x2724 <__gesf2+0x56>
    271a:	c7 01       	movw	r24, r14
    271c:	b8 01       	movw	r22, r16
    271e:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__fpcmp_parts_f>
    2722:	01 c0       	rjmp	.+2      	; 0x2726 <__gesf2+0x58>
    2724:	8f ef       	ldi	r24, 0xFF	; 255
    2726:	68 96       	adiw	r28, 0x18	; 24
    2728:	e6 e0       	ldi	r30, 0x06	; 6
    272a:	0c 94 53 17 	jmp	0x2ea6	; 0x2ea6 <__epilogue_restores__+0x18>

0000272e <__ltsf2>:
    272e:	a8 e1       	ldi	r26, 0x18	; 24
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	ed e9       	ldi	r30, 0x9D	; 157
    2734:	f3 e1       	ldi	r31, 0x13	; 19
    2736:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <__prologue_saves__+0x18>
    273a:	69 83       	std	Y+1, r22	; 0x01
    273c:	7a 83       	std	Y+2, r23	; 0x02
    273e:	8b 83       	std	Y+3, r24	; 0x03
    2740:	9c 83       	std	Y+4, r25	; 0x04
    2742:	2d 83       	std	Y+5, r18	; 0x05
    2744:	3e 83       	std	Y+6, r19	; 0x06
    2746:	4f 83       	std	Y+7, r20	; 0x07
    2748:	58 87       	std	Y+8, r21	; 0x08
    274a:	89 e0       	ldi	r24, 0x09	; 9
    274c:	e8 2e       	mov	r14, r24
    274e:	f1 2c       	mov	r15, r1
    2750:	ec 0e       	add	r14, r28
    2752:	fd 1e       	adc	r15, r29
    2754:	ce 01       	movw	r24, r28
    2756:	01 96       	adiw	r24, 0x01	; 1
    2758:	b7 01       	movw	r22, r14
    275a:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__unpack_f>
    275e:	8e 01       	movw	r16, r28
    2760:	0f 5e       	subi	r16, 0xEF	; 239
    2762:	1f 4f       	sbci	r17, 0xFF	; 255
    2764:	ce 01       	movw	r24, r28
    2766:	05 96       	adiw	r24, 0x05	; 5
    2768:	b8 01       	movw	r22, r16
    276a:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__unpack_f>
    276e:	89 85       	ldd	r24, Y+9	; 0x09
    2770:	82 30       	cpi	r24, 0x02	; 2
    2772:	40 f0       	brcs	.+16     	; 0x2784 <__ltsf2+0x56>
    2774:	89 89       	ldd	r24, Y+17	; 0x11
    2776:	82 30       	cpi	r24, 0x02	; 2
    2778:	28 f0       	brcs	.+10     	; 0x2784 <__ltsf2+0x56>
    277a:	c7 01       	movw	r24, r14
    277c:	b8 01       	movw	r22, r16
    277e:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__fpcmp_parts_f>
    2782:	01 c0       	rjmp	.+2      	; 0x2786 <__ltsf2+0x58>
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	68 96       	adiw	r28, 0x18	; 24
    2788:	e6 e0       	ldi	r30, 0x06	; 6
    278a:	0c 94 53 17 	jmp	0x2ea6	; 0x2ea6 <__epilogue_restores__+0x18>

0000278e <__lesf2>:
    278e:	a8 e1       	ldi	r26, 0x18	; 24
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	ed ec       	ldi	r30, 0xCD	; 205
    2794:	f3 e1       	ldi	r31, 0x13	; 19
    2796:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <__prologue_saves__+0x18>
    279a:	69 83       	std	Y+1, r22	; 0x01
    279c:	7a 83       	std	Y+2, r23	; 0x02
    279e:	8b 83       	std	Y+3, r24	; 0x03
    27a0:	9c 83       	std	Y+4, r25	; 0x04
    27a2:	2d 83       	std	Y+5, r18	; 0x05
    27a4:	3e 83       	std	Y+6, r19	; 0x06
    27a6:	4f 83       	std	Y+7, r20	; 0x07
    27a8:	58 87       	std	Y+8, r21	; 0x08
    27aa:	89 e0       	ldi	r24, 0x09	; 9
    27ac:	e8 2e       	mov	r14, r24
    27ae:	f1 2c       	mov	r15, r1
    27b0:	ec 0e       	add	r14, r28
    27b2:	fd 1e       	adc	r15, r29
    27b4:	ce 01       	movw	r24, r28
    27b6:	01 96       	adiw	r24, 0x01	; 1
    27b8:	b7 01       	movw	r22, r14
    27ba:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__unpack_f>
    27be:	8e 01       	movw	r16, r28
    27c0:	0f 5e       	subi	r16, 0xEF	; 239
    27c2:	1f 4f       	sbci	r17, 0xFF	; 255
    27c4:	ce 01       	movw	r24, r28
    27c6:	05 96       	adiw	r24, 0x05	; 5
    27c8:	b8 01       	movw	r22, r16
    27ca:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__unpack_f>
    27ce:	89 85       	ldd	r24, Y+9	; 0x09
    27d0:	82 30       	cpi	r24, 0x02	; 2
    27d2:	40 f0       	brcs	.+16     	; 0x27e4 <__lesf2+0x56>
    27d4:	89 89       	ldd	r24, Y+17	; 0x11
    27d6:	82 30       	cpi	r24, 0x02	; 2
    27d8:	28 f0       	brcs	.+10     	; 0x27e4 <__lesf2+0x56>
    27da:	c7 01       	movw	r24, r14
    27dc:	b8 01       	movw	r22, r16
    27de:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__fpcmp_parts_f>
    27e2:	01 c0       	rjmp	.+2      	; 0x27e6 <__lesf2+0x58>
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	68 96       	adiw	r28, 0x18	; 24
    27e8:	e6 e0       	ldi	r30, 0x06	; 6
    27ea:	0c 94 53 17 	jmp	0x2ea6	; 0x2ea6 <__epilogue_restores__+0x18>

000027ee <__floatsisf>:
    27ee:	a8 e0       	ldi	r26, 0x08	; 8
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	ed ef       	ldi	r30, 0xFD	; 253
    27f4:	f3 e1       	ldi	r31, 0x13	; 19
    27f6:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__prologue_saves__+0x12>
    27fa:	9b 01       	movw	r18, r22
    27fc:	ac 01       	movw	r20, r24
    27fe:	83 e0       	ldi	r24, 0x03	; 3
    2800:	89 83       	std	Y+1, r24	; 0x01
    2802:	da 01       	movw	r26, r20
    2804:	c9 01       	movw	r24, r18
    2806:	88 27       	eor	r24, r24
    2808:	b7 fd       	sbrc	r27, 7
    280a:	83 95       	inc	r24
    280c:	99 27       	eor	r25, r25
    280e:	aa 27       	eor	r26, r26
    2810:	bb 27       	eor	r27, r27
    2812:	b8 2e       	mov	r11, r24
    2814:	21 15       	cp	r18, r1
    2816:	31 05       	cpc	r19, r1
    2818:	41 05       	cpc	r20, r1
    281a:	51 05       	cpc	r21, r1
    281c:	19 f4       	brne	.+6      	; 0x2824 <__floatsisf+0x36>
    281e:	82 e0       	ldi	r24, 0x02	; 2
    2820:	89 83       	std	Y+1, r24	; 0x01
    2822:	3a c0       	rjmp	.+116    	; 0x2898 <__floatsisf+0xaa>
    2824:	88 23       	and	r24, r24
    2826:	a9 f0       	breq	.+42     	; 0x2852 <__floatsisf+0x64>
    2828:	20 30       	cpi	r18, 0x00	; 0
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	38 07       	cpc	r19, r24
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	48 07       	cpc	r20, r24
    2832:	80 e8       	ldi	r24, 0x80	; 128
    2834:	58 07       	cpc	r21, r24
    2836:	29 f4       	brne	.+10     	; 0x2842 <__floatsisf+0x54>
    2838:	60 e0       	ldi	r22, 0x00	; 0
    283a:	70 e0       	ldi	r23, 0x00	; 0
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	9f ec       	ldi	r25, 0xCF	; 207
    2840:	30 c0       	rjmp	.+96     	; 0x28a2 <__floatsisf+0xb4>
    2842:	ee 24       	eor	r14, r14
    2844:	ff 24       	eor	r15, r15
    2846:	87 01       	movw	r16, r14
    2848:	e2 1a       	sub	r14, r18
    284a:	f3 0a       	sbc	r15, r19
    284c:	04 0b       	sbc	r16, r20
    284e:	15 0b       	sbc	r17, r21
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <__floatsisf+0x68>
    2852:	79 01       	movw	r14, r18
    2854:	8a 01       	movw	r16, r20
    2856:	8e e1       	ldi	r24, 0x1E	; 30
    2858:	c8 2e       	mov	r12, r24
    285a:	d1 2c       	mov	r13, r1
    285c:	dc 82       	std	Y+4, r13	; 0x04
    285e:	cb 82       	std	Y+3, r12	; 0x03
    2860:	ed 82       	std	Y+5, r14	; 0x05
    2862:	fe 82       	std	Y+6, r15	; 0x06
    2864:	0f 83       	std	Y+7, r16	; 0x07
    2866:	18 87       	std	Y+8, r17	; 0x08
    2868:	c8 01       	movw	r24, r16
    286a:	b7 01       	movw	r22, r14
    286c:	0e 94 22 15 	call	0x2a44	; 0x2a44 <__clzsi2>
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	18 16       	cp	r1, r24
    2874:	19 06       	cpc	r1, r25
    2876:	84 f4       	brge	.+32     	; 0x2898 <__floatsisf+0xaa>
    2878:	08 2e       	mov	r0, r24
    287a:	04 c0       	rjmp	.+8      	; 0x2884 <__floatsisf+0x96>
    287c:	ee 0c       	add	r14, r14
    287e:	ff 1c       	adc	r15, r15
    2880:	00 1f       	adc	r16, r16
    2882:	11 1f       	adc	r17, r17
    2884:	0a 94       	dec	r0
    2886:	d2 f7       	brpl	.-12     	; 0x287c <__floatsisf+0x8e>
    2888:	ed 82       	std	Y+5, r14	; 0x05
    288a:	fe 82       	std	Y+6, r15	; 0x06
    288c:	0f 83       	std	Y+7, r16	; 0x07
    288e:	18 87       	std	Y+8, r17	; 0x08
    2890:	c8 1a       	sub	r12, r24
    2892:	d9 0a       	sbc	r13, r25
    2894:	dc 82       	std	Y+4, r13	; 0x04
    2896:	cb 82       	std	Y+3, r12	; 0x03
    2898:	ba 82       	std	Y+2, r11	; 0x02
    289a:	ce 01       	movw	r24, r28
    289c:	01 96       	adiw	r24, 0x01	; 1
    289e:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__pack_f>
    28a2:	28 96       	adiw	r28, 0x08	; 8
    28a4:	e9 e0       	ldi	r30, 0x09	; 9
    28a6:	0c 94 50 17 	jmp	0x2ea0	; 0x2ea0 <__epilogue_restores__+0x12>

000028aa <__fixsfsi>:
    28aa:	ac e0       	ldi	r26, 0x0C	; 12
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	eb e5       	ldi	r30, 0x5B	; 91
    28b0:	f4 e1       	ldi	r31, 0x14	; 20
    28b2:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__prologue_saves__+0x20>
    28b6:	69 83       	std	Y+1, r22	; 0x01
    28b8:	7a 83       	std	Y+2, r23	; 0x02
    28ba:	8b 83       	std	Y+3, r24	; 0x03
    28bc:	9c 83       	std	Y+4, r25	; 0x04
    28be:	ce 01       	movw	r24, r28
    28c0:	01 96       	adiw	r24, 0x01	; 1
    28c2:	be 01       	movw	r22, r28
    28c4:	6b 5f       	subi	r22, 0xFB	; 251
    28c6:	7f 4f       	sbci	r23, 0xFF	; 255
    28c8:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__unpack_f>
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	82 30       	cpi	r24, 0x02	; 2
    28d0:	61 f1       	breq	.+88     	; 0x292a <__fixsfsi+0x80>
    28d2:	82 30       	cpi	r24, 0x02	; 2
    28d4:	50 f1       	brcs	.+84     	; 0x292a <__fixsfsi+0x80>
    28d6:	84 30       	cpi	r24, 0x04	; 4
    28d8:	21 f4       	brne	.+8      	; 0x28e2 <__fixsfsi+0x38>
    28da:	8e 81       	ldd	r24, Y+6	; 0x06
    28dc:	88 23       	and	r24, r24
    28de:	51 f1       	breq	.+84     	; 0x2934 <__fixsfsi+0x8a>
    28e0:	2e c0       	rjmp	.+92     	; 0x293e <__fixsfsi+0x94>
    28e2:	2f 81       	ldd	r18, Y+7	; 0x07
    28e4:	38 85       	ldd	r19, Y+8	; 0x08
    28e6:	37 fd       	sbrc	r19, 7
    28e8:	20 c0       	rjmp	.+64     	; 0x292a <__fixsfsi+0x80>
    28ea:	6e 81       	ldd	r22, Y+6	; 0x06
    28ec:	2f 31       	cpi	r18, 0x1F	; 31
    28ee:	31 05       	cpc	r19, r1
    28f0:	1c f0       	brlt	.+6      	; 0x28f8 <__fixsfsi+0x4e>
    28f2:	66 23       	and	r22, r22
    28f4:	f9 f0       	breq	.+62     	; 0x2934 <__fixsfsi+0x8a>
    28f6:	23 c0       	rjmp	.+70     	; 0x293e <__fixsfsi+0x94>
    28f8:	8e e1       	ldi	r24, 0x1E	; 30
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	82 1b       	sub	r24, r18
    28fe:	93 0b       	sbc	r25, r19
    2900:	29 85       	ldd	r18, Y+9	; 0x09
    2902:	3a 85       	ldd	r19, Y+10	; 0x0a
    2904:	4b 85       	ldd	r20, Y+11	; 0x0b
    2906:	5c 85       	ldd	r21, Y+12	; 0x0c
    2908:	04 c0       	rjmp	.+8      	; 0x2912 <__fixsfsi+0x68>
    290a:	56 95       	lsr	r21
    290c:	47 95       	ror	r20
    290e:	37 95       	ror	r19
    2910:	27 95       	ror	r18
    2912:	8a 95       	dec	r24
    2914:	d2 f7       	brpl	.-12     	; 0x290a <__fixsfsi+0x60>
    2916:	66 23       	and	r22, r22
    2918:	b1 f0       	breq	.+44     	; 0x2946 <__fixsfsi+0x9c>
    291a:	50 95       	com	r21
    291c:	40 95       	com	r20
    291e:	30 95       	com	r19
    2920:	21 95       	neg	r18
    2922:	3f 4f       	sbci	r19, 0xFF	; 255
    2924:	4f 4f       	sbci	r20, 0xFF	; 255
    2926:	5f 4f       	sbci	r21, 0xFF	; 255
    2928:	0e c0       	rjmp	.+28     	; 0x2946 <__fixsfsi+0x9c>
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	50 e0       	ldi	r21, 0x00	; 0
    2932:	09 c0       	rjmp	.+18     	; 0x2946 <__fixsfsi+0x9c>
    2934:	2f ef       	ldi	r18, 0xFF	; 255
    2936:	3f ef       	ldi	r19, 0xFF	; 255
    2938:	4f ef       	ldi	r20, 0xFF	; 255
    293a:	5f e7       	ldi	r21, 0x7F	; 127
    293c:	04 c0       	rjmp	.+8      	; 0x2946 <__fixsfsi+0x9c>
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	40 e0       	ldi	r20, 0x00	; 0
    2944:	50 e8       	ldi	r21, 0x80	; 128
    2946:	b9 01       	movw	r22, r18
    2948:	ca 01       	movw	r24, r20
    294a:	2c 96       	adiw	r28, 0x0c	; 12
    294c:	e2 e0       	ldi	r30, 0x02	; 2
    294e:	0c 94 57 17 	jmp	0x2eae	; 0x2eae <__epilogue_restores__+0x20>

00002952 <__floatunsisf>:
    2952:	a8 e0       	ldi	r26, 0x08	; 8
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	ef ea       	ldi	r30, 0xAF	; 175
    2958:	f4 e1       	ldi	r31, 0x14	; 20
    295a:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__prologue_saves__+0x10>
    295e:	7b 01       	movw	r14, r22
    2960:	8c 01       	movw	r16, r24
    2962:	61 15       	cp	r22, r1
    2964:	71 05       	cpc	r23, r1
    2966:	81 05       	cpc	r24, r1
    2968:	91 05       	cpc	r25, r1
    296a:	19 f4       	brne	.+6      	; 0x2972 <__floatunsisf+0x20>
    296c:	82 e0       	ldi	r24, 0x02	; 2
    296e:	89 83       	std	Y+1, r24	; 0x01
    2970:	60 c0       	rjmp	.+192    	; 0x2a32 <__floatunsisf+0xe0>
    2972:	83 e0       	ldi	r24, 0x03	; 3
    2974:	89 83       	std	Y+1, r24	; 0x01
    2976:	8e e1       	ldi	r24, 0x1E	; 30
    2978:	c8 2e       	mov	r12, r24
    297a:	d1 2c       	mov	r13, r1
    297c:	dc 82       	std	Y+4, r13	; 0x04
    297e:	cb 82       	std	Y+3, r12	; 0x03
    2980:	ed 82       	std	Y+5, r14	; 0x05
    2982:	fe 82       	std	Y+6, r15	; 0x06
    2984:	0f 83       	std	Y+7, r16	; 0x07
    2986:	18 87       	std	Y+8, r17	; 0x08
    2988:	c8 01       	movw	r24, r16
    298a:	b7 01       	movw	r22, r14
    298c:	0e 94 22 15 	call	0x2a44	; 0x2a44 <__clzsi2>
    2990:	fc 01       	movw	r30, r24
    2992:	31 97       	sbiw	r30, 0x01	; 1
    2994:	f7 ff       	sbrs	r31, 7
    2996:	3b c0       	rjmp	.+118    	; 0x2a0e <__floatunsisf+0xbc>
    2998:	22 27       	eor	r18, r18
    299a:	33 27       	eor	r19, r19
    299c:	2e 1b       	sub	r18, r30
    299e:	3f 0b       	sbc	r19, r31
    29a0:	57 01       	movw	r10, r14
    29a2:	68 01       	movw	r12, r16
    29a4:	02 2e       	mov	r0, r18
    29a6:	04 c0       	rjmp	.+8      	; 0x29b0 <__floatunsisf+0x5e>
    29a8:	d6 94       	lsr	r13
    29aa:	c7 94       	ror	r12
    29ac:	b7 94       	ror	r11
    29ae:	a7 94       	ror	r10
    29b0:	0a 94       	dec	r0
    29b2:	d2 f7       	brpl	.-12     	; 0x29a8 <__floatunsisf+0x56>
    29b4:	40 e0       	ldi	r20, 0x00	; 0
    29b6:	50 e0       	ldi	r21, 0x00	; 0
    29b8:	60 e0       	ldi	r22, 0x00	; 0
    29ba:	70 e0       	ldi	r23, 0x00	; 0
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	a0 e0       	ldi	r26, 0x00	; 0
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	04 c0       	rjmp	.+8      	; 0x29ce <__floatunsisf+0x7c>
    29c6:	88 0f       	add	r24, r24
    29c8:	99 1f       	adc	r25, r25
    29ca:	aa 1f       	adc	r26, r26
    29cc:	bb 1f       	adc	r27, r27
    29ce:	2a 95       	dec	r18
    29d0:	d2 f7       	brpl	.-12     	; 0x29c6 <__floatunsisf+0x74>
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	a1 09       	sbc	r26, r1
    29d6:	b1 09       	sbc	r27, r1
    29d8:	8e 21       	and	r24, r14
    29da:	9f 21       	and	r25, r15
    29dc:	a0 23       	and	r26, r16
    29de:	b1 23       	and	r27, r17
    29e0:	00 97       	sbiw	r24, 0x00	; 0
    29e2:	a1 05       	cpc	r26, r1
    29e4:	b1 05       	cpc	r27, r1
    29e6:	21 f0       	breq	.+8      	; 0x29f0 <__floatunsisf+0x9e>
    29e8:	41 e0       	ldi	r20, 0x01	; 1
    29ea:	50 e0       	ldi	r21, 0x00	; 0
    29ec:	60 e0       	ldi	r22, 0x00	; 0
    29ee:	70 e0       	ldi	r23, 0x00	; 0
    29f0:	4a 29       	or	r20, r10
    29f2:	5b 29       	or	r21, r11
    29f4:	6c 29       	or	r22, r12
    29f6:	7d 29       	or	r23, r13
    29f8:	4d 83       	std	Y+5, r20	; 0x05
    29fa:	5e 83       	std	Y+6, r21	; 0x06
    29fc:	6f 83       	std	Y+7, r22	; 0x07
    29fe:	78 87       	std	Y+8, r23	; 0x08
    2a00:	8e e1       	ldi	r24, 0x1E	; 30
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	8e 1b       	sub	r24, r30
    2a06:	9f 0b       	sbc	r25, r31
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
    2a0c:	12 c0       	rjmp	.+36     	; 0x2a32 <__floatunsisf+0xe0>
    2a0e:	30 97       	sbiw	r30, 0x00	; 0
    2a10:	81 f0       	breq	.+32     	; 0x2a32 <__floatunsisf+0xe0>
    2a12:	0e 2e       	mov	r0, r30
    2a14:	04 c0       	rjmp	.+8      	; 0x2a1e <__floatunsisf+0xcc>
    2a16:	ee 0c       	add	r14, r14
    2a18:	ff 1c       	adc	r15, r15
    2a1a:	00 1f       	adc	r16, r16
    2a1c:	11 1f       	adc	r17, r17
    2a1e:	0a 94       	dec	r0
    2a20:	d2 f7       	brpl	.-12     	; 0x2a16 <__floatunsisf+0xc4>
    2a22:	ed 82       	std	Y+5, r14	; 0x05
    2a24:	fe 82       	std	Y+6, r15	; 0x06
    2a26:	0f 83       	std	Y+7, r16	; 0x07
    2a28:	18 87       	std	Y+8, r17	; 0x08
    2a2a:	ce 1a       	sub	r12, r30
    2a2c:	df 0a       	sbc	r13, r31
    2a2e:	dc 82       	std	Y+4, r13	; 0x04
    2a30:	cb 82       	std	Y+3, r12	; 0x03
    2a32:	1a 82       	std	Y+2, r1	; 0x02
    2a34:	ce 01       	movw	r24, r28
    2a36:	01 96       	adiw	r24, 0x01	; 1
    2a38:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__pack_f>
    2a3c:	28 96       	adiw	r28, 0x08	; 8
    2a3e:	ea e0       	ldi	r30, 0x0A	; 10
    2a40:	0c 94 4f 17 	jmp	0x2e9e	; 0x2e9e <__epilogue_restores__+0x10>

00002a44 <__clzsi2>:
    2a44:	ef 92       	push	r14
    2a46:	ff 92       	push	r15
    2a48:	0f 93       	push	r16
    2a4a:	1f 93       	push	r17
    2a4c:	7b 01       	movw	r14, r22
    2a4e:	8c 01       	movw	r16, r24
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	e8 16       	cp	r14, r24
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	f8 06       	cpc	r15, r24
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	08 07       	cpc	r16, r24
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	18 07       	cpc	r17, r24
    2a60:	88 f4       	brcc	.+34     	; 0x2a84 <__clzsi2+0x40>
    2a62:	8f ef       	ldi	r24, 0xFF	; 255
    2a64:	e8 16       	cp	r14, r24
    2a66:	f1 04       	cpc	r15, r1
    2a68:	01 05       	cpc	r16, r1
    2a6a:	11 05       	cpc	r17, r1
    2a6c:	31 f0       	breq	.+12     	; 0x2a7a <__clzsi2+0x36>
    2a6e:	28 f0       	brcs	.+10     	; 0x2a7a <__clzsi2+0x36>
    2a70:	88 e0       	ldi	r24, 0x08	; 8
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	a0 e0       	ldi	r26, 0x00	; 0
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	17 c0       	rjmp	.+46     	; 0x2aa8 <__clzsi2+0x64>
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	a0 e0       	ldi	r26, 0x00	; 0
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	12 c0       	rjmp	.+36     	; 0x2aa8 <__clzsi2+0x64>
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	e8 16       	cp	r14, r24
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	f8 06       	cpc	r15, r24
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	08 07       	cpc	r16, r24
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	18 07       	cpc	r17, r24
    2a94:	28 f0       	brcs	.+10     	; 0x2aa0 <__clzsi2+0x5c>
    2a96:	88 e1       	ldi	r24, 0x18	; 24
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	a0 e0       	ldi	r26, 0x00	; 0
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	04 c0       	rjmp	.+8      	; 0x2aa8 <__clzsi2+0x64>
    2aa0:	80 e1       	ldi	r24, 0x10	; 16
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	a0 e0       	ldi	r26, 0x00	; 0
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	20 e2       	ldi	r18, 0x20	; 32
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e0       	ldi	r20, 0x00	; 0
    2aae:	50 e0       	ldi	r21, 0x00	; 0
    2ab0:	28 1b       	sub	r18, r24
    2ab2:	39 0b       	sbc	r19, r25
    2ab4:	4a 0b       	sbc	r20, r26
    2ab6:	5b 0b       	sbc	r21, r27
    2ab8:	04 c0       	rjmp	.+8      	; 0x2ac2 <__clzsi2+0x7e>
    2aba:	16 95       	lsr	r17
    2abc:	07 95       	ror	r16
    2abe:	f7 94       	ror	r15
    2ac0:	e7 94       	ror	r14
    2ac2:	8a 95       	dec	r24
    2ac4:	d2 f7       	brpl	.-12     	; 0x2aba <__clzsi2+0x76>
    2ac6:	f7 01       	movw	r30, r14
    2ac8:	e8 59       	subi	r30, 0x98	; 152
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	80 81       	ld	r24, Z
    2ace:	28 1b       	sub	r18, r24
    2ad0:	31 09       	sbc	r19, r1
    2ad2:	41 09       	sbc	r20, r1
    2ad4:	51 09       	sbc	r21, r1
    2ad6:	c9 01       	movw	r24, r18
    2ad8:	1f 91       	pop	r17
    2ada:	0f 91       	pop	r16
    2adc:	ff 90       	pop	r15
    2ade:	ef 90       	pop	r14
    2ae0:	08 95       	ret

00002ae2 <__pack_f>:
    2ae2:	df 92       	push	r13
    2ae4:	ef 92       	push	r14
    2ae6:	ff 92       	push	r15
    2ae8:	0f 93       	push	r16
    2aea:	1f 93       	push	r17
    2aec:	fc 01       	movw	r30, r24
    2aee:	e4 80       	ldd	r14, Z+4	; 0x04
    2af0:	f5 80       	ldd	r15, Z+5	; 0x05
    2af2:	06 81       	ldd	r16, Z+6	; 0x06
    2af4:	17 81       	ldd	r17, Z+7	; 0x07
    2af6:	d1 80       	ldd	r13, Z+1	; 0x01
    2af8:	80 81       	ld	r24, Z
    2afa:	82 30       	cpi	r24, 0x02	; 2
    2afc:	48 f4       	brcc	.+18     	; 0x2b10 <__pack_f+0x2e>
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	a0 e1       	ldi	r26, 0x10	; 16
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e8 2a       	or	r14, r24
    2b08:	f9 2a       	or	r15, r25
    2b0a:	0a 2b       	or	r16, r26
    2b0c:	1b 2b       	or	r17, r27
    2b0e:	a5 c0       	rjmp	.+330    	; 0x2c5a <__pack_f+0x178>
    2b10:	84 30       	cpi	r24, 0x04	; 4
    2b12:	09 f4       	brne	.+2      	; 0x2b16 <__pack_f+0x34>
    2b14:	9f c0       	rjmp	.+318    	; 0x2c54 <__pack_f+0x172>
    2b16:	82 30       	cpi	r24, 0x02	; 2
    2b18:	21 f4       	brne	.+8      	; 0x2b22 <__pack_f+0x40>
    2b1a:	ee 24       	eor	r14, r14
    2b1c:	ff 24       	eor	r15, r15
    2b1e:	87 01       	movw	r16, r14
    2b20:	05 c0       	rjmp	.+10     	; 0x2b2c <__pack_f+0x4a>
    2b22:	e1 14       	cp	r14, r1
    2b24:	f1 04       	cpc	r15, r1
    2b26:	01 05       	cpc	r16, r1
    2b28:	11 05       	cpc	r17, r1
    2b2a:	19 f4       	brne	.+6      	; 0x2b32 <__pack_f+0x50>
    2b2c:	e0 e0       	ldi	r30, 0x00	; 0
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	96 c0       	rjmp	.+300    	; 0x2c5e <__pack_f+0x17c>
    2b32:	62 81       	ldd	r22, Z+2	; 0x02
    2b34:	73 81       	ldd	r23, Z+3	; 0x03
    2b36:	9f ef       	ldi	r25, 0xFF	; 255
    2b38:	62 38       	cpi	r22, 0x82	; 130
    2b3a:	79 07       	cpc	r23, r25
    2b3c:	0c f0       	brlt	.+2      	; 0x2b40 <__pack_f+0x5e>
    2b3e:	5b c0       	rjmp	.+182    	; 0x2bf6 <__pack_f+0x114>
    2b40:	22 e8       	ldi	r18, 0x82	; 130
    2b42:	3f ef       	ldi	r19, 0xFF	; 255
    2b44:	26 1b       	sub	r18, r22
    2b46:	37 0b       	sbc	r19, r23
    2b48:	2a 31       	cpi	r18, 0x1A	; 26
    2b4a:	31 05       	cpc	r19, r1
    2b4c:	2c f0       	brlt	.+10     	; 0x2b58 <__pack_f+0x76>
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e0       	ldi	r20, 0x00	; 0
    2b54:	50 e0       	ldi	r21, 0x00	; 0
    2b56:	2a c0       	rjmp	.+84     	; 0x2bac <__pack_f+0xca>
    2b58:	b8 01       	movw	r22, r16
    2b5a:	a7 01       	movw	r20, r14
    2b5c:	02 2e       	mov	r0, r18
    2b5e:	04 c0       	rjmp	.+8      	; 0x2b68 <__pack_f+0x86>
    2b60:	76 95       	lsr	r23
    2b62:	67 95       	ror	r22
    2b64:	57 95       	ror	r21
    2b66:	47 95       	ror	r20
    2b68:	0a 94       	dec	r0
    2b6a:	d2 f7       	brpl	.-12     	; 0x2b60 <__pack_f+0x7e>
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	a0 e0       	ldi	r26, 0x00	; 0
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	04 c0       	rjmp	.+8      	; 0x2b7e <__pack_f+0x9c>
    2b76:	88 0f       	add	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	aa 1f       	adc	r26, r26
    2b7c:	bb 1f       	adc	r27, r27
    2b7e:	2a 95       	dec	r18
    2b80:	d2 f7       	brpl	.-12     	; 0x2b76 <__pack_f+0x94>
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	a1 09       	sbc	r26, r1
    2b86:	b1 09       	sbc	r27, r1
    2b88:	8e 21       	and	r24, r14
    2b8a:	9f 21       	and	r25, r15
    2b8c:	a0 23       	and	r26, r16
    2b8e:	b1 23       	and	r27, r17
    2b90:	00 97       	sbiw	r24, 0x00	; 0
    2b92:	a1 05       	cpc	r26, r1
    2b94:	b1 05       	cpc	r27, r1
    2b96:	21 f0       	breq	.+8      	; 0x2ba0 <__pack_f+0xbe>
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	a0 e0       	ldi	r26, 0x00	; 0
    2b9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ba0:	9a 01       	movw	r18, r20
    2ba2:	ab 01       	movw	r20, r22
    2ba4:	28 2b       	or	r18, r24
    2ba6:	39 2b       	or	r19, r25
    2ba8:	4a 2b       	or	r20, r26
    2baa:	5b 2b       	or	r21, r27
    2bac:	da 01       	movw	r26, r20
    2bae:	c9 01       	movw	r24, r18
    2bb0:	8f 77       	andi	r24, 0x7F	; 127
    2bb2:	90 70       	andi	r25, 0x00	; 0
    2bb4:	a0 70       	andi	r26, 0x00	; 0
    2bb6:	b0 70       	andi	r27, 0x00	; 0
    2bb8:	80 34       	cpi	r24, 0x40	; 64
    2bba:	91 05       	cpc	r25, r1
    2bbc:	a1 05       	cpc	r26, r1
    2bbe:	b1 05       	cpc	r27, r1
    2bc0:	39 f4       	brne	.+14     	; 0x2bd0 <__pack_f+0xee>
    2bc2:	27 ff       	sbrs	r18, 7
    2bc4:	09 c0       	rjmp	.+18     	; 0x2bd8 <__pack_f+0xf6>
    2bc6:	20 5c       	subi	r18, 0xC0	; 192
    2bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bca:	4f 4f       	sbci	r20, 0xFF	; 255
    2bcc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bce:	04 c0       	rjmp	.+8      	; 0x2bd8 <__pack_f+0xf6>
    2bd0:	21 5c       	subi	r18, 0xC1	; 193
    2bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd4:	4f 4f       	sbci	r20, 0xFF	; 255
    2bd6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bd8:	e0 e0       	ldi	r30, 0x00	; 0
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	20 30       	cpi	r18, 0x00	; 0
    2bde:	a0 e0       	ldi	r26, 0x00	; 0
    2be0:	3a 07       	cpc	r19, r26
    2be2:	a0 e0       	ldi	r26, 0x00	; 0
    2be4:	4a 07       	cpc	r20, r26
    2be6:	a0 e4       	ldi	r26, 0x40	; 64
    2be8:	5a 07       	cpc	r21, r26
    2bea:	10 f0       	brcs	.+4      	; 0x2bf0 <__pack_f+0x10e>
    2bec:	e1 e0       	ldi	r30, 0x01	; 1
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	79 01       	movw	r14, r18
    2bf2:	8a 01       	movw	r16, r20
    2bf4:	27 c0       	rjmp	.+78     	; 0x2c44 <__pack_f+0x162>
    2bf6:	60 38       	cpi	r22, 0x80	; 128
    2bf8:	71 05       	cpc	r23, r1
    2bfa:	64 f5       	brge	.+88     	; 0x2c54 <__pack_f+0x172>
    2bfc:	fb 01       	movw	r30, r22
    2bfe:	e1 58       	subi	r30, 0x81	; 129
    2c00:	ff 4f       	sbci	r31, 0xFF	; 255
    2c02:	d8 01       	movw	r26, r16
    2c04:	c7 01       	movw	r24, r14
    2c06:	8f 77       	andi	r24, 0x7F	; 127
    2c08:	90 70       	andi	r25, 0x00	; 0
    2c0a:	a0 70       	andi	r26, 0x00	; 0
    2c0c:	b0 70       	andi	r27, 0x00	; 0
    2c0e:	80 34       	cpi	r24, 0x40	; 64
    2c10:	91 05       	cpc	r25, r1
    2c12:	a1 05       	cpc	r26, r1
    2c14:	b1 05       	cpc	r27, r1
    2c16:	39 f4       	brne	.+14     	; 0x2c26 <__pack_f+0x144>
    2c18:	e7 fe       	sbrs	r14, 7
    2c1a:	0d c0       	rjmp	.+26     	; 0x2c36 <__pack_f+0x154>
    2c1c:	80 e4       	ldi	r24, 0x40	; 64
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	a0 e0       	ldi	r26, 0x00	; 0
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	04 c0       	rjmp	.+8      	; 0x2c2e <__pack_f+0x14c>
    2c26:	8f e3       	ldi	r24, 0x3F	; 63
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	a0 e0       	ldi	r26, 0x00	; 0
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	e8 0e       	add	r14, r24
    2c30:	f9 1e       	adc	r15, r25
    2c32:	0a 1f       	adc	r16, r26
    2c34:	1b 1f       	adc	r17, r27
    2c36:	17 ff       	sbrs	r17, 7
    2c38:	05 c0       	rjmp	.+10     	; 0x2c44 <__pack_f+0x162>
    2c3a:	16 95       	lsr	r17
    2c3c:	07 95       	ror	r16
    2c3e:	f7 94       	ror	r15
    2c40:	e7 94       	ror	r14
    2c42:	31 96       	adiw	r30, 0x01	; 1
    2c44:	87 e0       	ldi	r24, 0x07	; 7
    2c46:	16 95       	lsr	r17
    2c48:	07 95       	ror	r16
    2c4a:	f7 94       	ror	r15
    2c4c:	e7 94       	ror	r14
    2c4e:	8a 95       	dec	r24
    2c50:	d1 f7       	brne	.-12     	; 0x2c46 <__pack_f+0x164>
    2c52:	05 c0       	rjmp	.+10     	; 0x2c5e <__pack_f+0x17c>
    2c54:	ee 24       	eor	r14, r14
    2c56:	ff 24       	eor	r15, r15
    2c58:	87 01       	movw	r16, r14
    2c5a:	ef ef       	ldi	r30, 0xFF	; 255
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	6e 2f       	mov	r22, r30
    2c60:	67 95       	ror	r22
    2c62:	66 27       	eor	r22, r22
    2c64:	67 95       	ror	r22
    2c66:	90 2f       	mov	r25, r16
    2c68:	9f 77       	andi	r25, 0x7F	; 127
    2c6a:	d7 94       	ror	r13
    2c6c:	dd 24       	eor	r13, r13
    2c6e:	d7 94       	ror	r13
    2c70:	8e 2f       	mov	r24, r30
    2c72:	86 95       	lsr	r24
    2c74:	49 2f       	mov	r20, r25
    2c76:	46 2b       	or	r20, r22
    2c78:	58 2f       	mov	r21, r24
    2c7a:	5d 29       	or	r21, r13
    2c7c:	b7 01       	movw	r22, r14
    2c7e:	ca 01       	movw	r24, r20
    2c80:	1f 91       	pop	r17
    2c82:	0f 91       	pop	r16
    2c84:	ff 90       	pop	r15
    2c86:	ef 90       	pop	r14
    2c88:	df 90       	pop	r13
    2c8a:	08 95       	ret

00002c8c <__unpack_f>:
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	db 01       	movw	r26, r22
    2c90:	40 81       	ld	r20, Z
    2c92:	51 81       	ldd	r21, Z+1	; 0x01
    2c94:	22 81       	ldd	r18, Z+2	; 0x02
    2c96:	62 2f       	mov	r22, r18
    2c98:	6f 77       	andi	r22, 0x7F	; 127
    2c9a:	70 e0       	ldi	r23, 0x00	; 0
    2c9c:	22 1f       	adc	r18, r18
    2c9e:	22 27       	eor	r18, r18
    2ca0:	22 1f       	adc	r18, r18
    2ca2:	93 81       	ldd	r25, Z+3	; 0x03
    2ca4:	89 2f       	mov	r24, r25
    2ca6:	88 0f       	add	r24, r24
    2ca8:	82 2b       	or	r24, r18
    2caa:	28 2f       	mov	r18, r24
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	99 1f       	adc	r25, r25
    2cb0:	99 27       	eor	r25, r25
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	11 96       	adiw	r26, 0x01	; 1
    2cb6:	9c 93       	st	X, r25
    2cb8:	11 97       	sbiw	r26, 0x01	; 1
    2cba:	21 15       	cp	r18, r1
    2cbc:	31 05       	cpc	r19, r1
    2cbe:	a9 f5       	brne	.+106    	; 0x2d2a <__unpack_f+0x9e>
    2cc0:	41 15       	cp	r20, r1
    2cc2:	51 05       	cpc	r21, r1
    2cc4:	61 05       	cpc	r22, r1
    2cc6:	71 05       	cpc	r23, r1
    2cc8:	11 f4       	brne	.+4      	; 0x2cce <__unpack_f+0x42>
    2cca:	82 e0       	ldi	r24, 0x02	; 2
    2ccc:	37 c0       	rjmp	.+110    	; 0x2d3c <__unpack_f+0xb0>
    2cce:	82 e8       	ldi	r24, 0x82	; 130
    2cd0:	9f ef       	ldi	r25, 0xFF	; 255
    2cd2:	13 96       	adiw	r26, 0x03	; 3
    2cd4:	9c 93       	st	X, r25
    2cd6:	8e 93       	st	-X, r24
    2cd8:	12 97       	sbiw	r26, 0x02	; 2
    2cda:	9a 01       	movw	r18, r20
    2cdc:	ab 01       	movw	r20, r22
    2cde:	67 e0       	ldi	r22, 0x07	; 7
    2ce0:	22 0f       	add	r18, r18
    2ce2:	33 1f       	adc	r19, r19
    2ce4:	44 1f       	adc	r20, r20
    2ce6:	55 1f       	adc	r21, r21
    2ce8:	6a 95       	dec	r22
    2cea:	d1 f7       	brne	.-12     	; 0x2ce0 <__unpack_f+0x54>
    2cec:	83 e0       	ldi	r24, 0x03	; 3
    2cee:	8c 93       	st	X, r24
    2cf0:	0d c0       	rjmp	.+26     	; 0x2d0c <__unpack_f+0x80>
    2cf2:	22 0f       	add	r18, r18
    2cf4:	33 1f       	adc	r19, r19
    2cf6:	44 1f       	adc	r20, r20
    2cf8:	55 1f       	adc	r21, r21
    2cfa:	12 96       	adiw	r26, 0x02	; 2
    2cfc:	8d 91       	ld	r24, X+
    2cfe:	9c 91       	ld	r25, X
    2d00:	13 97       	sbiw	r26, 0x03	; 3
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	13 96       	adiw	r26, 0x03	; 3
    2d06:	9c 93       	st	X, r25
    2d08:	8e 93       	st	-X, r24
    2d0a:	12 97       	sbiw	r26, 0x02	; 2
    2d0c:	20 30       	cpi	r18, 0x00	; 0
    2d0e:	80 e0       	ldi	r24, 0x00	; 0
    2d10:	38 07       	cpc	r19, r24
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	48 07       	cpc	r20, r24
    2d16:	80 e4       	ldi	r24, 0x40	; 64
    2d18:	58 07       	cpc	r21, r24
    2d1a:	58 f3       	brcs	.-42     	; 0x2cf2 <__unpack_f+0x66>
    2d1c:	14 96       	adiw	r26, 0x04	; 4
    2d1e:	2d 93       	st	X+, r18
    2d20:	3d 93       	st	X+, r19
    2d22:	4d 93       	st	X+, r20
    2d24:	5c 93       	st	X, r21
    2d26:	17 97       	sbiw	r26, 0x07	; 7
    2d28:	08 95       	ret
    2d2a:	2f 3f       	cpi	r18, 0xFF	; 255
    2d2c:	31 05       	cpc	r19, r1
    2d2e:	79 f4       	brne	.+30     	; 0x2d4e <__unpack_f+0xc2>
    2d30:	41 15       	cp	r20, r1
    2d32:	51 05       	cpc	r21, r1
    2d34:	61 05       	cpc	r22, r1
    2d36:	71 05       	cpc	r23, r1
    2d38:	19 f4       	brne	.+6      	; 0x2d40 <__unpack_f+0xb4>
    2d3a:	84 e0       	ldi	r24, 0x04	; 4
    2d3c:	8c 93       	st	X, r24
    2d3e:	08 95       	ret
    2d40:	64 ff       	sbrs	r22, 4
    2d42:	03 c0       	rjmp	.+6      	; 0x2d4a <__unpack_f+0xbe>
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	8c 93       	st	X, r24
    2d48:	12 c0       	rjmp	.+36     	; 0x2d6e <__unpack_f+0xe2>
    2d4a:	1c 92       	st	X, r1
    2d4c:	10 c0       	rjmp	.+32     	; 0x2d6e <__unpack_f+0xe2>
    2d4e:	2f 57       	subi	r18, 0x7F	; 127
    2d50:	30 40       	sbci	r19, 0x00	; 0
    2d52:	13 96       	adiw	r26, 0x03	; 3
    2d54:	3c 93       	st	X, r19
    2d56:	2e 93       	st	-X, r18
    2d58:	12 97       	sbiw	r26, 0x02	; 2
    2d5a:	83 e0       	ldi	r24, 0x03	; 3
    2d5c:	8c 93       	st	X, r24
    2d5e:	87 e0       	ldi	r24, 0x07	; 7
    2d60:	44 0f       	add	r20, r20
    2d62:	55 1f       	adc	r21, r21
    2d64:	66 1f       	adc	r22, r22
    2d66:	77 1f       	adc	r23, r23
    2d68:	8a 95       	dec	r24
    2d6a:	d1 f7       	brne	.-12     	; 0x2d60 <__unpack_f+0xd4>
    2d6c:	70 64       	ori	r23, 0x40	; 64
    2d6e:	14 96       	adiw	r26, 0x04	; 4
    2d70:	4d 93       	st	X+, r20
    2d72:	5d 93       	st	X+, r21
    2d74:	6d 93       	st	X+, r22
    2d76:	7c 93       	st	X, r23
    2d78:	17 97       	sbiw	r26, 0x07	; 7
    2d7a:	08 95       	ret

00002d7c <__fpcmp_parts_f>:
    2d7c:	1f 93       	push	r17
    2d7e:	dc 01       	movw	r26, r24
    2d80:	fb 01       	movw	r30, r22
    2d82:	9c 91       	ld	r25, X
    2d84:	92 30       	cpi	r25, 0x02	; 2
    2d86:	08 f4       	brcc	.+2      	; 0x2d8a <__fpcmp_parts_f+0xe>
    2d88:	47 c0       	rjmp	.+142    	; 0x2e18 <__fpcmp_parts_f+0x9c>
    2d8a:	80 81       	ld	r24, Z
    2d8c:	82 30       	cpi	r24, 0x02	; 2
    2d8e:	08 f4       	brcc	.+2      	; 0x2d92 <__fpcmp_parts_f+0x16>
    2d90:	43 c0       	rjmp	.+134    	; 0x2e18 <__fpcmp_parts_f+0x9c>
    2d92:	94 30       	cpi	r25, 0x04	; 4
    2d94:	51 f4       	brne	.+20     	; 0x2daa <__fpcmp_parts_f+0x2e>
    2d96:	11 96       	adiw	r26, 0x01	; 1
    2d98:	1c 91       	ld	r17, X
    2d9a:	84 30       	cpi	r24, 0x04	; 4
    2d9c:	99 f5       	brne	.+102    	; 0x2e04 <__fpcmp_parts_f+0x88>
    2d9e:	81 81       	ldd	r24, Z+1	; 0x01
    2da0:	68 2f       	mov	r22, r24
    2da2:	70 e0       	ldi	r23, 0x00	; 0
    2da4:	61 1b       	sub	r22, r17
    2da6:	71 09       	sbc	r23, r1
    2da8:	3f c0       	rjmp	.+126    	; 0x2e28 <__fpcmp_parts_f+0xac>
    2daa:	84 30       	cpi	r24, 0x04	; 4
    2dac:	21 f0       	breq	.+8      	; 0x2db6 <__fpcmp_parts_f+0x3a>
    2dae:	92 30       	cpi	r25, 0x02	; 2
    2db0:	31 f4       	brne	.+12     	; 0x2dbe <__fpcmp_parts_f+0x42>
    2db2:	82 30       	cpi	r24, 0x02	; 2
    2db4:	b9 f1       	breq	.+110    	; 0x2e24 <__fpcmp_parts_f+0xa8>
    2db6:	81 81       	ldd	r24, Z+1	; 0x01
    2db8:	88 23       	and	r24, r24
    2dba:	89 f1       	breq	.+98     	; 0x2e1e <__fpcmp_parts_f+0xa2>
    2dbc:	2d c0       	rjmp	.+90     	; 0x2e18 <__fpcmp_parts_f+0x9c>
    2dbe:	11 96       	adiw	r26, 0x01	; 1
    2dc0:	1c 91       	ld	r17, X
    2dc2:	11 97       	sbiw	r26, 0x01	; 1
    2dc4:	82 30       	cpi	r24, 0x02	; 2
    2dc6:	f1 f0       	breq	.+60     	; 0x2e04 <__fpcmp_parts_f+0x88>
    2dc8:	81 81       	ldd	r24, Z+1	; 0x01
    2dca:	18 17       	cp	r17, r24
    2dcc:	d9 f4       	brne	.+54     	; 0x2e04 <__fpcmp_parts_f+0x88>
    2dce:	12 96       	adiw	r26, 0x02	; 2
    2dd0:	2d 91       	ld	r18, X+
    2dd2:	3c 91       	ld	r19, X
    2dd4:	13 97       	sbiw	r26, 0x03	; 3
    2dd6:	82 81       	ldd	r24, Z+2	; 0x02
    2dd8:	93 81       	ldd	r25, Z+3	; 0x03
    2dda:	82 17       	cp	r24, r18
    2ddc:	93 07       	cpc	r25, r19
    2dde:	94 f0       	brlt	.+36     	; 0x2e04 <__fpcmp_parts_f+0x88>
    2de0:	28 17       	cp	r18, r24
    2de2:	39 07       	cpc	r19, r25
    2de4:	bc f0       	brlt	.+46     	; 0x2e14 <__fpcmp_parts_f+0x98>
    2de6:	14 96       	adiw	r26, 0x04	; 4
    2de8:	8d 91       	ld	r24, X+
    2dea:	9d 91       	ld	r25, X+
    2dec:	0d 90       	ld	r0, X+
    2dee:	bc 91       	ld	r27, X
    2df0:	a0 2d       	mov	r26, r0
    2df2:	24 81       	ldd	r18, Z+4	; 0x04
    2df4:	35 81       	ldd	r19, Z+5	; 0x05
    2df6:	46 81       	ldd	r20, Z+6	; 0x06
    2df8:	57 81       	ldd	r21, Z+7	; 0x07
    2dfa:	28 17       	cp	r18, r24
    2dfc:	39 07       	cpc	r19, r25
    2dfe:	4a 07       	cpc	r20, r26
    2e00:	5b 07       	cpc	r21, r27
    2e02:	18 f4       	brcc	.+6      	; 0x2e0a <__fpcmp_parts_f+0x8e>
    2e04:	11 23       	and	r17, r17
    2e06:	41 f0       	breq	.+16     	; 0x2e18 <__fpcmp_parts_f+0x9c>
    2e08:	0a c0       	rjmp	.+20     	; 0x2e1e <__fpcmp_parts_f+0xa2>
    2e0a:	82 17       	cp	r24, r18
    2e0c:	93 07       	cpc	r25, r19
    2e0e:	a4 07       	cpc	r26, r20
    2e10:	b5 07       	cpc	r27, r21
    2e12:	40 f4       	brcc	.+16     	; 0x2e24 <__fpcmp_parts_f+0xa8>
    2e14:	11 23       	and	r17, r17
    2e16:	19 f0       	breq	.+6      	; 0x2e1e <__fpcmp_parts_f+0xa2>
    2e18:	61 e0       	ldi	r22, 0x01	; 1
    2e1a:	70 e0       	ldi	r23, 0x00	; 0
    2e1c:	05 c0       	rjmp	.+10     	; 0x2e28 <__fpcmp_parts_f+0xac>
    2e1e:	6f ef       	ldi	r22, 0xFF	; 255
    2e20:	7f ef       	ldi	r23, 0xFF	; 255
    2e22:	02 c0       	rjmp	.+4      	; 0x2e28 <__fpcmp_parts_f+0xac>
    2e24:	60 e0       	ldi	r22, 0x00	; 0
    2e26:	70 e0       	ldi	r23, 0x00	; 0
    2e28:	cb 01       	movw	r24, r22
    2e2a:	1f 91       	pop	r17
    2e2c:	08 95       	ret

00002e2e <__udivmodhi4>:
    2e2e:	aa 1b       	sub	r26, r26
    2e30:	bb 1b       	sub	r27, r27
    2e32:	51 e1       	ldi	r21, 0x11	; 17
    2e34:	07 c0       	rjmp	.+14     	; 0x2e44 <__udivmodhi4_ep>

00002e36 <__udivmodhi4_loop>:
    2e36:	aa 1f       	adc	r26, r26
    2e38:	bb 1f       	adc	r27, r27
    2e3a:	a6 17       	cp	r26, r22
    2e3c:	b7 07       	cpc	r27, r23
    2e3e:	10 f0       	brcs	.+4      	; 0x2e44 <__udivmodhi4_ep>
    2e40:	a6 1b       	sub	r26, r22
    2e42:	b7 0b       	sbc	r27, r23

00002e44 <__udivmodhi4_ep>:
    2e44:	88 1f       	adc	r24, r24
    2e46:	99 1f       	adc	r25, r25
    2e48:	5a 95       	dec	r21
    2e4a:	a9 f7       	brne	.-22     	; 0x2e36 <__udivmodhi4_loop>
    2e4c:	80 95       	com	r24
    2e4e:	90 95       	com	r25
    2e50:	bc 01       	movw	r22, r24
    2e52:	cd 01       	movw	r24, r26
    2e54:	08 95       	ret

00002e56 <__prologue_saves__>:
    2e56:	2f 92       	push	r2
    2e58:	3f 92       	push	r3
    2e5a:	4f 92       	push	r4
    2e5c:	5f 92       	push	r5
    2e5e:	6f 92       	push	r6
    2e60:	7f 92       	push	r7
    2e62:	8f 92       	push	r8
    2e64:	9f 92       	push	r9
    2e66:	af 92       	push	r10
    2e68:	bf 92       	push	r11
    2e6a:	cf 92       	push	r12
    2e6c:	df 92       	push	r13
    2e6e:	ef 92       	push	r14
    2e70:	ff 92       	push	r15
    2e72:	0f 93       	push	r16
    2e74:	1f 93       	push	r17
    2e76:	cf 93       	push	r28
    2e78:	df 93       	push	r29
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
    2e7e:	ca 1b       	sub	r28, r26
    2e80:	db 0b       	sbc	r29, r27
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	f8 94       	cli
    2e86:	de bf       	out	0x3e, r29	; 62
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	cd bf       	out	0x3d, r28	; 61
    2e8c:	09 94       	ijmp

00002e8e <__epilogue_restores__>:
    2e8e:	2a 88       	ldd	r2, Y+18	; 0x12
    2e90:	39 88       	ldd	r3, Y+17	; 0x11
    2e92:	48 88       	ldd	r4, Y+16	; 0x10
    2e94:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e96:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e98:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ea0:	b9 84       	ldd	r11, Y+9	; 0x09
    2ea2:	c8 84       	ldd	r12, Y+8	; 0x08
    2ea4:	df 80       	ldd	r13, Y+7	; 0x07
    2ea6:	ee 80       	ldd	r14, Y+6	; 0x06
    2ea8:	fd 80       	ldd	r15, Y+5	; 0x05
    2eaa:	0c 81       	ldd	r16, Y+4	; 0x04
    2eac:	1b 81       	ldd	r17, Y+3	; 0x03
    2eae:	aa 81       	ldd	r26, Y+2	; 0x02
    2eb0:	b9 81       	ldd	r27, Y+1	; 0x01
    2eb2:	ce 0f       	add	r28, r30
    2eb4:	d1 1d       	adc	r29, r1
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	de bf       	out	0x3e, r29	; 62
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	cd bf       	out	0x3d, r28	; 61
    2ec0:	ed 01       	movw	r28, r26
    2ec2:	08 95       	ret

00002ec4 <_exit>:
    2ec4:	f8 94       	cli

00002ec6 <__stop_program>:
    2ec6:	ff cf       	rjmp	.-2      	; 0x2ec6 <__stop_program>
