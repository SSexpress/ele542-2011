
Proto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000050e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000212  00800060  000050e0  00005174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000052a  00800272  00800272  00005386  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00005386  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000016c0  00000000  00000000  000054e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004532  00000000  00000000  00006ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c7c  00000000  00000000  0000b0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003c1d  00000000  00000000  0000bd54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007a0  00000000  00000000  0000f974  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000fe2  00000000  00000000  00010114  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001936  00000000  00000000  000110f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__vector_15>
      40:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	f0 e5       	ldi	r31, 0x50	; 80
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 6e 28 	jmp	0x50dc	; 0x50dc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
static  void  Task_CheckButtons(void *p_arg);


int main(void)
{
	cli();
      92:	f8 94       	cli
	// Init OS
	OSInit();
      94:	0e 94 73 20 	call	0x40e6	; 0x40e6 <OSInit>

  // #### STEP 3 ####
  //           Task   NULL          Reference vers ton OS_STK      Priorité
  OSTaskCreate(Task_MainLoop,     NULL, (OS_STK *)&Task_Main[OS_TASK_STK_SIZE_MAIN-1],     5);
      98:	84 e7       	ldi	r24, 0x74	; 116
      9a:	90 e0       	ldi	r25, 0x00	; 0
      9c:	60 e0       	ldi	r22, 0x00	; 0
      9e:	70 e0       	ldi	r23, 0x00	; 0
      a0:	43 e6       	ldi	r20, 0x63	; 99
      a2:	55 e0       	ldi	r21, 0x05	; 5
      a4:	25 e0       	ldi	r18, 0x05	; 5
      a6:	0e 94 30 17 	call	0x2e60	; 0x2e60 <OSTaskCreate>
  OSTaskCreate(Task_CheckButtons, NULL, (OS_STK *)&Task_Button[OS_TASK_STK_SIZE_BUTTON-1], 6);
      aa:	8d e6       	ldi	r24, 0x6D	; 109
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	60 e0       	ldi	r22, 0x00	; 0
      b0:	70 e0       	ldi	r23, 0x00	; 0
      b2:	47 e6       	ldi	r20, 0x67	; 103
      b4:	53 e0       	ldi	r21, 0x03	; 3
      b6:	26 e0       	ldi	r18, 0x06	; 6
      b8:	0e 94 30 17 	call	0x2e60	; 0x2e60 <OSTaskCreate>
	
	initPorts();	
      bc:	0e 94 bc 0c 	call	0x1978	; 0x1978 <initPorts>
	uart_init();			//Set uart COM on RS-232
      c0:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <uart_init>
	initADC();				//initialize ADC
      c4:	0e 94 b3 00 	call	0x166	; 0x166 <initADC>
	initTimer1();			//initialize Timer1
      c8:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <initTimer1>
	//calibrateMotors();
	configureTWI();
      cc:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <configureTWI>
	
	// Start OS
  OSStart();
      d0:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <OSStart>
}
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	08 95       	ret

000000da <Task_CheckButtons>:
static  void  Task_CheckButtons(void *p_arg)
{
  (void)p_arg;          // Prevent compiler warnings

  while (1) {               // Task body, always written as an infinite loop.
    checkControls();
      da:	0e 94 c8 0c 	call	0x1990	; 0x1990 <checkControls>
	  OSTimeDly(5);
      de:	85 e0       	ldi	r24, 0x05	; 5
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	0e 94 03 17 	call	0x2e06	; 0x2e06 <OSTimeDly>
      e6:	f9 cf       	rjmp	.-14     	; 0xda <Task_CheckButtons>

000000e8 <Task_MainLoop>:

static  void  Task_MainLoop (void *p_arg)
{
    (void)p_arg;          // Prevent compiler warnings
	
	  cli();
      e8:	f8 94       	cli
	  InitOSTimer();
      ea:	0e 94 b6 10 	call	0x216c	; 0x216c <InitOSTimer>
	  sei();
      ee:	78 94       	sei
    while (1) {               // Task body, always written as an infinite loop.
      // checkControls();  // --> In a task
		
		  //also disable interrupts and everything ??? 
		  //in that case, receiver state should also be reset and kept to its value
		  if (robotState == STATE_ALIVE)
      f0:	80 91 cc 03 	lds	r24, 0x03CC
      f4:	81 30       	cpi	r24, 0x01	; 1
      f6:	59 f4       	brne	.+22     	; 0x10e <Task_MainLoop+0x26>
		  {
			  uartReceive();
      f8:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <uartReceive>
			  checkForAdc();
      fc:	0e 94 86 03 	call	0x70c	; 0x70c <checkForAdc>
			  dealWithMotors();
     100:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <dealWithMotors>
			  processTWI();
     104:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <processTWI>
			  //TWI thingy
	    
		    // PORTB = 0xFF;        
			  flashLeds();
     108:	0e 94 58 08 	call	0x10b0	; 0x10b0 <flashLeds>
     10c:	02 c0       	rjmp	.+4      	; 0x112 <Task_MainLoop+0x2a>
		  }
		
		  else
			  ledDeadState();	//keep led ouptus for DEAD STATE
     10e:	0e 94 40 07 	call	0xe80	; 0xe80 <ledDeadState>

		  if (ReceiverState == STATE_ANGLE_RECEIVED)
     112:	80 91 c3 03 	lds	r24, 0x03C3
     116:	83 30       	cpi	r24, 0x03	; 3
     118:	11 f4       	brne	.+4      	; 0x11e <Task_MainLoop+0x36>
			  ReceiverState = STATE_WAITING;
     11a:	10 92 c3 03 	sts	0x03C3, r1
      
	    OSTimeDly(2);
     11e:	82 e0       	ldi	r24, 0x02	; 2
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	0e 94 03 17 	call	0x2e06	; 0x2e06 <OSTimeDly>
     126:	e4 cf       	rjmp	.-56     	; 0xf0 <Task_MainLoop+0x8>

00000128 <startADC>:
		readADC();
}

void startADC(void)
{
	while (adcCompletedFlag == 0) {}
     128:	80 91 69 03 	lds	r24, 0x0369
     12c:	88 23       	and	r24, r24
     12e:	e1 f3       	breq	.-8      	; 0x128 <startADC>
	adcCompletedFlag = 0;
     130:	10 92 69 03 	sts	0x0369, r1
}

void waitValueIsReady(void)
{
	//adcCompletedFlag = 0;		
	while (adcCompletedFlag == 0){}
     134:	80 91 69 03 	lds	r24, 0x0369
     138:	88 23       	and	r24, r24
     13a:	e1 f3       	breq	.-8      	; 0x134 <startADC+0xc>

	adcCompletedFlag = 0;
     13c:	10 92 69 03 	sts	0x0369, r1
	while (adcCompletedFlag == 0){}
     140:	80 91 69 03 	lds	r24, 0x0369
     144:	88 23       	and	r24, r24
     146:	e1 f3       	breq	.-8      	; 0x140 <startADC+0x18>
void startADC(void)
{
	while (adcCompletedFlag == 0) {}
	adcCompletedFlag = 0;
	waitValueIsReady();
	while (adcCompletedFlag == 0) {}
     148:	80 91 69 03 	lds	r24, 0x0369
     14c:	88 23       	and	r24, r24
     14e:	e1 f3       	breq	.-8      	; 0x148 <startADC+0x20>
	adcCompletedFlag = 0;
     150:	10 92 69 03 	sts	0x0369, r1
}
     154:	08 95       	ret

00000156 <stopADC>:

void stopADC(void)
{
	while (adcCompletedFlag == 1) {}
     156:	80 91 69 03 	lds	r24, 0x0369
     15a:	81 30       	cpi	r24, 0x01	; 1
     15c:	e1 f3       	breq	.-8      	; 0x156 <stopADC>
	adcCompletedFlag = 1;
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	80 93 69 03 	sts	0x0369, r24
}
     164:	08 95       	ret

00000166 <initADC>:
//
//Return value:	-none
//
///////////////////////////////////////////
void initADC(void)
{
     166:	ef 92       	push	r14
     168:	ff 92       	push	r15
     16a:	0f 93       	push	r16
     16c:	1f 93       	push	r17
	//ADCSRA = (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN)|(1<<ADIE)|(1<<ADSC);

	SFIOR = (0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0);
     16e:	10 be       	out	0x30, r1	; 48

	//adcMUXValue = ADC_MUX_READ_LEFT;
	//ADMUX = adcMUXValue;
	ADMUX = ADC_MUX_READ_LEFT;
     170:	17 b8       	out	0x07, r1	; 7
	adcMUXValue = ADC_MUX_READ_LEFT;
     172:	10 92 8f 03 	sts	0x038F, r1
	
	ADCSRA = (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN)|(1<<ADIE)|(1<<ADSC)|(1<<ADATE);
     176:	8f ee       	ldi	r24, 0xEF	; 239
     178:	86 b9       	out	0x06, r24	; 6

	adcCalibrationFlag = 0;
     17a:	10 92 ca 03 	sts	0x03CA, r1
	adcValuesCounter = 0;
     17e:	10 92 67 05 	sts	0x0567, r1
     182:	10 92 66 05 	sts	0x0566, r1
	TotalValueRight = 0;
     186:	10 92 65 05 	sts	0x0565, r1
     18a:	10 92 64 05 	sts	0x0564, r1
	TotalValueLeft = 0;
     18e:	10 92 9d 03 	sts	0x039D, r1
     192:	10 92 9c 03 	sts	0x039C, r1
	// Initiatlisation des valeurs limites précalibration
	// Entre -1023 et -0; 0 et 1023.
	/* Inutile
	leftLimits.adcMaxValueHigh = MAX_ADC_VALUE;
	leftLimits.adcMaxValueLow = MAX_ADC_VALUE; */
	leftLimits.posMax = (float)MAX_ADC_VALUE;
     196:	0f 2e       	mov	r0, r31
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	ef 2e       	mov	r14, r31
     19c:	f0 ec       	ldi	r31, 0xC0	; 192
     19e:	ff 2e       	mov	r15, r31
     1a0:	ff e7       	ldi	r31, 0x7F	; 127
     1a2:	0f 2f       	mov	r16, r31
     1a4:	f4 e4       	ldi	r31, 0x44	; 68
     1a6:	1f 2f       	mov	r17, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	e0 92 9e 03 	sts	0x039E, r14
     1ae:	f0 92 9f 03 	sts	0x039F, r15
     1b2:	00 93 a0 03 	sts	0x03A0, r16
     1b6:	10 93 a1 03 	sts	0x03A1, r17
	leftLimits.negMax = (float)((-1)*MAX_ADC_VALUE);
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 ec       	ldi	r19, 0xC0	; 192
     1be:	4f e7       	ldi	r20, 0x7F	; 127
     1c0:	54 ec       	ldi	r21, 0xC4	; 196
     1c2:	20 93 a2 03 	sts	0x03A2, r18
     1c6:	30 93 a3 03 	sts	0x03A3, r19
     1ca:	40 93 a4 03 	sts	0x03A4, r20
     1ce:	50 93 a5 03 	sts	0x03A5, r21
	leftLimits.posZero = 0.0;
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	a0 e0       	ldi	r26, 0x00	; 0
     1d8:	b0 e0       	ldi	r27, 0x00	; 0
     1da:	80 93 a6 03 	sts	0x03A6, r24
     1de:	90 93 a7 03 	sts	0x03A7, r25
     1e2:	a0 93 a8 03 	sts	0x03A8, r26
     1e6:	b0 93 a9 03 	sts	0x03A9, r27
	leftLimits.negZero = 0.0;
     1ea:	80 93 aa 03 	sts	0x03AA, r24
     1ee:	90 93 ab 03 	sts	0x03AB, r25
     1f2:	a0 93 ac 03 	sts	0x03AC, r26
     1f6:	b0 93 ad 03 	sts	0x03AD, r27
	
	/* Inutile
	rightLimits.adcMaxValueHigh = MAX_ADC_VALUE;
	rightLimits.adcMaxValueLow = MAX_ADC_VALUE; */
	rightLimits.posMax = (float)MAX_ADC_VALUE;
     1fa:	e0 92 a4 02 	sts	0x02A4, r14
     1fe:	f0 92 a5 02 	sts	0x02A5, r15
     202:	00 93 a6 02 	sts	0x02A6, r16
     206:	10 93 a7 02 	sts	0x02A7, r17
	rightLimits.negMax = (float)((-1)*MAX_ADC_VALUE);
     20a:	20 93 a8 02 	sts	0x02A8, r18
     20e:	30 93 a9 02 	sts	0x02A9, r19
     212:	40 93 aa 02 	sts	0x02AA, r20
     216:	50 93 ab 02 	sts	0x02AB, r21
	rightLimits.posZero = 0.0;
     21a:	80 93 ac 02 	sts	0x02AC, r24
     21e:	90 93 ad 02 	sts	0x02AD, r25
     222:	a0 93 ae 02 	sts	0x02AE, r26
     226:	b0 93 af 02 	sts	0x02AF, r27
	rightLimits.negZero = 0.0;
     22a:	80 93 b0 02 	sts	0x02B0, r24
     22e:	90 93 b1 02 	sts	0x02B1, r25
     232:	a0 93 b2 02 	sts	0x02B2, r26
     236:	b0 93 b3 02 	sts	0x02B3, r27
	ADMUX = ADC_MUX_READ_RIGHT;
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	87 b9       	out	0x07, r24	; 7
	adcCompileReadyFlag = 0;
     23e:	10 92 68 05 	sts	0x0568, r1
	
	

}
     242:	1f 91       	pop	r17
     244:	0f 91       	pop	r16
     246:	ff 90       	pop	r15
     248:	ef 90       	pop	r14
     24a:	08 95       	ret

0000024c <fetchAdcValues>:
//
///////////////////////////////////////////
void fetchAdcValues(void)
{
	//from ADC... to integer
	if (adcMUXValue == ADC_MUX_READ_LEFT)
     24c:	80 91 8f 03 	lds	r24, 0x038F
     250:	88 23       	and	r24, r24
     252:	e9 f4       	brne	.+58     	; 0x28e <fetchAdcValues+0x42>
	{
		adcMUXValue = ADC_MUX_READ_RIGHT;
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	80 93 8f 03 	sts	0x038F, r24
		ADMUX = ADC_MUX_READ_LEFT;
     25a:	17 b8       	out	0x07, r1	; 7

		TotalValueLeft += (int)((unsigned char)ADCL);
     25c:	80 91 9c 03 	lds	r24, 0x039C
     260:	90 91 9d 03 	lds	r25, 0x039D
     264:	24 b1       	in	r18, 0x04	; 4
     266:	82 0f       	add	r24, r18
     268:	91 1d       	adc	r25, r1
     26a:	90 93 9d 03 	sts	0x039D, r25
     26e:	80 93 9c 03 	sts	0x039C, r24
		TotalValueLeft += (int)(((int)((unsigned char)ADCH))<<8);
     272:	40 91 9c 03 	lds	r20, 0x039C
     276:	50 91 9d 03 	lds	r21, 0x039D
     27a:	25 b1       	in	r18, 0x05	; 5
     27c:	92 2f       	mov	r25, r18
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	84 0f       	add	r24, r20
     282:	95 1f       	adc	r25, r21
     284:	90 93 9d 03 	sts	0x039D, r25
     288:	80 93 9c 03 	sts	0x039C, r24
     28c:	08 95       	ret


	}
	else if (adcMUXValue == ADC_MUX_READ_RIGHT)
     28e:	80 91 8f 03 	lds	r24, 0x038F
     292:	81 30       	cpi	r24, 0x01	; 1
     294:	21 f5       	brne	.+72     	; 0x2de <fetchAdcValues+0x92>
	{
		adcMUXValue = ADC_MUX_READ_LEFT;
     296:	10 92 8f 03 	sts	0x038F, r1
		ADMUX = ADC_MUX_READ_RIGHT;
     29a:	87 b9       	out	0x07, r24	; 7

		TotalValueRight += (int)((unsigned char)ADCL);
     29c:	80 91 64 05 	lds	r24, 0x0564
     2a0:	90 91 65 05 	lds	r25, 0x0565
     2a4:	24 b1       	in	r18, 0x04	; 4
     2a6:	82 0f       	add	r24, r18
     2a8:	91 1d       	adc	r25, r1
     2aa:	90 93 65 05 	sts	0x0565, r25
     2ae:	80 93 64 05 	sts	0x0564, r24
		TotalValueRight += (int)(((int)((unsigned char)ADCH))<<8);
     2b2:	40 91 64 05 	lds	r20, 0x0564
     2b6:	50 91 65 05 	lds	r21, 0x0565
     2ba:	25 b1       	in	r18, 0x05	; 5
     2bc:	92 2f       	mov	r25, r18
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	84 0f       	add	r24, r20
     2c2:	95 1f       	adc	r25, r21
     2c4:	90 93 65 05 	sts	0x0565, r25
     2c8:	80 93 64 05 	sts	0x0564, r24
	

		adcValuesCounter++;
     2cc:	80 91 66 05 	lds	r24, 0x0566
     2d0:	90 91 67 05 	lds	r25, 0x0567
     2d4:	01 96       	adiw	r24, 0x01	; 1
     2d6:	90 93 67 05 	sts	0x0567, r25
     2da:	80 93 66 05 	sts	0x0566, r24
     2de:	08 95       	ret

000002e0 <readADC>:
//Return value:	-none
//
///////////////////////////////////////////
void readADC(void)
{
	if (adcCompileReadyFlag == 0)
     2e0:	80 91 68 05 	lds	r24, 0x0568
     2e4:	88 23       	and	r24, r24
     2e6:	11 f4       	brne	.+4      	; 0x2ec <readADC+0xc>
		fetchAdcValues();	
     2e8:	0e 94 26 01 	call	0x24c	; 0x24c <fetchAdcValues>

	if (adcValuesCounter == MAX_ADC_SAMPLES)
     2ec:	80 91 66 05 	lds	r24, 0x0566
     2f0:	90 91 67 05 	lds	r25, 0x0567
     2f4:	44 97       	sbiw	r24, 0x14	; 20
     2f6:	19 f4       	brne	.+6      	; 0x2fe <readADC+0x1e>
	{
		adcCompileReadyFlag = 1;
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	80 93 68 05 	sts	0x0568, r24
     2fe:	08 95       	ret

00000300 <__vector_16>:
/***************************/
/***Function definitions****/
/***************************/

ISR(ADC_vect)
{
     300:	1f 92       	push	r1
     302:	0f 92       	push	r0
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	0f 92       	push	r0
     308:	11 24       	eor	r1, r1
     30a:	2f 93       	push	r18
     30c:	3f 93       	push	r19
     30e:	4f 93       	push	r20
     310:	5f 93       	push	r21
     312:	6f 93       	push	r22
     314:	7f 93       	push	r23
     316:	8f 93       	push	r24
     318:	9f 93       	push	r25
     31a:	af 93       	push	r26
     31c:	bf 93       	push	r27
     31e:	ef 93       	push	r30
     320:	ff 93       	push	r31
	if (adcCompletedFlag == 0)
     322:	80 91 69 03 	lds	r24, 0x0369
     326:	88 23       	and	r24, r24
     328:	11 f4       	brne	.+4      	; 0x32e <__vector_16+0x2e>
		readADC();
     32a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <readADC>
}
     32e:	ff 91       	pop	r31
     330:	ef 91       	pop	r30
     332:	bf 91       	pop	r27
     334:	af 91       	pop	r26
     336:	9f 91       	pop	r25
     338:	8f 91       	pop	r24
     33a:	7f 91       	pop	r23
     33c:	6f 91       	pop	r22
     33e:	5f 91       	pop	r21
     340:	4f 91       	pop	r20
     342:	3f 91       	pop	r19
     344:	2f 91       	pop	r18
     346:	0f 90       	pop	r0
     348:	0f be       	out	0x3f, r0	; 63
     34a:	0f 90       	pop	r0
     34c:	1f 90       	pop	r1
     34e:	18 95       	reti

00000350 <compileAdcData>:
//
//Return value:	-none
//
///////////////////////////////////////////
void compileAdcData(void)
{	
     350:	6f 92       	push	r6
     352:	7f 92       	push	r7
     354:	8f 92       	push	r8
     356:	9f 92       	push	r9
     358:	af 92       	push	r10
     35a:	bf 92       	push	r11
     35c:	cf 92       	push	r12
     35e:	df 92       	push	r13
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
	//cli();


	//LEFT MOTOR
	//adcValues.left = TotalValueLeft * MAX_ADC_SAMPLES_RATIO;
	adcValues.left = TotalValueLeft / MAX_ADC_SAMPLES; 
     368:	80 91 9c 03 	lds	r24, 0x039C
     36c:	90 91 9d 03 	lds	r25, 0x039D
     370:	64 e1       	ldi	r22, 0x14	; 20
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	0e 94 23 28 	call	0x5046	; 0x5046 <__udivmodhi4>
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <__floatunsisf>
     380:	60 93 9a 02 	sts	0x029A, r22
     384:	70 93 9b 02 	sts	0x029B, r23
     388:	80 93 9c 02 	sts	0x029C, r24
     38c:	90 93 9d 02 	sts	0x029D, r25
	adcValues.right = TotalValueRight / MAX_ADC_SAMPLES;
     390:	80 91 64 05 	lds	r24, 0x0564
     394:	90 91 65 05 	lds	r25, 0x0565
     398:	64 e1       	ldi	r22, 0x14	; 20
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	0e 94 23 28 	call	0x5046	; 0x5046 <__udivmodhi4>
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <__floatunsisf>
     3a8:	60 93 9e 02 	sts	0x029E, r22
     3ac:	70 93 9f 02 	sts	0x029F, r23
     3b0:	80 93 a0 02 	sts	0x02A0, r24
     3b4:	90 93 a1 02 	sts	0x02A1, r25
	//Check motor direction input
	if (MOTOR_DIR_IN_LEFT & PINA)
     3b8:	ca 9b       	sbis	0x19, 2	; 25
     3ba:	59 c0       	rjmp	.+178    	; 0x46e <compileAdcData+0x11e>
	//BACKWARD
	{
		adcValues.left = ((-1)*(adcValues.left)); //adcValues sur 1024
     3bc:	80 91 9a 02 	lds	r24, 0x029A
     3c0:	90 91 9b 02 	lds	r25, 0x029B
     3c4:	a0 91 9c 02 	lds	r26, 0x029C
     3c8:	b0 91 9d 02 	lds	r27, 0x029D
     3cc:	b0 58       	subi	r27, 0x80	; 128
     3ce:	80 93 9a 02 	sts	0x029A, r24
     3d2:	90 93 9b 02 	sts	0x029B, r25
     3d6:	a0 93 9c 02 	sts	0x029C, r26
     3da:	b0 93 9d 02 	sts	0x029D, r27

		if (adcValues.left < leftLimits.negZero)  // Comparaison avec valeur sur 1
     3de:	60 91 9a 02 	lds	r22, 0x029A
     3e2:	70 91 9b 02 	lds	r23, 0x029B
     3e6:	80 91 9c 02 	lds	r24, 0x029C
     3ea:	90 91 9d 02 	lds	r25, 0x029D
     3ee:	60 90 aa 03 	lds	r6, 0x03AA
     3f2:	70 90 ab 03 	lds	r7, 0x03AB
     3f6:	80 90 ac 03 	lds	r8, 0x03AC
     3fa:	90 90 ad 03 	lds	r9, 0x03AD
     3fe:	a4 01       	movw	r20, r8
     400:	93 01       	movw	r18, r6
     402:	0e 94 a3 24 	call	0x4946	; 0x4946 <__ltsf2>
     406:	88 23       	and	r24, r24
     408:	0c f0       	brlt	.+2      	; 0x40c <compileAdcData+0xbc>
     40a:	89 c0       	rjmp	.+274    	; 0x51e <compileAdcData+0x1ce>
		{
			//adcValues.left -= leftLimits.negZero; //REMOVE
			if (adcValues.left < leftLimits.negMax)
     40c:	60 91 9a 02 	lds	r22, 0x029A
     410:	70 91 9b 02 	lds	r23, 0x029B
     414:	80 91 9c 02 	lds	r24, 0x029C
     418:	90 91 9d 02 	lds	r25, 0x029D
     41c:	a0 90 a2 03 	lds	r10, 0x03A2
     420:	b0 90 a3 03 	lds	r11, 0x03A3
     424:	c0 90 a4 03 	lds	r12, 0x03A4
     428:	d0 90 a5 03 	lds	r13, 0x03A5
     42c:	a6 01       	movw	r20, r12
     42e:	95 01       	movw	r18, r10
     430:	0e 94 a3 24 	call	0x4946	; 0x4946 <__ltsf2>
     434:	88 23       	and	r24, r24
     436:	44 f4       	brge	.+16     	; 0x448 <compileAdcData+0xf8>
			{
				adcValues.left = leftLimits.negMax;
     438:	a0 92 9a 02 	sts	0x029A, r10
     43c:	b0 92 9b 02 	sts	0x029B, r11
     440:	c0 92 9c 02 	sts	0x029C, r12
     444:	d0 92 9d 02 	sts	0x029D, r13
			}
			//On ramène sur 1
			adcValues.left = (-1) * (adcValues.left-leftLimits.negZero) / (leftLimits.negMax-leftLimits.negZero);
     448:	60 91 9a 02 	lds	r22, 0x029A
     44c:	70 91 9b 02 	lds	r23, 0x029B
     450:	80 91 9c 02 	lds	r24, 0x029C
     454:	90 91 9d 02 	lds	r25, 0x029D
     458:	a4 01       	movw	r20, r8
     45a:	93 01       	movw	r18, r6
     45c:	0e 94 3f 22 	call	0x447e	; 0x447e <__subsf3>
     460:	7b 01       	movw	r14, r22
     462:	8c 01       	movw	r16, r24
     464:	17 fb       	bst	r17, 7
     466:	10 95       	com	r17
     468:	17 f9       	bld	r17, 7
     46a:	10 95       	com	r17
     46c:	43 c0       	rjmp	.+134    	; 0x4f4 <compileAdcData+0x1a4>
		}
	}
	else
	//FORWARD
	{
		if (adcValues.left > leftLimits.posZero)
     46e:	60 91 9a 02 	lds	r22, 0x029A
     472:	70 91 9b 02 	lds	r23, 0x029B
     476:	80 91 9c 02 	lds	r24, 0x029C
     47a:	90 91 9d 02 	lds	r25, 0x029D
     47e:	60 90 a6 03 	lds	r6, 0x03A6
     482:	70 90 a7 03 	lds	r7, 0x03A7
     486:	80 90 a8 03 	lds	r8, 0x03A8
     48a:	90 90 a9 03 	lds	r9, 0x03A9
     48e:	a4 01       	movw	r20, r8
     490:	93 01       	movw	r18, r6
     492:	0e 94 43 24 	call	0x4886	; 0x4886 <__gtsf2>
     496:	18 16       	cp	r1, r24
     498:	0c f0       	brlt	.+2      	; 0x49c <compileAdcData+0x14c>
     49a:	41 c0       	rjmp	.+130    	; 0x51e <compileAdcData+0x1ce>
		{
		//	adcValues.left -= leftLimits.posZero; //REMOVE
			if (adcValues.left > leftLimits.posMax)
     49c:	60 91 9a 02 	lds	r22, 0x029A
     4a0:	70 91 9b 02 	lds	r23, 0x029B
     4a4:	80 91 9c 02 	lds	r24, 0x029C
     4a8:	90 91 9d 02 	lds	r25, 0x029D
     4ac:	a0 90 9e 03 	lds	r10, 0x039E
     4b0:	b0 90 9f 03 	lds	r11, 0x039F
     4b4:	c0 90 a0 03 	lds	r12, 0x03A0
     4b8:	d0 90 a1 03 	lds	r13, 0x03A1
     4bc:	a6 01       	movw	r20, r12
     4be:	95 01       	movw	r18, r10
     4c0:	0e 94 43 24 	call	0x4886	; 0x4886 <__gtsf2>
     4c4:	18 16       	cp	r1, r24
     4c6:	44 f4       	brge	.+16     	; 0x4d8 <compileAdcData+0x188>
			{
				adcValues.left = leftLimits.posMax;
     4c8:	a0 92 9a 02 	sts	0x029A, r10
     4cc:	b0 92 9b 02 	sts	0x029B, r11
     4d0:	c0 92 9c 02 	sts	0x029C, r12
     4d4:	d0 92 9d 02 	sts	0x029D, r13
			}
			adcValues.left = (adcValues.left-leftLimits.posZero) / (leftLimits.posMax-leftLimits.posZero);
     4d8:	60 91 9a 02 	lds	r22, 0x029A
     4dc:	70 91 9b 02 	lds	r23, 0x029B
     4e0:	80 91 9c 02 	lds	r24, 0x029C
     4e4:	90 91 9d 02 	lds	r25, 0x029D
     4e8:	a4 01       	movw	r20, r8
     4ea:	93 01       	movw	r18, r6
     4ec:	0e 94 3f 22 	call	0x447e	; 0x447e <__subsf3>
     4f0:	7b 01       	movw	r14, r22
     4f2:	8c 01       	movw	r16, r24
     4f4:	c6 01       	movw	r24, r12
     4f6:	b5 01       	movw	r22, r10
     4f8:	a4 01       	movw	r20, r8
     4fa:	93 01       	movw	r18, r6
     4fc:	0e 94 3f 22 	call	0x447e	; 0x447e <__subsf3>
     500:	9b 01       	movw	r18, r22
     502:	ac 01       	movw	r20, r24
     504:	c8 01       	movw	r24, r16
     506:	b7 01       	movw	r22, r14
     508:	0e 94 97 23 	call	0x472e	; 0x472e <__divsf3>
     50c:	60 93 9a 02 	sts	0x029A, r22
     510:	70 93 9b 02 	sts	0x029B, r23
     514:	80 93 9c 02 	sts	0x029C, r24
     518:	90 93 9d 02 	sts	0x029D, r25
     51c:	0c c0       	rjmp	.+24     	; 0x536 <compileAdcData+0x1e6>
			//adcValues.left = (adcValues.left-leftLimits.posZero) / leftLimits.adcMaxValueHigh; //adcValues sur 1
		}
		else
		{
			//adcValues.left = 0.0; Non, la valeur doit être ramené à posZero
			adcValues.left = 0.0;
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	80 93 9a 02 	sts	0x029A, r24
     52a:	90 93 9b 02 	sts	0x029B, r25
     52e:	a0 93 9c 02 	sts	0x029C, r26
     532:	b0 93 9d 02 	sts	0x029D, r27

	//RIGHT MOTOR
	//adcValues.right = TotalValueRight * MAX_ADC_SAMPLES_RATIO;
	//adcValues.right = ActualValueRight / MAX_ADC_SAMPLES;
	//Check motor direction input
	if (MOTOR_DIR_IN_RIGHT & PINA)
     536:	cb 9b       	sbis	0x19, 3	; 25
     538:	69 c0       	rjmp	.+210    	; 0x60c <compileAdcData+0x2bc>
	//BACKWARD
	{
		adcValues.right = ((-1)*adcValues.right); //adcValues sur 1024
     53a:	80 91 9e 02 	lds	r24, 0x029E
     53e:	90 91 9f 02 	lds	r25, 0x029F
     542:	a0 91 a0 02 	lds	r26, 0x02A0
     546:	b0 91 a1 02 	lds	r27, 0x02A1
     54a:	b0 58       	subi	r27, 0x80	; 128
     54c:	80 93 9e 02 	sts	0x029E, r24
     550:	90 93 9f 02 	sts	0x029F, r25
     554:	a0 93 a0 02 	sts	0x02A0, r26
     558:	b0 93 a1 02 	sts	0x02A1, r27
		if (adcValues.right < rightLimits.negZero)
     55c:	60 91 9e 02 	lds	r22, 0x029E
     560:	70 91 9f 02 	lds	r23, 0x029F
     564:	80 91 a0 02 	lds	r24, 0x02A0
     568:	90 91 a1 02 	lds	r25, 0x02A1
     56c:	a0 90 b0 02 	lds	r10, 0x02B0
     570:	b0 90 b1 02 	lds	r11, 0x02B1
     574:	c0 90 b2 02 	lds	r12, 0x02B2
     578:	d0 90 b3 02 	lds	r13, 0x02B3
     57c:	a6 01       	movw	r20, r12
     57e:	95 01       	movw	r18, r10
     580:	0e 94 a3 24 	call	0x4946	; 0x4946 <__ltsf2>
     584:	88 23       	and	r24, r24
     586:	0c f0       	brlt	.+2      	; 0x58a <compileAdcData+0x23a>
     588:	99 c0       	rjmp	.+306    	; 0x6bc <compileAdcData+0x36c>
		{
			//adcValues.right -= rightLimits.negZero; //REMOVE
			if (adcValues.right < leftLimits.negMax)
     58a:	60 91 9e 02 	lds	r22, 0x029E
     58e:	70 91 9f 02 	lds	r23, 0x029F
     592:	80 91 a0 02 	lds	r24, 0x02A0
     596:	90 91 a1 02 	lds	r25, 0x02A1
     59a:	20 91 a2 03 	lds	r18, 0x03A2
     59e:	30 91 a3 03 	lds	r19, 0x03A3
     5a2:	40 91 a4 03 	lds	r20, 0x03A4
     5a6:	50 91 a5 03 	lds	r21, 0x03A5
     5aa:	0e 94 a3 24 	call	0x4946	; 0x4946 <__ltsf2>
     5ae:	88 23       	and	r24, r24
     5b0:	84 f4       	brge	.+32     	; 0x5d2 <compileAdcData+0x282>
			{
				adcValues.right = rightLimits.negMax;
     5b2:	80 91 a8 02 	lds	r24, 0x02A8
     5b6:	90 91 a9 02 	lds	r25, 0x02A9
     5ba:	a0 91 aa 02 	lds	r26, 0x02AA
     5be:	b0 91 ab 02 	lds	r27, 0x02AB
     5c2:	80 93 9e 02 	sts	0x029E, r24
     5c6:	90 93 9f 02 	sts	0x029F, r25
     5ca:	a0 93 a0 02 	sts	0x02A0, r26
     5ce:	b0 93 a1 02 	sts	0x02A1, r27
			}
			adcValues.right = (-1) * (adcValues.right-rightLimits.negZero) / (rightLimits.negMax-rightLimits.negZero);
     5d2:	60 91 9e 02 	lds	r22, 0x029E
     5d6:	70 91 9f 02 	lds	r23, 0x029F
     5da:	80 91 a0 02 	lds	r24, 0x02A0
     5de:	90 91 a1 02 	lds	r25, 0x02A1
     5e2:	a6 01       	movw	r20, r12
     5e4:	95 01       	movw	r18, r10
     5e6:	0e 94 3f 22 	call	0x447e	; 0x447e <__subsf3>
     5ea:	7b 01       	movw	r14, r22
     5ec:	8c 01       	movw	r16, r24
     5ee:	17 fb       	bst	r17, 7
     5f0:	10 95       	com	r17
     5f2:	17 f9       	bld	r17, 7
     5f4:	10 95       	com	r17
     5f6:	60 91 a8 02 	lds	r22, 0x02A8
     5fa:	70 91 a9 02 	lds	r23, 0x02A9
     5fe:	80 91 aa 02 	lds	r24, 0x02AA
     602:	90 91 ab 02 	lds	r25, 0x02AB
     606:	a6 01       	movw	r20, r12
     608:	95 01       	movw	r18, r10
     60a:	47 c0       	rjmp	.+142    	; 0x69a <compileAdcData+0x34a>
		}
	}
	else
	//FORWARD
	{
		if (adcValues.right > rightLimits.posZero)
     60c:	60 91 9e 02 	lds	r22, 0x029E
     610:	70 91 9f 02 	lds	r23, 0x029F
     614:	80 91 a0 02 	lds	r24, 0x02A0
     618:	90 91 a1 02 	lds	r25, 0x02A1
     61c:	60 90 ac 02 	lds	r6, 0x02AC
     620:	70 90 ad 02 	lds	r7, 0x02AD
     624:	80 90 ae 02 	lds	r8, 0x02AE
     628:	90 90 af 02 	lds	r9, 0x02AF
     62c:	a4 01       	movw	r20, r8
     62e:	93 01       	movw	r18, r6
     630:	0e 94 43 24 	call	0x4886	; 0x4886 <__gtsf2>
     634:	18 16       	cp	r1, r24
     636:	0c f0       	brlt	.+2      	; 0x63a <compileAdcData+0x2ea>
     638:	41 c0       	rjmp	.+130    	; 0x6bc <compileAdcData+0x36c>
		{
		//	adcValues.right -= rightLimits.posZero; //REMOVE
			if (adcValues.right > rightLimits.posMax)
     63a:	60 91 9e 02 	lds	r22, 0x029E
     63e:	70 91 9f 02 	lds	r23, 0x029F
     642:	80 91 a0 02 	lds	r24, 0x02A0
     646:	90 91 a1 02 	lds	r25, 0x02A1
     64a:	a0 90 a4 02 	lds	r10, 0x02A4
     64e:	b0 90 a5 02 	lds	r11, 0x02A5
     652:	c0 90 a6 02 	lds	r12, 0x02A6
     656:	d0 90 a7 02 	lds	r13, 0x02A7
     65a:	a6 01       	movw	r20, r12
     65c:	95 01       	movw	r18, r10
     65e:	0e 94 43 24 	call	0x4886	; 0x4886 <__gtsf2>
     662:	18 16       	cp	r1, r24
     664:	44 f4       	brge	.+16     	; 0x676 <compileAdcData+0x326>
			{
				adcValues.right = rightLimits.posMax; 
     666:	a0 92 9e 02 	sts	0x029E, r10
     66a:	b0 92 9f 02 	sts	0x029F, r11
     66e:	c0 92 a0 02 	sts	0x02A0, r12
     672:	d0 92 a1 02 	sts	0x02A1, r13
			}
			adcValues.right = (adcValues.right-rightLimits.posZero) / (rightLimits.posMax-rightLimits.posZero);
     676:	60 91 9e 02 	lds	r22, 0x029E
     67a:	70 91 9f 02 	lds	r23, 0x029F
     67e:	80 91 a0 02 	lds	r24, 0x02A0
     682:	90 91 a1 02 	lds	r25, 0x02A1
     686:	a4 01       	movw	r20, r8
     688:	93 01       	movw	r18, r6
     68a:	0e 94 3f 22 	call	0x447e	; 0x447e <__subsf3>
     68e:	7b 01       	movw	r14, r22
     690:	8c 01       	movw	r16, r24
     692:	c6 01       	movw	r24, r12
     694:	b5 01       	movw	r22, r10
     696:	a4 01       	movw	r20, r8
     698:	93 01       	movw	r18, r6
     69a:	0e 94 3f 22 	call	0x447e	; 0x447e <__subsf3>
     69e:	9b 01       	movw	r18, r22
     6a0:	ac 01       	movw	r20, r24
     6a2:	c8 01       	movw	r24, r16
     6a4:	b7 01       	movw	r22, r14
     6a6:	0e 94 97 23 	call	0x472e	; 0x472e <__divsf3>
     6aa:	60 93 9e 02 	sts	0x029E, r22
     6ae:	70 93 9f 02 	sts	0x029F, r23
     6b2:	80 93 a0 02 	sts	0x02A0, r24
     6b6:	90 93 a1 02 	sts	0x02A1, r25
     6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <compileAdcData+0x384>
			//adcValues.right = adcValues.right / rightLimits.adcMaxValueHigh; //adcValues sur 1
		}
		else
		{
			//adcValues.right = 0.0; NOPE
			adcValues.right = 0.0;
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	a0 e0       	ldi	r26, 0x00	; 0
     6c2:	b0 e0       	ldi	r27, 0x00	; 0
     6c4:	80 93 9e 02 	sts	0x029E, r24
     6c8:	90 93 9f 02 	sts	0x029F, r25
     6cc:	a0 93 a0 02 	sts	0x02A0, r26
     6d0:	b0 93 a1 02 	sts	0x02A1, r27
	
		
//	sei();

	//reset values
	TotalValueRight = 0;
     6d4:	10 92 65 05 	sts	0x0565, r1
     6d8:	10 92 64 05 	sts	0x0564, r1
	TotalValueLeft = 0;
     6dc:	10 92 9d 03 	sts	0x039D, r1
     6e0:	10 92 9c 03 	sts	0x039C, r1
	adcValuesCounter = 0;
     6e4:	10 92 67 05 	sts	0x0567, r1
     6e8:	10 92 66 05 	sts	0x0566, r1
	adcCompletedFlag = 1;
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	80 93 69 03 	sts	0x0369, r24
}
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	ff 90       	pop	r15
     6f8:	ef 90       	pop	r14
     6fa:	df 90       	pop	r13
     6fc:	cf 90       	pop	r12
     6fe:	bf 90       	pop	r11
     700:	af 90       	pop	r10
     702:	9f 90       	pop	r9
     704:	8f 90       	pop	r8
     706:	7f 90       	pop	r7
     708:	6f 90       	pop	r6
     70a:	08 95       	ret

0000070c <checkForAdc>:
//
//Return value:	-none
//
///////////////////////////////////////////
void checkForAdc(void)
{
     70c:	1f 93       	push	r17
	if (adcCompileReadyFlag == 1)
     70e:	10 91 68 05 	lds	r17, 0x0568
     712:	11 30       	cpi	r17, 0x01	; 1
     714:	31 f4       	brne	.+12     	; 0x722 <checkForAdc+0x16>
	{	
		compileAdcData();
     716:	0e 94 a8 01 	call	0x350	; 0x350 <compileAdcData>
		adcCompileReadyFlag = 0;
     71a:	10 92 68 05 	sts	0x0568, r1
		motorReadyFlag = 1;
     71e:	10 93 cb 03 	sts	0x03CB, r17
	}
}
     722:	1f 91       	pop	r17
     724:	08 95       	ret

00000726 <calibrateMotors>:
	adcValuesCounter = 0;
	adcCompletedFlag = 1;
}

void calibrateMotors(void)
{
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
	ADCcalib_value = 0.0;
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	a0 e0       	ldi	r26, 0x00	; 0
     734:	b0 e0       	ldi	r27, 0x00	; 0
     736:	80 93 c8 02 	sts	0x02C8, r24
     73a:	90 93 c9 02 	sts	0x02C9, r25
     73e:	a0 93 ca 02 	sts	0x02CA, r26
     742:	b0 93 cb 02 	sts	0x02CB, r27
	adcCalibrationFlag = 1;
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	80 93 ca 03 	sts	0x03CA, r24
	//adcCompileReadyFlag = 1;
	//CA SERT A RIEN CE QUE JE FAIT POUR L'INSTANT... C'EST SUR LE RANGE QU'IL FAUT INTERPRÉTER LA DIFFÉRENCE
	//SINON C'EST JUSTE PLUS FACILE D'ATTEINDRE LES LIMITES
	//make sure motors are stopped
	OCR1AL = 0;
     74c:	1a bc       	out	0x2a, r1	; 42
	OCR1AH = 0;
     74e:	1b bc       	out	0x2b, r1	; 43
	OCR1BL = 0;
     750:	18 bc       	out	0x28, r1	; 40
	OCR1BH = 0;
     752:	19 bc       	out	0x29, r1	; 41
	/*#######################*/
	/* LEFT MOTOR CALIBRATION*/
	/*#######################*/

	// Left Max Forward Calibration
	PORTD = (LEFT_MOTOR_FORWARD)|(RIGHT_MOTOR_STOP);
     754:	84 e0       	ldi	r24, 0x04	; 4
     756:	82 bb       	out	0x12, r24	; 18
	PORTA = (1<<CALIB_BIT);
     758:	80 e1       	ldi	r24, 0x10	; 16
     75a:	8b bb       	out	0x1b, r24	; 27
	
	patate2 = 0;
     75c:	10 92 70 03 	sts	0x0370, r1

	for (i=0;i<CAL_SAMPLES;i++){
     760:	10 92 94 03 	sts	0x0394, r1
     764:	25 c0       	rjmp	.+74     	; 0x7b0 <calibrateMotors+0x8a>
		while (adcCompileReadyFlag == 0);
     766:	80 91 68 05 	lds	r24, 0x0568
     76a:	88 23       	and	r24, r24
     76c:	e1 f3       	breq	.-8      	; 0x766 <calibrateMotors+0x40>
		compileAdcData();
     76e:	0e 94 a8 01 	call	0x350	; 0x350 <compileAdcData>
		//waitValueIsReady();
		ADCcalib_value += adcValues.left;
     772:	60 91 c8 02 	lds	r22, 0x02C8
     776:	70 91 c9 02 	lds	r23, 0x02C9
     77a:	80 91 ca 02 	lds	r24, 0x02CA
     77e:	90 91 cb 02 	lds	r25, 0x02CB
     782:	20 91 9a 02 	lds	r18, 0x029A
     786:	30 91 9b 02 	lds	r19, 0x029B
     78a:	40 91 9c 02 	lds	r20, 0x029C
     78e:	50 91 9d 02 	lds	r21, 0x029D
     792:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__addsf3>
     796:	60 93 c8 02 	sts	0x02C8, r22
     79a:	70 93 c9 02 	sts	0x02C9, r23
     79e:	80 93 ca 02 	sts	0x02CA, r24
     7a2:	90 93 cb 02 	sts	0x02CB, r25
	PORTD = (LEFT_MOTOR_FORWARD)|(RIGHT_MOTOR_STOP);
	PORTA = (1<<CALIB_BIT);
	
	patate2 = 0;

	for (i=0;i<CAL_SAMPLES;i++){
     7a6:	80 91 94 03 	lds	r24, 0x0394
     7aa:	8f 5f       	subi	r24, 0xFF	; 255
     7ac:	80 93 94 03 	sts	0x0394, r24
     7b0:	80 91 94 03 	lds	r24, 0x0394
     7b4:	89 31       	cpi	r24, 0x19	; 25
     7b6:	b8 f2       	brcs	.-82     	; 0x766 <calibrateMotors+0x40>
		//	PORTB = 0x0F;
		//	while(1);	
		//}
		
	}
	leftLimits.posMaxTEMP = (ADCcalib_value * MAX_ADC_VALUE) / CAL_SAMPLES;
     7b8:	60 91 c8 02 	lds	r22, 0x02C8
     7bc:	70 91 c9 02 	lds	r23, 0x02C9
     7c0:	80 91 ca 02 	lds	r24, 0x02CA
     7c4:	90 91 cb 02 	lds	r25, 0x02CB
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 ec       	ldi	r19, 0xC0	; 192
     7cc:	4f e7       	ldi	r20, 0x7F	; 127
     7ce:	54 e4       	ldi	r21, 0x44	; 68
     7d0:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	48 ec       	ldi	r20, 0xC8	; 200
     7da:	51 e4       	ldi	r21, 0x41	; 65
     7dc:	0e 94 97 23 	call	0x472e	; 0x472e <__divsf3>
     7e0:	60 93 ae 03 	sts	0x03AE, r22
     7e4:	70 93 af 03 	sts	0x03AF, r23
     7e8:	80 93 b0 03 	sts	0x03B0, r24
     7ec:	90 93 b1 03 	sts	0x03B1, r25
	ADCcalib_value = 0.0;
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	a0 e0       	ldi	r26, 0x00	; 0
     7f6:	b0 e0       	ldi	r27, 0x00	; 0
     7f8:	80 93 c8 02 	sts	0x02C8, r24
     7fc:	90 93 c9 02 	sts	0x02C9, r25
     800:	a0 93 ca 02 	sts	0x02CA, r26
     804:	b0 93 cb 02 	sts	0x02CB, r27

	// Left Zero Forward Calibration
	PORTD = (LEFT_MOTOR_FORWARD)|(RIGHT_MOTOR_STOP);
     808:	84 e0       	ldi	r24, 0x04	; 4
     80a:	82 bb       	out	0x12, r24	; 18
	PORTA = (0<<CALIB_BIT);
     80c:	1b ba       	out	0x1b, r1	; 27

	for (i=0;i<CAL_SAMPLES;i++){
     80e:	10 92 94 03 	sts	0x0394, r1
     812:	25 c0       	rjmp	.+74     	; 0x85e <calibrateMotors+0x138>
		while (adcCompileReadyFlag == 0);
     814:	80 91 68 05 	lds	r24, 0x0568
     818:	88 23       	and	r24, r24
     81a:	e1 f3       	breq	.-8      	; 0x814 <calibrateMotors+0xee>
		compileAdcData();
     81c:	0e 94 a8 01 	call	0x350	; 0x350 <compileAdcData>
		//waitValueIsReady();
		ADCcalib_value += adcValues.left;
     820:	60 91 c8 02 	lds	r22, 0x02C8
     824:	70 91 c9 02 	lds	r23, 0x02C9
     828:	80 91 ca 02 	lds	r24, 0x02CA
     82c:	90 91 cb 02 	lds	r25, 0x02CB
     830:	20 91 9a 02 	lds	r18, 0x029A
     834:	30 91 9b 02 	lds	r19, 0x029B
     838:	40 91 9c 02 	lds	r20, 0x029C
     83c:	50 91 9d 02 	lds	r21, 0x029D
     840:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__addsf3>
     844:	60 93 c8 02 	sts	0x02C8, r22
     848:	70 93 c9 02 	sts	0x02C9, r23
     84c:	80 93 ca 02 	sts	0x02CA, r24
     850:	90 93 cb 02 	sts	0x02CB, r25

	// Left Zero Forward Calibration
	PORTD = (LEFT_MOTOR_FORWARD)|(RIGHT_MOTOR_STOP);
	PORTA = (0<<CALIB_BIT);

	for (i=0;i<CAL_SAMPLES;i++){
     854:	80 91 94 03 	lds	r24, 0x0394
     858:	8f 5f       	subi	r24, 0xFF	; 255
     85a:	80 93 94 03 	sts	0x0394, r24
     85e:	80 91 94 03 	lds	r24, 0x0394
     862:	89 31       	cpi	r24, 0x19	; 25
     864:	b8 f2       	brcs	.-82     	; 0x814 <calibrateMotors+0xee>
		while (adcCompileReadyFlag == 0);
		compileAdcData();
		//waitValueIsReady();
		ADCcalib_value += adcValues.left;
	}
	leftLimits.posZeroTEMP = (ADCcalib_value * MAX_ADC_VALUE) / CAL_SAMPLES;
     866:	60 91 c8 02 	lds	r22, 0x02C8
     86a:	70 91 c9 02 	lds	r23, 0x02C9
     86e:	80 91 ca 02 	lds	r24, 0x02CA
     872:	90 91 cb 02 	lds	r25, 0x02CB
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 ec       	ldi	r19, 0xC0	; 192
     87a:	4f e7       	ldi	r20, 0x7F	; 127
     87c:	54 e4       	ldi	r21, 0x44	; 68
     87e:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	48 ec       	ldi	r20, 0xC8	; 200
     888:	51 e4       	ldi	r21, 0x41	; 65
     88a:	0e 94 97 23 	call	0x472e	; 0x472e <__divsf3>
     88e:	60 93 b6 03 	sts	0x03B6, r22
     892:	70 93 b7 03 	sts	0x03B7, r23
     896:	80 93 b8 03 	sts	0x03B8, r24
     89a:	90 93 b9 03 	sts	0x03B9, r25
	ADCcalib_value = 0.0;	
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	a0 e0       	ldi	r26, 0x00	; 0
     8a4:	b0 e0       	ldi	r27, 0x00	; 0
     8a6:	80 93 c8 02 	sts	0x02C8, r24
     8aa:	90 93 c9 02 	sts	0x02C9, r25
     8ae:	a0 93 ca 02 	sts	0x02CA, r26
     8b2:	b0 93 cb 02 	sts	0x02CB, r27

	// Left Max Backward Calibration
	PORTD = (LEFT_MOTOR_BACKWARD)|(RIGHT_MOTOR_STOP);
     8b6:	88 e0       	ldi	r24, 0x08	; 8
     8b8:	82 bb       	out	0x12, r24	; 18
	PORTA = (1<<CALIB_BIT);
     8ba:	80 e1       	ldi	r24, 0x10	; 16
     8bc:	8b bb       	out	0x1b, r24	; 27

	for (i=0;i<CAL_SAMPLES;i++){
     8be:	10 92 94 03 	sts	0x0394, r1
     8c2:	25 c0       	rjmp	.+74     	; 0x90e <__stack+0xaf>
		while (adcCompileReadyFlag == 0);
     8c4:	80 91 68 05 	lds	r24, 0x0568
     8c8:	88 23       	and	r24, r24
     8ca:	e1 f3       	breq	.-8      	; 0x8c4 <__stack+0x65>
		compileAdcData();
     8cc:	0e 94 a8 01 	call	0x350	; 0x350 <compileAdcData>
		//waitValueIsReady();
		ADCcalib_value += adcValues.left;
     8d0:	60 91 c8 02 	lds	r22, 0x02C8
     8d4:	70 91 c9 02 	lds	r23, 0x02C9
     8d8:	80 91 ca 02 	lds	r24, 0x02CA
     8dc:	90 91 cb 02 	lds	r25, 0x02CB
     8e0:	20 91 9a 02 	lds	r18, 0x029A
     8e4:	30 91 9b 02 	lds	r19, 0x029B
     8e8:	40 91 9c 02 	lds	r20, 0x029C
     8ec:	50 91 9d 02 	lds	r21, 0x029D
     8f0:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__addsf3>
     8f4:	60 93 c8 02 	sts	0x02C8, r22
     8f8:	70 93 c9 02 	sts	0x02C9, r23
     8fc:	80 93 ca 02 	sts	0x02CA, r24
     900:	90 93 cb 02 	sts	0x02CB, r25

	// Left Max Backward Calibration
	PORTD = (LEFT_MOTOR_BACKWARD)|(RIGHT_MOTOR_STOP);
	PORTA = (1<<CALIB_BIT);

	for (i=0;i<CAL_SAMPLES;i++){
     904:	80 91 94 03 	lds	r24, 0x0394
     908:	8f 5f       	subi	r24, 0xFF	; 255
     90a:	80 93 94 03 	sts	0x0394, r24
     90e:	80 91 94 03 	lds	r24, 0x0394
     912:	89 31       	cpi	r24, 0x19	; 25
     914:	b8 f2       	brcs	.-82     	; 0x8c4 <__stack+0x65>
		while (adcCompileReadyFlag == 0);
		compileAdcData();
		//waitValueIsReady();
		ADCcalib_value += adcValues.left;
	}
	leftLimits.negMaxTEMP = (ADCcalib_value * MAX_ADC_VALUE) / CAL_SAMPLES;
     916:	60 91 c8 02 	lds	r22, 0x02C8
     91a:	70 91 c9 02 	lds	r23, 0x02C9
     91e:	80 91 ca 02 	lds	r24, 0x02CA
     922:	90 91 cb 02 	lds	r25, 0x02CB
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 ec       	ldi	r19, 0xC0	; 192
     92a:	4f e7       	ldi	r20, 0x7F	; 127
     92c:	54 e4       	ldi	r21, 0x44	; 68
     92e:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	48 ec       	ldi	r20, 0xC8	; 200
     938:	51 e4       	ldi	r21, 0x41	; 65
     93a:	0e 94 97 23 	call	0x472e	; 0x472e <__divsf3>
     93e:	60 93 b2 03 	sts	0x03B2, r22
     942:	70 93 b3 03 	sts	0x03B3, r23
     946:	80 93 b4 03 	sts	0x03B4, r24
     94a:	90 93 b5 03 	sts	0x03B5, r25
	ADCcalib_value = 0.0;
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	a0 e0       	ldi	r26, 0x00	; 0
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	80 93 c8 02 	sts	0x02C8, r24
     95a:	90 93 c9 02 	sts	0x02C9, r25
     95e:	a0 93 ca 02 	sts	0x02CA, r26
     962:	b0 93 cb 02 	sts	0x02CB, r27

	// Left Zero Backward Calibration
	PORTD = (LEFT_MOTOR_BACKWARD)|(RIGHT_MOTOR_STOP);
     966:	88 e0       	ldi	r24, 0x08	; 8
     968:	82 bb       	out	0x12, r24	; 18
	PORTA = (0<<CALIB_BIT);
     96a:	1b ba       	out	0x1b, r1	; 27

	for (i=0;i<CAL_SAMPLES;i++){
     96c:	10 92 94 03 	sts	0x0394, r1
     970:	25 c0       	rjmp	.+74     	; 0x9bc <__stack+0x15d>
		while (adcCompileReadyFlag == 0);
     972:	80 91 68 05 	lds	r24, 0x0568
     976:	88 23       	and	r24, r24
     978:	e1 f3       	breq	.-8      	; 0x972 <__stack+0x113>
		compileAdcData();
     97a:	0e 94 a8 01 	call	0x350	; 0x350 <compileAdcData>
		//waitValueIsReady();
		ADCcalib_value += adcValues.left;
     97e:	60 91 c8 02 	lds	r22, 0x02C8
     982:	70 91 c9 02 	lds	r23, 0x02C9
     986:	80 91 ca 02 	lds	r24, 0x02CA
     98a:	90 91 cb 02 	lds	r25, 0x02CB
     98e:	20 91 9a 02 	lds	r18, 0x029A
     992:	30 91 9b 02 	lds	r19, 0x029B
     996:	40 91 9c 02 	lds	r20, 0x029C
     99a:	50 91 9d 02 	lds	r21, 0x029D
     99e:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__addsf3>
     9a2:	60 93 c8 02 	sts	0x02C8, r22
     9a6:	70 93 c9 02 	sts	0x02C9, r23
     9aa:	80 93 ca 02 	sts	0x02CA, r24
     9ae:	90 93 cb 02 	sts	0x02CB, r25

	// Left Zero Backward Calibration
	PORTD = (LEFT_MOTOR_BACKWARD)|(RIGHT_MOTOR_STOP);
	PORTA = (0<<CALIB_BIT);

	for (i=0;i<CAL_SAMPLES;i++){
     9b2:	80 91 94 03 	lds	r24, 0x0394
     9b6:	8f 5f       	subi	r24, 0xFF	; 255
     9b8:	80 93 94 03 	sts	0x0394, r24
     9bc:	80 91 94 03 	lds	r24, 0x0394
     9c0:	89 31       	cpi	r24, 0x19	; 25
     9c2:	b8 f2       	brcs	.-82     	; 0x972 <__stack+0x113>
		while (adcCompileReadyFlag == 0);
		compileAdcData();
		//waitValueIsReady();
		ADCcalib_value += adcValues.left;
	}
	leftLimits.negZeroTEMP = (ADCcalib_value * MAX_ADC_VALUE) / CAL_SAMPLES;
     9c4:	60 91 c8 02 	lds	r22, 0x02C8
     9c8:	70 91 c9 02 	lds	r23, 0x02C9
     9cc:	80 91 ca 02 	lds	r24, 0x02CA
     9d0:	90 91 cb 02 	lds	r25, 0x02CB
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 ec       	ldi	r19, 0xC0	; 192
     9d8:	4f e7       	ldi	r20, 0x7F	; 127
     9da:	54 e4       	ldi	r21, 0x44	; 68
     9dc:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	48 ec       	ldi	r20, 0xC8	; 200
     9e6:	51 e4       	ldi	r21, 0x41	; 65
     9e8:	0e 94 97 23 	call	0x472e	; 0x472e <__divsf3>
     9ec:	60 93 ba 03 	sts	0x03BA, r22
     9f0:	70 93 bb 03 	sts	0x03BB, r23
     9f4:	80 93 bc 03 	sts	0x03BC, r24
     9f8:	90 93 bd 03 	sts	0x03BD, r25
	ADCcalib_value = 0.0;
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	a0 e0       	ldi	r26, 0x00	; 0
     a02:	b0 e0       	ldi	r27, 0x00	; 0
     a04:	80 93 c8 02 	sts	0x02C8, r24
     a08:	90 93 c9 02 	sts	0x02C9, r25
     a0c:	a0 93 ca 02 	sts	0x02CA, r26
     a10:	b0 93 cb 02 	sts	0x02CB, r27
	/*#######################*/
	/*RIGHT MOTOR CALIBRATION*/
	/*#######################*/ 

	// Right Max Forward Calibration
	PORTD = (RIGHT_MOTOR_FORWARD)|(LEFT_MOTOR_STOP);
     a14:	20 e4       	ldi	r18, 0x40	; 64
     a16:	22 bb       	out	0x12, r18	; 18
	PORTA = (1<<CALIB_BIT);
     a18:	20 e1       	ldi	r18, 0x10	; 16
     a1a:	2b bb       	out	0x1b, r18	; 27
	ADCcalib_value = 0.0;
     a1c:	80 93 c8 02 	sts	0x02C8, r24
     a20:	90 93 c9 02 	sts	0x02C9, r25
     a24:	a0 93 ca 02 	sts	0x02CA, r26
     a28:	b0 93 cb 02 	sts	0x02CB, r27

	for (i=0;i<CAL_SAMPLES;i++){
     a2c:	10 92 94 03 	sts	0x0394, r1
     a30:	25 c0       	rjmp	.+74     	; 0xa7c <__stack+0x21d>
		while (adcCompileReadyFlag == 0);
     a32:	80 91 68 05 	lds	r24, 0x0568
     a36:	88 23       	and	r24, r24
     a38:	e1 f3       	breq	.-8      	; 0xa32 <__stack+0x1d3>
		compileAdcData();
     a3a:	0e 94 a8 01 	call	0x350	; 0x350 <compileAdcData>
		//waitValueIsReady();
		ADCcalib_value += adcValues.right;
     a3e:	60 91 c8 02 	lds	r22, 0x02C8
     a42:	70 91 c9 02 	lds	r23, 0x02C9
     a46:	80 91 ca 02 	lds	r24, 0x02CA
     a4a:	90 91 cb 02 	lds	r25, 0x02CB
     a4e:	20 91 9e 02 	lds	r18, 0x029E
     a52:	30 91 9f 02 	lds	r19, 0x029F
     a56:	40 91 a0 02 	lds	r20, 0x02A0
     a5a:	50 91 a1 02 	lds	r21, 0x02A1
     a5e:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__addsf3>
     a62:	60 93 c8 02 	sts	0x02C8, r22
     a66:	70 93 c9 02 	sts	0x02C9, r23
     a6a:	80 93 ca 02 	sts	0x02CA, r24
     a6e:	90 93 cb 02 	sts	0x02CB, r25
	// Right Max Forward Calibration
	PORTD = (RIGHT_MOTOR_FORWARD)|(LEFT_MOTOR_STOP);
	PORTA = (1<<CALIB_BIT);
	ADCcalib_value = 0.0;

	for (i=0;i<CAL_SAMPLES;i++){
     a72:	80 91 94 03 	lds	r24, 0x0394
     a76:	8f 5f       	subi	r24, 0xFF	; 255
     a78:	80 93 94 03 	sts	0x0394, r24
     a7c:	80 91 94 03 	lds	r24, 0x0394
     a80:	89 31       	cpi	r24, 0x19	; 25
     a82:	b8 f2       	brcs	.-82     	; 0xa32 <__stack+0x1d3>
		while (adcCompileReadyFlag == 0);
		compileAdcData();
		//waitValueIsReady();
		ADCcalib_value += adcValues.right;
	}
	rightLimits.posMaxTEMP = (ADCcalib_value * MAX_ADC_VALUE) / CAL_SAMPLES;
     a84:	60 91 c8 02 	lds	r22, 0x02C8
     a88:	70 91 c9 02 	lds	r23, 0x02C9
     a8c:	80 91 ca 02 	lds	r24, 0x02CA
     a90:	90 91 cb 02 	lds	r25, 0x02CB
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 ec       	ldi	r19, 0xC0	; 192
     a98:	4f e7       	ldi	r20, 0x7F	; 127
     a9a:	54 e4       	ldi	r21, 0x44	; 68
     a9c:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	48 ec       	ldi	r20, 0xC8	; 200
     aa6:	51 e4       	ldi	r21, 0x41	; 65
     aa8:	0e 94 97 23 	call	0x472e	; 0x472e <__divsf3>
     aac:	60 93 b4 02 	sts	0x02B4, r22
     ab0:	70 93 b5 02 	sts	0x02B5, r23
     ab4:	80 93 b6 02 	sts	0x02B6, r24
     ab8:	90 93 b7 02 	sts	0x02B7, r25
	ADCcalib_value = 0.0;
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	80 93 c8 02 	sts	0x02C8, r24
     ac8:	90 93 c9 02 	sts	0x02C9, r25
     acc:	a0 93 ca 02 	sts	0x02CA, r26
     ad0:	b0 93 cb 02 	sts	0x02CB, r27

	// Right Zero Forward Calibration
	PORTD = (RIGHT_MOTOR_FORWARD)|(LEFT_MOTOR_STOP);
     ad4:	80 e4       	ldi	r24, 0x40	; 64
     ad6:	82 bb       	out	0x12, r24	; 18
	PORTA = (0<<CALIB_BIT);
     ad8:	1b ba       	out	0x1b, r1	; 27

	for (i=0;i<CAL_SAMPLES;i++){
     ada:	10 92 94 03 	sts	0x0394, r1
     ade:	25 c0       	rjmp	.+74     	; 0xb2a <__stack+0x2cb>
		while (adcCompileReadyFlag == 0);
     ae0:	80 91 68 05 	lds	r24, 0x0568
     ae4:	88 23       	and	r24, r24
     ae6:	e1 f3       	breq	.-8      	; 0xae0 <__stack+0x281>
		compileAdcData();
     ae8:	0e 94 a8 01 	call	0x350	; 0x350 <compileAdcData>
		//waitValueIsReady();
		ADCcalib_value += adcValues.right;
     aec:	60 91 c8 02 	lds	r22, 0x02C8
     af0:	70 91 c9 02 	lds	r23, 0x02C9
     af4:	80 91 ca 02 	lds	r24, 0x02CA
     af8:	90 91 cb 02 	lds	r25, 0x02CB
     afc:	20 91 9e 02 	lds	r18, 0x029E
     b00:	30 91 9f 02 	lds	r19, 0x029F
     b04:	40 91 a0 02 	lds	r20, 0x02A0
     b08:	50 91 a1 02 	lds	r21, 0x02A1
     b0c:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__addsf3>
     b10:	60 93 c8 02 	sts	0x02C8, r22
     b14:	70 93 c9 02 	sts	0x02C9, r23
     b18:	80 93 ca 02 	sts	0x02CA, r24
     b1c:	90 93 cb 02 	sts	0x02CB, r25

	// Right Zero Forward Calibration
	PORTD = (RIGHT_MOTOR_FORWARD)|(LEFT_MOTOR_STOP);
	PORTA = (0<<CALIB_BIT);

	for (i=0;i<CAL_SAMPLES;i++){
     b20:	80 91 94 03 	lds	r24, 0x0394
     b24:	8f 5f       	subi	r24, 0xFF	; 255
     b26:	80 93 94 03 	sts	0x0394, r24
     b2a:	80 91 94 03 	lds	r24, 0x0394
     b2e:	89 31       	cpi	r24, 0x19	; 25
     b30:	b8 f2       	brcs	.-82     	; 0xae0 <__stack+0x281>
		while (adcCompileReadyFlag == 0);
		compileAdcData();
		//waitValueIsReady();
		ADCcalib_value += adcValues.right;
	}
	rightLimits.posZeroTEMP = (ADCcalib_value * MAX_ADC_VALUE) / CAL_SAMPLES;
     b32:	60 91 c8 02 	lds	r22, 0x02C8
     b36:	70 91 c9 02 	lds	r23, 0x02C9
     b3a:	80 91 ca 02 	lds	r24, 0x02CA
     b3e:	90 91 cb 02 	lds	r25, 0x02CB
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 ec       	ldi	r19, 0xC0	; 192
     b46:	4f e7       	ldi	r20, 0x7F	; 127
     b48:	54 e4       	ldi	r21, 0x44	; 68
     b4a:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	48 ec       	ldi	r20, 0xC8	; 200
     b54:	51 e4       	ldi	r21, 0x41	; 65
     b56:	0e 94 97 23 	call	0x472e	; 0x472e <__divsf3>
     b5a:	60 93 bc 02 	sts	0x02BC, r22
     b5e:	70 93 bd 02 	sts	0x02BD, r23
     b62:	80 93 be 02 	sts	0x02BE, r24
     b66:	90 93 bf 02 	sts	0x02BF, r25
	ADCcalib_value = 0.0;
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a0 e0       	ldi	r26, 0x00	; 0
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	80 93 c8 02 	sts	0x02C8, r24
     b76:	90 93 c9 02 	sts	0x02C9, r25
     b7a:	a0 93 ca 02 	sts	0x02CA, r26
     b7e:	b0 93 cb 02 	sts	0x02CB, r27

	// Right Max Backward Calibration
	PORTD = (RIGHT_MOTOR_BACKWARD)|(LEFT_MOTOR_STOP);
     b82:	80 e8       	ldi	r24, 0x80	; 128
     b84:	82 bb       	out	0x12, r24	; 18
	PORTA = (1<<CALIB_BIT);
     b86:	80 e1       	ldi	r24, 0x10	; 16
     b88:	8b bb       	out	0x1b, r24	; 27

	for (i=0;i<CAL_SAMPLES;i++){
     b8a:	10 92 94 03 	sts	0x0394, r1
     b8e:	25 c0       	rjmp	.+74     	; 0xbda <__stack+0x37b>
		while (adcCompileReadyFlag == 0);
     b90:	80 91 68 05 	lds	r24, 0x0568
     b94:	88 23       	and	r24, r24
     b96:	e1 f3       	breq	.-8      	; 0xb90 <__stack+0x331>
		compileAdcData();
     b98:	0e 94 a8 01 	call	0x350	; 0x350 <compileAdcData>
		//waitValueIsReady();
		ADCcalib_value += adcValues.right;
     b9c:	60 91 c8 02 	lds	r22, 0x02C8
     ba0:	70 91 c9 02 	lds	r23, 0x02C9
     ba4:	80 91 ca 02 	lds	r24, 0x02CA
     ba8:	90 91 cb 02 	lds	r25, 0x02CB
     bac:	20 91 9e 02 	lds	r18, 0x029E
     bb0:	30 91 9f 02 	lds	r19, 0x029F
     bb4:	40 91 a0 02 	lds	r20, 0x02A0
     bb8:	50 91 a1 02 	lds	r21, 0x02A1
     bbc:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__addsf3>
     bc0:	60 93 c8 02 	sts	0x02C8, r22
     bc4:	70 93 c9 02 	sts	0x02C9, r23
     bc8:	80 93 ca 02 	sts	0x02CA, r24
     bcc:	90 93 cb 02 	sts	0x02CB, r25

	// Right Max Backward Calibration
	PORTD = (RIGHT_MOTOR_BACKWARD)|(LEFT_MOTOR_STOP);
	PORTA = (1<<CALIB_BIT);

	for (i=0;i<CAL_SAMPLES;i++){
     bd0:	80 91 94 03 	lds	r24, 0x0394
     bd4:	8f 5f       	subi	r24, 0xFF	; 255
     bd6:	80 93 94 03 	sts	0x0394, r24
     bda:	80 91 94 03 	lds	r24, 0x0394
     bde:	89 31       	cpi	r24, 0x19	; 25
     be0:	b8 f2       	brcs	.-82     	; 0xb90 <__stack+0x331>
		while (adcCompileReadyFlag == 0);
		compileAdcData();
		//waitValueIsReady();
		ADCcalib_value += adcValues.right;
	}
	rightLimits.negMaxTEMP = (ADCcalib_value * MAX_ADC_VALUE) / CAL_SAMPLES;
     be2:	60 91 c8 02 	lds	r22, 0x02C8
     be6:	70 91 c9 02 	lds	r23, 0x02C9
     bea:	80 91 ca 02 	lds	r24, 0x02CA
     bee:	90 91 cb 02 	lds	r25, 0x02CB
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 ec       	ldi	r19, 0xC0	; 192
     bf6:	4f e7       	ldi	r20, 0x7F	; 127
     bf8:	54 e4       	ldi	r21, 0x44	; 68
     bfa:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	48 ec       	ldi	r20, 0xC8	; 200
     c04:	51 e4       	ldi	r21, 0x41	; 65
     c06:	0e 94 97 23 	call	0x472e	; 0x472e <__divsf3>
     c0a:	60 93 b8 02 	sts	0x02B8, r22
     c0e:	70 93 b9 02 	sts	0x02B9, r23
     c12:	80 93 ba 02 	sts	0x02BA, r24
     c16:	90 93 bb 02 	sts	0x02BB, r25
	ADCcalib_value = 0.0;
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e0       	ldi	r26, 0x00	; 0
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	80 93 c8 02 	sts	0x02C8, r24
     c26:	90 93 c9 02 	sts	0x02C9, r25
     c2a:	a0 93 ca 02 	sts	0x02CA, r26
     c2e:	b0 93 cb 02 	sts	0x02CB, r27

	// Right Zero Backward Calibration
	PORTD = (RIGHT_MOTOR_BACKWARD)|(LEFT_MOTOR_STOP);
     c32:	80 e8       	ldi	r24, 0x80	; 128
     c34:	82 bb       	out	0x12, r24	; 18
	PORTA = (0<<CALIB_BIT);
     c36:	1b ba       	out	0x1b, r1	; 27

	for (i=0;i<CAL_SAMPLES;i++){
     c38:	10 92 94 03 	sts	0x0394, r1
     c3c:	25 c0       	rjmp	.+74     	; 0xc88 <__stack+0x429>
		while (adcCompileReadyFlag == 0);
     c3e:	80 91 68 05 	lds	r24, 0x0568
     c42:	88 23       	and	r24, r24
     c44:	e1 f3       	breq	.-8      	; 0xc3e <__stack+0x3df>
		compileAdcData();
     c46:	0e 94 a8 01 	call	0x350	; 0x350 <compileAdcData>
		//waitValueIsReady();
		ADCcalib_value += adcValues.right;
     c4a:	60 91 c8 02 	lds	r22, 0x02C8
     c4e:	70 91 c9 02 	lds	r23, 0x02C9
     c52:	80 91 ca 02 	lds	r24, 0x02CA
     c56:	90 91 cb 02 	lds	r25, 0x02CB
     c5a:	20 91 9e 02 	lds	r18, 0x029E
     c5e:	30 91 9f 02 	lds	r19, 0x029F
     c62:	40 91 a0 02 	lds	r20, 0x02A0
     c66:	50 91 a1 02 	lds	r21, 0x02A1
     c6a:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__addsf3>
     c6e:	60 93 c8 02 	sts	0x02C8, r22
     c72:	70 93 c9 02 	sts	0x02C9, r23
     c76:	80 93 ca 02 	sts	0x02CA, r24
     c7a:	90 93 cb 02 	sts	0x02CB, r25

	// Right Zero Backward Calibration
	PORTD = (RIGHT_MOTOR_BACKWARD)|(LEFT_MOTOR_STOP);
	PORTA = (0<<CALIB_BIT);

	for (i=0;i<CAL_SAMPLES;i++){
     c7e:	80 91 94 03 	lds	r24, 0x0394
     c82:	8f 5f       	subi	r24, 0xFF	; 255
     c84:	80 93 94 03 	sts	0x0394, r24
     c88:	80 91 94 03 	lds	r24, 0x0394
     c8c:	89 31       	cpi	r24, 0x19	; 25
     c8e:	b8 f2       	brcs	.-82     	; 0xc3e <__stack+0x3df>
		while (adcCompileReadyFlag == 0);
		compileAdcData();
		//waitValueIsReady();
		ADCcalib_value += adcValues.right;
	}
	rightLimits.negZeroTEMP = 	(ADCcalib_value * MAX_ADC_VALUE) / CAL_SAMPLES;
     c90:	60 91 c8 02 	lds	r22, 0x02C8
     c94:	70 91 c9 02 	lds	r23, 0x02C9
     c98:	80 91 ca 02 	lds	r24, 0x02CA
     c9c:	90 91 cb 02 	lds	r25, 0x02CB
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 ec       	ldi	r19, 0xC0	; 192
     ca4:	4f e7       	ldi	r20, 0x7F	; 127
     ca6:	54 e4       	ldi	r21, 0x44	; 68
     ca8:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	48 ec       	ldi	r20, 0xC8	; 200
     cb2:	51 e4       	ldi	r21, 0x41	; 65
     cb4:	0e 94 97 23 	call	0x472e	; 0x472e <__divsf3>
     cb8:	dc 01       	movw	r26, r24
     cba:	9b 01       	movw	r18, r22
     cbc:	ac 01       	movw	r20, r24
     cbe:	20 93 c0 02 	sts	0x02C0, r18
     cc2:	30 93 c1 02 	sts	0x02C1, r19
     cc6:	40 93 c2 02 	sts	0x02C2, r20
     cca:	50 93 c3 02 	sts	0x02C3, r21
	ADCcalib_value = 0.0;
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	20 93 c8 02 	sts	0x02C8, r18
     cda:	30 93 c9 02 	sts	0x02C9, r19
     cde:	40 93 ca 02 	sts	0x02CA, r20
     ce2:	50 93 cb 02 	sts	0x02CB, r21
	
*/ 

 //CHANGEMENT pour éviter chiage
	// Assign final values to limit var
	leftLimits.posMax = leftLimits.posMaxTEMP;
     ce6:	e0 90 ae 03 	lds	r14, 0x03AE
     cea:	f0 90 af 03 	lds	r15, 0x03AF
     cee:	00 91 b0 03 	lds	r16, 0x03B0
     cf2:	10 91 b1 03 	lds	r17, 0x03B1
     cf6:	e0 92 9e 03 	sts	0x039E, r14
     cfa:	f0 92 9f 03 	sts	0x039F, r15
     cfe:	00 93 a0 03 	sts	0x03A0, r16
     d02:	10 93 a1 03 	sts	0x03A1, r17
	leftLimits.posZero = leftLimits.posZeroTEMP;
     d06:	20 91 b6 03 	lds	r18, 0x03B6
     d0a:	30 91 b7 03 	lds	r19, 0x03B7
     d0e:	40 91 b8 03 	lds	r20, 0x03B8
     d12:	50 91 b9 03 	lds	r21, 0x03B9
     d16:	20 93 a6 03 	sts	0x03A6, r18
     d1a:	30 93 a7 03 	sts	0x03A7, r19
     d1e:	40 93 a8 03 	sts	0x03A8, r20
     d22:	50 93 a9 03 	sts	0x03A9, r21
	leftLimits.negMax = leftLimits.negMaxTEMP;
     d26:	20 91 b2 03 	lds	r18, 0x03B2
     d2a:	30 91 b3 03 	lds	r19, 0x03B3
     d2e:	40 91 b4 03 	lds	r20, 0x03B4
     d32:	50 91 b5 03 	lds	r21, 0x03B5
     d36:	20 93 a2 03 	sts	0x03A2, r18
     d3a:	30 93 a3 03 	sts	0x03A3, r19
     d3e:	40 93 a4 03 	sts	0x03A4, r20
     d42:	50 93 a5 03 	sts	0x03A5, r21
	leftLimits.negZero = leftLimits.negZeroTEMP;
     d46:	20 91 ba 03 	lds	r18, 0x03BA
     d4a:	30 91 bb 03 	lds	r19, 0x03BB
     d4e:	40 91 bc 03 	lds	r20, 0x03BC
     d52:	50 91 bd 03 	lds	r21, 0x03BD
     d56:	20 93 aa 03 	sts	0x03AA, r18
     d5a:	30 93 ab 03 	sts	0x03AB, r19
     d5e:	40 93 ac 03 	sts	0x03AC, r20
     d62:	50 93 ad 03 	sts	0x03AD, r21
	rightLimits.posMax = rightLimits.posMaxTEMP;
     d66:	20 91 b4 02 	lds	r18, 0x02B4
     d6a:	30 91 b5 02 	lds	r19, 0x02B5
     d6e:	40 91 b6 02 	lds	r20, 0x02B6
     d72:	50 91 b7 02 	lds	r21, 0x02B7
     d76:	20 93 a4 02 	sts	0x02A4, r18
     d7a:	30 93 a5 02 	sts	0x02A5, r19
     d7e:	40 93 a6 02 	sts	0x02A6, r20
     d82:	50 93 a7 02 	sts	0x02A7, r21
	rightLimits.posZero = rightLimits.posZeroTEMP;
     d86:	20 91 bc 02 	lds	r18, 0x02BC
     d8a:	30 91 bd 02 	lds	r19, 0x02BD
     d8e:	40 91 be 02 	lds	r20, 0x02BE
     d92:	50 91 bf 02 	lds	r21, 0x02BF
     d96:	20 93 ac 02 	sts	0x02AC, r18
     d9a:	30 93 ad 02 	sts	0x02AD, r19
     d9e:	40 93 ae 02 	sts	0x02AE, r20
     da2:	50 93 af 02 	sts	0x02AF, r21
	rightLimits.negMax = rightLimits.negMaxTEMP;
     da6:	20 91 b8 02 	lds	r18, 0x02B8
     daa:	30 91 b9 02 	lds	r19, 0x02B9
     dae:	40 91 ba 02 	lds	r20, 0x02BA
     db2:	50 91 bb 02 	lds	r21, 0x02BB
     db6:	20 93 a8 02 	sts	0x02A8, r18
     dba:	30 93 a9 02 	sts	0x02A9, r19
     dbe:	40 93 aa 02 	sts	0x02AA, r20
     dc2:	50 93 ab 02 	sts	0x02AB, r21
	rightLimits.negZero = rightLimits.negZeroTEMP;
     dc6:	cb 01       	movw	r24, r22
     dc8:	80 93 b0 02 	sts	0x02B0, r24
     dcc:	90 93 b1 02 	sts	0x02B1, r25
     dd0:	a0 93 b2 02 	sts	0x02B2, r26
     dd4:	b0 93 b3 02 	sts	0x02B3, r27

	//DEBUG LAND
	if ((leftLimits.posMax > 25) && (leftLimits.posMax < 50))
     dd8:	c8 01       	movw	r24, r16
     dda:	b7 01       	movw	r22, r14
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	48 ec       	ldi	r20, 0xC8	; 200
     de2:	51 e4       	ldi	r21, 0x41	; 65
     de4:	0e 94 43 24 	call	0x4886	; 0x4886 <__gtsf2>
     de8:	18 16       	cp	r1, r24
     dea:	6c f4       	brge	.+26     	; 0xe06 <__stack+0x5a7>
     dec:	c8 01       	movw	r24, r16
     dee:	b7 01       	movw	r22, r14
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	48 e4       	ldi	r20, 0x48	; 72
     df6:	52 e4       	ldi	r21, 0x42	; 66
     df8:	0e 94 a3 24 	call	0x4946	; 0x4946 <__ltsf2>
     dfc:	88 23       	and	r24, r24
     dfe:	1c f4       	brge	.+6      	; 0xe06 <__stack+0x5a7>
	{
		PORTB=0x0E;
     e00:	8e e0       	ldi	r24, 0x0E	; 14
     e02:	88 bb       	out	0x18, r24	; 24
     e04:	ff cf       	rjmp	.-2      	; 0xe04 <__stack+0x5a5>
		while(1);
	}
	
	// End calibration
	adcCalibrationFlag = 0;
     e06:	10 92 ca 03 	sts	0x03CA, r1
	PORTD = (RIGHT_MOTOR_STOP) | (LEFT_MOTOR_STOP);
     e0a:	12 ba       	out	0x12, r1	; 18

}
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	08 95       	ret

00000e16 <waitValueIsReady>:

void waitValueIsReady(void)
{
	//adcCompletedFlag = 0;		
	while (adcCompletedFlag == 0){}
     e16:	80 91 69 03 	lds	r24, 0x0369
     e1a:	88 23       	and	r24, r24
     e1c:	e1 f3       	breq	.-8      	; 0xe16 <waitValueIsReady>

	adcCompletedFlag = 0;
     e1e:	10 92 69 03 	sts	0x0369, r1
	while (adcCompletedFlag == 0){}
     e22:	80 91 69 03 	lds	r24, 0x0369
     e26:	88 23       	and	r24, r24
     e28:	e1 f3       	breq	.-8      	; 0xe22 <waitValueIsReady+0xc>


}
     e2a:	08 95       	ret

00000e2c <initLeds>:
//Return value:	-none
//
///////////////////////////////////////////
void initLeds(void)
{
	leftPingFlag  = 0;
     e2c:	10 92 cc 02 	sts	0x02CC, r1
	rightPingFlag = 0;
     e30:	10 92 9a 03 	sts	0x039A, r1
	uartLedFlag   = 0;
     e34:	10 92 ce 03 	sts	0x03CE, r1
//
///////////////////////////////////////////
void ledDeadState(void)
{
	ledState.leds = (1<<LED6);
	PORTB = ~(ledState.leds);
     e38:	8f eb       	ldi	r24, 0xBF	; 191
     e3a:	88 bb       	out	0x18, r24	; 24
	ledState.uartCounter = 0;
	ledState.leftPingCounter = 0;
	ledState.rightPingCounter = 0;
	rightPingFlag = 0;
     e3c:	10 92 9a 03 	sts	0x039A, r1
	leftPingFlag = 0;
     e40:	10 92 cc 02 	sts	0x02CC, r1
	uartLedFlag = 0;
     e44:	10 92 ce 03 	sts	0x03CE, r1
//Return value:	-none
//
///////////////////////////////////////////
void ledAliveState(void)
{
	ledState.leds = (1<<LED7);
     e48:	80 e8       	ldi	r24, 0x80	; 128
     e4a:	80 93 79 03 	sts	0x0379, r24
	PORTB = ~(ledState.leds);
     e4e:	8f e7       	ldi	r24, 0x7F	; 127
     e50:	88 bb       	out	0x18, r24	; 24
	ledState.uartCounter = 0;
     e52:	10 92 7c 03 	sts	0x037C, r1
     e56:	10 92 7b 03 	sts	0x037B, r1
	ledState.leftPingCounter = 0;
     e5a:	10 92 7e 03 	sts	0x037E, r1
     e5e:	10 92 7d 03 	sts	0x037D, r1
	ledState.rightPingCounter = 0;
     e62:	10 92 80 03 	sts	0x0380, r1
     e66:	10 92 7f 03 	sts	0x037F, r1
	rightPingFlag = 0;
     e6a:	10 92 9a 03 	sts	0x039A, r1
	leftPingFlag = 0;
     e6e:	10 92 cc 02 	sts	0x02CC, r1
	uartLedFlag = 0;
     e72:	10 92 ce 03 	sts	0x03CE, r1
	leftObjectLed = 0;
     e76:	10 92 73 03 	sts	0x0373, r1
	rightObjectLed = 0;
     e7a:	10 92 9b 03 	sts	0x039B, r1
	leftPingFlag  = 0;
	rightPingFlag = 0;
	uartLedFlag   = 0;
	ledDeadState();
	ledAliveState();
}
     e7e:	08 95       	ret

00000e80 <ledDeadState>:
//Return value:	-none
//
///////////////////////////////////////////
void ledDeadState(void)
{
	ledState.leds = (1<<LED6);
     e80:	80 e4       	ldi	r24, 0x40	; 64
     e82:	80 93 79 03 	sts	0x0379, r24
	PORTB = ~(ledState.leds);
     e86:	8f eb       	ldi	r24, 0xBF	; 191
     e88:	88 bb       	out	0x18, r24	; 24
	ledState.uartCounter = 0;
     e8a:	10 92 7c 03 	sts	0x037C, r1
     e8e:	10 92 7b 03 	sts	0x037B, r1
	ledState.leftPingCounter = 0;
     e92:	10 92 7e 03 	sts	0x037E, r1
     e96:	10 92 7d 03 	sts	0x037D, r1
	ledState.rightPingCounter = 0;
     e9a:	10 92 80 03 	sts	0x0380, r1
     e9e:	10 92 7f 03 	sts	0x037F, r1
	rightPingFlag = 0;
     ea2:	10 92 9a 03 	sts	0x039A, r1
	leftPingFlag = 0;
     ea6:	10 92 cc 02 	sts	0x02CC, r1
	uartLedFlag = 0;
     eaa:	10 92 ce 03 	sts	0x03CE, r1
}
     eae:	08 95       	ret

00000eb0 <obstacleDetectedLeds>:
//Return value:	-none
//
///////////////////////////////////////////
void obstacleDetectedLeds(void)
{
	if (leftObjectLed)
     eb0:	80 91 73 03 	lds	r24, 0x0373
     eb4:	88 23       	and	r24, r24
     eb6:	21 f0       	breq	.+8      	; 0xec0 <obstacleDetectedLeds+0x10>
	{
		ledState.leds |= (1<<LED4);
     eb8:	80 91 79 03 	lds	r24, 0x0379
     ebc:	80 61       	ori	r24, 0x10	; 16
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <obstacleDetectedLeds+0x16>
	}
	else
	{
		ledState.leds &= ~(1<<LED4);
     ec0:	80 91 79 03 	lds	r24, 0x0379
     ec4:	8f 7e       	andi	r24, 0xEF	; 239
     ec6:	80 93 79 03 	sts	0x0379, r24
	}
	if (rightObjectLed)
     eca:	80 91 9b 03 	lds	r24, 0x039B
     ece:	88 23       	and	r24, r24
     ed0:	21 f0       	breq	.+8      	; 0xeda <obstacleDetectedLeds+0x2a>
	{
		ledState.leds |= (1<<LED2);
     ed2:	80 91 79 03 	lds	r24, 0x0379
     ed6:	84 60       	ori	r24, 0x04	; 4
     ed8:	03 c0       	rjmp	.+6      	; 0xee0 <obstacleDetectedLeds+0x30>
	}
	else
	{
		ledState.leds &= ~(1<<LED2);
     eda:	80 91 79 03 	lds	r24, 0x0379
     ede:	8b 7f       	andi	r24, 0xFB	; 251
     ee0:	80 93 79 03 	sts	0x0379, r24
     ee4:	08 95       	ret

00000ee6 <ledAliveState>:
//Return value:	-none
//
///////////////////////////////////////////
void ledAliveState(void)
{
	ledState.leds = (1<<LED7);
     ee6:	80 e8       	ldi	r24, 0x80	; 128
     ee8:	80 93 79 03 	sts	0x0379, r24
	PORTB = ~(ledState.leds);
     eec:	8f e7       	ldi	r24, 0x7F	; 127
     eee:	88 bb       	out	0x18, r24	; 24
	ledState.uartCounter = 0;
     ef0:	10 92 7c 03 	sts	0x037C, r1
     ef4:	10 92 7b 03 	sts	0x037B, r1
	ledState.leftPingCounter = 0;
     ef8:	10 92 7e 03 	sts	0x037E, r1
     efc:	10 92 7d 03 	sts	0x037D, r1
	ledState.rightPingCounter = 0;
     f00:	10 92 80 03 	sts	0x0380, r1
     f04:	10 92 7f 03 	sts	0x037F, r1
	rightPingFlag = 0;
     f08:	10 92 9a 03 	sts	0x039A, r1
	leftPingFlag = 0;
     f0c:	10 92 cc 02 	sts	0x02CC, r1
	uartLedFlag = 0;
     f10:	10 92 ce 03 	sts	0x03CE, r1
	leftObjectLed = 0;
     f14:	10 92 73 03 	sts	0x0373, r1
	rightObjectLed = 0;
     f18:	10 92 9b 03 	sts	0x039B, r1
}
     f1c:	08 95       	ret

00000f1e <pingUart>:
//Return value:	-none
//
///////////////////////////////////////////
void pingUart(void)
{
	if ((uartLedFlag) && !(ledState.flashing & (1<<LED1)))//new led input received
     f1e:	80 91 ce 03 	lds	r24, 0x03CE
     f22:	88 23       	and	r24, r24
     f24:	39 f0       	breq	.+14     	; 0xf34 <pingUart+0x16>
     f26:	80 91 7a 03 	lds	r24, 0x037A
     f2a:	81 fd       	sbrc	r24, 1
     f2c:	03 c0       	rjmp	.+6      	; 0xf34 <pingUart+0x16>
	{
		ledState.flashing |= (1<<LED1);
     f2e:	82 60       	ori	r24, 0x02	; 2
     f30:	80 93 7a 03 	sts	0x037A, r24
	}
	if (ledState.uartCounter)	//if counter is running
     f34:	80 91 7b 03 	lds	r24, 0x037B
     f38:	90 91 7c 03 	lds	r25, 0x037C
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	11 f1       	breq	.+68     	; 0xf84 <pingUart+0x66>
	{
		ledState.uartCounter++;
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	90 93 7c 03 	sts	0x037C, r25
     f46:	80 93 7b 03 	sts	0x037B, r24
		if (ledState.uartCounter >= LED_UART_CYCLE_TIME)
     f4a:	80 54       	subi	r24, 0x40	; 64
     f4c:	9f 41       	sbci	r25, 0x1F	; 31
     f4e:	48 f1       	brcs	.+82     	; 0xfa2 <pingUart+0x84>
		{
			if (ledState.leds & (1<<LED1))
     f50:	80 91 79 03 	lds	r24, 0x0379
     f54:	81 ff       	sbrs	r24, 1
     f56:	0a c0       	rjmp	.+20     	; 0xf6c <pingUart+0x4e>
			{
				ledState.leds &= (0xFF & ~(1<<LED1));	//turn led off
     f58:	8d 7f       	andi	r24, 0xFD	; 253
     f5a:	80 93 79 03 	sts	0x0379, r24
				ledState.uartCounter = 1;	//calls a second loop to keep led off
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	90 93 7c 03 	sts	0x037C, r25
     f66:	80 93 7b 03 	sts	0x037B, r24
     f6a:	08 95       	ret
			}
			else
			{
				ledState.uartCounter = 0; //flash is finished
     f6c:	10 92 7c 03 	sts	0x037C, r1
     f70:	10 92 7b 03 	sts	0x037B, r1
				uartLedFlag = 0;
     f74:	10 92 ce 03 	sts	0x03CE, r1
				ledState.flashing &= ~(1<<LED1);
     f78:	80 91 7a 03 	lds	r24, 0x037A
     f7c:	8d 7f       	andi	r24, 0xFD	; 253
     f7e:	80 93 7a 03 	sts	0x037A, r24
     f82:	08 95       	ret
			}
		}
	}			
	else if (ledState.flashing & (1<<LED1))	//starts led counter
     f84:	80 91 7a 03 	lds	r24, 0x037A
     f88:	81 ff       	sbrs	r24, 1
     f8a:	0b c0       	rjmp	.+22     	; 0xfa2 <pingUart+0x84>
	{		
		ledState.leds |= (1<<LED1);
     f8c:	80 91 79 03 	lds	r24, 0x0379
     f90:	82 60       	ori	r24, 0x02	; 2
     f92:	80 93 79 03 	sts	0x0379, r24
		ledState.uartCounter = 1;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	90 93 7c 03 	sts	0x037C, r25
     f9e:	80 93 7b 03 	sts	0x037B, r24
     fa2:	08 95       	ret

00000fa4 <pingSonarLeft>:
//Return value:	-none
//
///////////////////////////////////////////
void pingSonarLeft(void)
{
	if ((leftPingFlag) && !(ledState.flashing & (1<<LED5)))//new led input received
     fa4:	80 91 cc 02 	lds	r24, 0x02CC
     fa8:	88 23       	and	r24, r24
     faa:	39 f0       	breq	.+14     	; 0xfba <pingSonarLeft+0x16>
     fac:	80 91 7a 03 	lds	r24, 0x037A
     fb0:	85 fd       	sbrc	r24, 5
     fb2:	03 c0       	rjmp	.+6      	; 0xfba <pingSonarLeft+0x16>
	{
		ledState.flashing |= (1<<LED5);
     fb4:	80 62       	ori	r24, 0x20	; 32
     fb6:	80 93 7a 03 	sts	0x037A, r24
	}
	if (ledState.leftPingCounter)
     fba:	80 91 7d 03 	lds	r24, 0x037D
     fbe:	90 91 7e 03 	lds	r25, 0x037E
     fc2:	00 97       	sbiw	r24, 0x00	; 0
     fc4:	11 f1       	breq	.+68     	; 0x100a <pingSonarLeft+0x66>
	{
		ledState.leftPingCounter++;
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	90 93 7e 03 	sts	0x037E, r25
     fcc:	80 93 7d 03 	sts	0x037D, r24
		if (ledState.leftPingCounter >= LED_PING_CYCLE_TIME)
     fd0:	80 51       	subi	r24, 0x10	; 16
     fd2:	97 42       	sbci	r25, 0x27	; 39
     fd4:	48 f1       	brcs	.+82     	; 0x1028 <pingSonarLeft+0x84>
		{
			if (ledState.leds & (1<<LED5))
     fd6:	80 91 79 03 	lds	r24, 0x0379
     fda:	85 ff       	sbrs	r24, 5
     fdc:	0a c0       	rjmp	.+20     	; 0xff2 <pingSonarLeft+0x4e>
			{
				ledState.leds &= (0xFF & ~(1<<LED5));	//turn led off
     fde:	8f 7d       	andi	r24, 0xDF	; 223
     fe0:	80 93 79 03 	sts	0x0379, r24
				ledState.leftPingCounter = 1;	//calls a second loop to keep led off
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	90 93 7e 03 	sts	0x037E, r25
     fec:	80 93 7d 03 	sts	0x037D, r24
     ff0:	08 95       	ret
			}
			else
			{
				ledState.leftPingCounter = 0; //flash is finished
     ff2:	10 92 7e 03 	sts	0x037E, r1
     ff6:	10 92 7d 03 	sts	0x037D, r1
				leftPingFlag = 0;
     ffa:	10 92 cc 02 	sts	0x02CC, r1
				ledState.flashing &= ~(1<<LED5);
     ffe:	80 91 7a 03 	lds	r24, 0x037A
    1002:	8f 7d       	andi	r24, 0xDF	; 223
    1004:	80 93 7a 03 	sts	0x037A, r24
    1008:	08 95       	ret
			}
		}
	}			
	else if (ledState.flashing & (1<<LED5))//starts led counter
    100a:	80 91 7a 03 	lds	r24, 0x037A
    100e:	85 ff       	sbrs	r24, 5
    1010:	0b c0       	rjmp	.+22     	; 0x1028 <pingSonarLeft+0x84>
	{		
		ledState.leds |= (1<<LED5);
    1012:	80 91 79 03 	lds	r24, 0x0379
    1016:	80 62       	ori	r24, 0x20	; 32
    1018:	80 93 79 03 	sts	0x0379, r24
		ledState.leftPingCounter = 1;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	90 93 7e 03 	sts	0x037E, r25
    1024:	80 93 7d 03 	sts	0x037D, r24
    1028:	08 95       	ret

0000102a <pingSonarRight>:
//Return value:	-none
//
///////////////////////////////////////////
void pingSonarRight(void)
{
	if ((rightPingFlag) && !(ledState.flashing & (1<<LED3)))//new led input received
    102a:	80 91 9a 03 	lds	r24, 0x039A
    102e:	88 23       	and	r24, r24
    1030:	39 f0       	breq	.+14     	; 0x1040 <pingSonarRight+0x16>
    1032:	80 91 7a 03 	lds	r24, 0x037A
    1036:	83 fd       	sbrc	r24, 3
    1038:	03 c0       	rjmp	.+6      	; 0x1040 <pingSonarRight+0x16>
	{
		ledState.flashing |= (1<<LED3);
    103a:	88 60       	ori	r24, 0x08	; 8
    103c:	80 93 7a 03 	sts	0x037A, r24
	}
	if (ledState.rightPingCounter)
    1040:	80 91 7f 03 	lds	r24, 0x037F
    1044:	90 91 80 03 	lds	r25, 0x0380
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	11 f1       	breq	.+68     	; 0x1090 <pingSonarRight+0x66>
	{
		ledState.rightPingCounter++;
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	90 93 80 03 	sts	0x0380, r25
    1052:	80 93 7f 03 	sts	0x037F, r24
		if (ledState.rightPingCounter >= LED_PING_CYCLE_TIME)
    1056:	80 51       	subi	r24, 0x10	; 16
    1058:	97 42       	sbci	r25, 0x27	; 39
    105a:	48 f1       	brcs	.+82     	; 0x10ae <pingSonarRight+0x84>
		{
			if (ledState.leds & (1<<LED3))
    105c:	80 91 79 03 	lds	r24, 0x0379
    1060:	83 ff       	sbrs	r24, 3
    1062:	0a c0       	rjmp	.+20     	; 0x1078 <pingSonarRight+0x4e>
			{
				ledState.leds &= (0xFF & ~(1<<LED3));	//turn led off
    1064:	87 7f       	andi	r24, 0xF7	; 247
    1066:	80 93 79 03 	sts	0x0379, r24
				ledState.rightPingCounter = 1;	//calls a second loop to keep led off
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	90 93 80 03 	sts	0x0380, r25
    1072:	80 93 7f 03 	sts	0x037F, r24
    1076:	08 95       	ret
			}
			else
			{
				ledState.rightPingCounter = 0;	//flash is finished
    1078:	10 92 80 03 	sts	0x0380, r1
    107c:	10 92 7f 03 	sts	0x037F, r1
				rightPingFlag = 0;
    1080:	10 92 9a 03 	sts	0x039A, r1
				ledState.flashing &= ~(1<<LED3);
    1084:	80 91 7a 03 	lds	r24, 0x037A
    1088:	87 7f       	andi	r24, 0xF7	; 247
    108a:	80 93 7a 03 	sts	0x037A, r24
    108e:	08 95       	ret
			}
		}
	}			
	else if (ledState.flashing & (1<<LED3))//starts led counter
    1090:	80 91 7a 03 	lds	r24, 0x037A
    1094:	83 ff       	sbrs	r24, 3
    1096:	0b c0       	rjmp	.+22     	; 0x10ae <pingSonarRight+0x84>
	{		
		ledState.leds |= (1<<LED3);
    1098:	80 91 79 03 	lds	r24, 0x0379
    109c:	88 60       	ori	r24, 0x08	; 8
    109e:	80 93 79 03 	sts	0x0379, r24
		ledState.rightPingCounter = 1;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	90 93 80 03 	sts	0x0380, r25
    10aa:	80 93 7f 03 	sts	0x037F, r24
    10ae:	08 95       	ret

000010b0 <flashLeds>:
//Return value:	-none
//
///////////////////////////////////////////
void flashLeds(void)
{
	pingUart();
    10b0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <pingUart>
	pingSonarLeft();
    10b4:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <pingSonarLeft>
	pingSonarRight();
    10b8:	0e 94 15 08 	call	0x102a	; 0x102a <pingSonarRight>
//Return value:	-none
//
///////////////////////////////////////////
void obstacleDetectedLeds(void)
{
	if (leftObjectLed)
    10bc:	80 91 73 03 	lds	r24, 0x0373
    10c0:	88 23       	and	r24, r24
    10c2:	21 f0       	breq	.+8      	; 0x10cc <flashLeds+0x1c>
	{
		ledState.leds |= (1<<LED4);
    10c4:	80 91 79 03 	lds	r24, 0x0379
    10c8:	80 61       	ori	r24, 0x10	; 16
    10ca:	03 c0       	rjmp	.+6      	; 0x10d2 <flashLeds+0x22>
	}
	else
	{
		ledState.leds &= ~(1<<LED4);
    10cc:	80 91 79 03 	lds	r24, 0x0379
    10d0:	8f 7e       	andi	r24, 0xEF	; 239
    10d2:	80 93 79 03 	sts	0x0379, r24
	}
	if (rightObjectLed)
    10d6:	80 91 9b 03 	lds	r24, 0x039B
    10da:	88 23       	and	r24, r24
    10dc:	21 f0       	breq	.+8      	; 0x10e6 <flashLeds+0x36>
	{
		ledState.leds |= (1<<LED2);
    10de:	80 91 79 03 	lds	r24, 0x0379
    10e2:	84 60       	ori	r24, 0x04	; 4
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <flashLeds+0x3c>
	}
	else
	{
		ledState.leds &= ~(1<<LED2);
    10e6:	80 91 79 03 	lds	r24, 0x0379
    10ea:	8b 7f       	andi	r24, 0xFB	; 251
    10ec:	80 93 79 03 	sts	0x0379, r24
{
	pingUart();
	pingSonarLeft();
	pingSonarRight();
	obstacleDetectedLeds();
	ledState.leds |= (1<<LED7);
    10f0:	80 91 79 03 	lds	r24, 0x0379
    10f4:	80 68       	ori	r24, 0x80	; 128
    10f6:	80 93 79 03 	sts	0x0379, r24
	PORTB = ~(ledState.leds);
    10fa:	80 95       	com	r24
    10fc:	88 bb       	out	0x18, r24	; 24
}
    10fe:	08 95       	ret

00001100 <CalculPWM>:
#include "moteur.h"


void CalculPWM(float Vitesse_D, float Angle_D, float Vg, float Vd, float *Duty_G, float *Duty_D)
{
    1100:	2f 92       	push	r2
    1102:	3f 92       	push	r3
    1104:	4f 92       	push	r4
    1106:	5f 92       	push	r5
    1108:	6f 92       	push	r6
    110a:	7f 92       	push	r7
    110c:	8f 92       	push	r8
    110e:	9f 92       	push	r9
    1110:	af 92       	push	r10
    1112:	bf 92       	push	r11
    1114:	cf 92       	push	r12
    1116:	df 92       	push	r13
    1118:	ef 92       	push	r14
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	60 97       	sbiw	r28, 0x10	; 16
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	6f 83       	std	Y+7, r22	; 0x07
    1136:	78 87       	std	Y+8, r23	; 0x08
    1138:	89 87       	std	Y+9, r24	; 0x09
    113a:	9a 87       	std	Y+10, r25	; 0x0a
    113c:	2b 87       	std	Y+11, r18	; 0x0b
    113e:	3c 87       	std	Y+12, r19	; 0x0c
    1140:	4d 87       	std	Y+13, r20	; 0x0d
    1142:	5e 87       	std	Y+14, r21	; 0x0e
    1144:	27 01       	movw	r4, r14
    1146:	38 01       	movw	r6, r16
    1148:	98 8a       	std	Y+16, r9	; 0x10
    114a:	8f 86       	std	Y+15, r8	; 0x0f
	static float Ua     = 0.0;
	static int 	 Signe_Ua = 0;
	static int 	 Signe_Ut = 0;


	Vg = (Vg > 1.0) ? 1.0 : ((Vg < -1.0) ? -1.0 : Vg);  /* Regarde les limites (-1.0 à 1.0) */
    114c:	c8 01       	movw	r24, r16
    114e:	b7 01       	movw	r22, r14
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e8       	ldi	r20, 0x80	; 128
    1156:	5f e3       	ldi	r21, 0x3F	; 63
    1158:	0e 94 43 24 	call	0x4886	; 0x4886 <__gtsf2>
    115c:	18 16       	cp	r1, r24
    115e:	5c f4       	brge	.+22     	; 0x1176 <CalculPWM+0x76>
    1160:	0f 2e       	mov	r0, r31
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	4f 2e       	mov	r4, r31
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	5f 2e       	mov	r5, r31
    116a:	f0 e8       	ldi	r31, 0x80	; 128
    116c:	6f 2e       	mov	r6, r31
    116e:	ff e3       	ldi	r31, 0x3F	; 63
    1170:	7f 2e       	mov	r7, r31
    1172:	f0 2d       	mov	r31, r0
    1174:	14 c0       	rjmp	.+40     	; 0x119e <CalculPWM+0x9e>
    1176:	c8 01       	movw	r24, r16
    1178:	b7 01       	movw	r22, r14
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e8       	ldi	r20, 0x80	; 128
    1180:	5f eb       	ldi	r21, 0xBF	; 191
    1182:	0e 94 a3 24 	call	0x4946	; 0x4946 <__ltsf2>
    1186:	88 23       	and	r24, r24
    1188:	54 f4       	brge	.+20     	; 0x119e <CalculPWM+0x9e>
    118a:	0f 2e       	mov	r0, r31
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	4f 2e       	mov	r4, r31
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	5f 2e       	mov	r5, r31
    1194:	f0 e8       	ldi	r31, 0x80	; 128
    1196:	6f 2e       	mov	r6, r31
    1198:	ff eb       	ldi	r31, 0xBF	; 191
    119a:	7f 2e       	mov	r7, r31
    119c:	f0 2d       	mov	r31, r0
	Vd = (Vd > 1.0) ? 1.0 : ((Vd < -1.0) ? -1.0 : Vd);  /* Regarde les limites (-1.0 à 1.0) */
    119e:	c6 01       	movw	r24, r12
    11a0:	b5 01       	movw	r22, r10
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e8       	ldi	r20, 0x80	; 128
    11a8:	5f e3       	ldi	r21, 0x3F	; 63
    11aa:	0e 94 43 24 	call	0x4886	; 0x4886 <__gtsf2>
    11ae:	18 16       	cp	r1, r24
    11b0:	5c f4       	brge	.+22     	; 0x11c8 <CalculPWM+0xc8>
    11b2:	0f 2e       	mov	r0, r31
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	af 2e       	mov	r10, r31
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	bf 2e       	mov	r11, r31
    11bc:	f0 e8       	ldi	r31, 0x80	; 128
    11be:	cf 2e       	mov	r12, r31
    11c0:	ff e3       	ldi	r31, 0x3F	; 63
    11c2:	df 2e       	mov	r13, r31
    11c4:	f0 2d       	mov	r31, r0
    11c6:	14 c0       	rjmp	.+40     	; 0x11f0 <CalculPWM+0xf0>
    11c8:	c6 01       	movw	r24, r12
    11ca:	b5 01       	movw	r22, r10
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	40 e8       	ldi	r20, 0x80	; 128
    11d2:	5f eb       	ldi	r21, 0xBF	; 191
    11d4:	0e 94 a3 24 	call	0x4946	; 0x4946 <__ltsf2>
    11d8:	88 23       	and	r24, r24
    11da:	54 f4       	brge	.+20     	; 0x11f0 <CalculPWM+0xf0>
    11dc:	0f 2e       	mov	r0, r31
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	af 2e       	mov	r10, r31
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	bf 2e       	mov	r11, r31
    11e6:	f0 e8       	ldi	r31, 0x80	; 128
    11e8:	cf 2e       	mov	r12, r31
    11ea:	ff eb       	ldi	r31, 0xBF	; 191
    11ec:	df 2e       	mov	r13, r31
    11ee:	f0 2d       	mov	r31, r0
		
	Old_W = W;
    11f0:	e0 90 86 02 	lds	r14, 0x0286
    11f4:	f0 90 87 02 	lds	r15, 0x0287
    11f8:	00 91 88 02 	lds	r16, 0x0288
    11fc:	10 91 89 02 	lds	r17, 0x0289
    1200:	e0 92 82 02 	sts	0x0282, r14
    1204:	f0 92 83 02 	sts	0x0283, r15
    1208:	00 93 84 02 	sts	0x0284, r16
    120c:	10 93 85 02 	sts	0x0285, r17
	W     = 0.5*(Vmax/RAYON)*(Vd-Vg);
    1210:	c6 01       	movw	r24, r12
    1212:	b5 01       	movw	r22, r10
    1214:	a3 01       	movw	r20, r6
    1216:	92 01       	movw	r18, r4
    1218:	0e 94 3f 22 	call	0x447e	; 0x447e <__subsf3>
    121c:	2a e1       	ldi	r18, 0x1A	; 26
    121e:	32 e6       	ldi	r19, 0x62	; 98
    1220:	46 e8       	ldi	r20, 0x86	; 134
    1222:	50 e4       	ldi	r21, 0x40	; 64
    1224:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    1228:	6b 83       	std	Y+3, r22	; 0x03
    122a:	7c 83       	std	Y+4, r23	; 0x04
    122c:	8d 83       	std	Y+5, r24	; 0x05
    122e:	9e 83       	std	Y+6, r25	; 0x06
    1230:	60 93 86 02 	sts	0x0286, r22
    1234:	70 93 87 02 	sts	0x0287, r23
    1238:	80 93 88 02 	sts	0x0288, r24
    123c:	90 93 89 02 	sts	0x0289, r25
	Vt    = 0.5*(Vd+Vg);
    1240:	c6 01       	movw	r24, r12
    1242:	b5 01       	movw	r22, r10
    1244:	a3 01       	movw	r20, r6
    1246:	92 01       	movw	r18, r4
    1248:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__addsf3>
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e0       	ldi	r20, 0x00	; 0
    1252:	5f e3       	ldi	r21, 0x3F	; 63
    1254:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    1258:	3b 01       	movw	r6, r22
    125a:	4c 01       	movw	r8, r24
    125c:	60 93 7e 02 	sts	0x027E, r22
    1260:	70 93 7f 02 	sts	0x027F, r23
    1264:	80 93 80 02 	sts	0x0280, r24
    1268:	90 93 81 02 	sts	0x0281, r25

	Angle = Angle + (0.5)*TS*(W+Old_W);
    126c:	6b 81       	ldd	r22, Y+3	; 0x03
    126e:	7c 81       	ldd	r23, Y+4	; 0x04
    1270:	8d 81       	ldd	r24, Y+5	; 0x05
    1272:	9e 81       	ldd	r25, Y+6	; 0x06
    1274:	a8 01       	movw	r20, r16
    1276:	97 01       	movw	r18, r14
    1278:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__addsf3>
    127c:	2a e0       	ldi	r18, 0x0A	; 10
    127e:	37 ed       	ldi	r19, 0xD7	; 215
    1280:	43 e2       	ldi	r20, 0x23	; 35
    1282:	5b e3       	ldi	r21, 0x3B	; 59
    1284:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    1288:	20 91 8e 02 	lds	r18, 0x028E
    128c:	30 91 8f 02 	lds	r19, 0x028F
    1290:	40 91 90 02 	lds	r20, 0x0290
    1294:	50 91 91 02 	lds	r21, 0x0291
    1298:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__addsf3>
    129c:	7b 01       	movw	r14, r22
    129e:	8c 01       	movw	r16, r24
	Angle = (Angle > 2.0*Pi) ? Angle - 2*Pi : ((Angle < 0.0) ? Angle + 2*Pi : Angle); /* Angle entre 0 et 2 pi */
    12a0:	2b ed       	ldi	r18, 0xDB	; 219
    12a2:	3f e0       	ldi	r19, 0x0F	; 15
    12a4:	49 ec       	ldi	r20, 0xC9	; 201
    12a6:	50 e4       	ldi	r21, 0x40	; 64
    12a8:	0e 94 43 24 	call	0x4886	; 0x4886 <__gtsf2>
    12ac:	18 16       	cp	r1, r24
    12ae:	4c f4       	brge	.+18     	; 0x12c2 <CalculPWM+0x1c2>
    12b0:	c8 01       	movw	r24, r16
    12b2:	b7 01       	movw	r22, r14
    12b4:	2b ed       	ldi	r18, 0xDB	; 219
    12b6:	3f e0       	ldi	r19, 0x0F	; 15
    12b8:	49 ec       	ldi	r20, 0xC9	; 201
    12ba:	50 e4       	ldi	r21, 0x40	; 64
    12bc:	0e 94 3f 22 	call	0x447e	; 0x447e <__subsf3>
    12c0:	12 c0       	rjmp	.+36     	; 0x12e6 <CalculPWM+0x1e6>
    12c2:	c8 01       	movw	r24, r16
    12c4:	b7 01       	movw	r22, r14
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	0e 94 a3 24 	call	0x4946	; 0x4946 <__ltsf2>
    12d2:	88 23       	and	r24, r24
    12d4:	54 f4       	brge	.+20     	; 0x12ea <CalculPWM+0x1ea>
    12d6:	c8 01       	movw	r24, r16
    12d8:	b7 01       	movw	r22, r14
    12da:	2b ed       	ldi	r18, 0xDB	; 219
    12dc:	3f e0       	ldi	r19, 0x0F	; 15
    12de:	49 ec       	ldi	r20, 0xC9	; 201
    12e0:	50 e4       	ldi	r21, 0x40	; 64
    12e2:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__addsf3>
    12e6:	7b 01       	movw	r14, r22
    12e8:	8c 01       	movw	r16, r24
    12ea:	e0 92 8e 02 	sts	0x028E, r14
    12ee:	f0 92 8f 02 	sts	0x028F, r15
    12f2:	00 93 90 02 	sts	0x0290, r16
    12f6:	10 93 91 02 	sts	0x0291, r17
	ErreurAngle = ((Angle_D >= Pi + Angle) ? Angle_D - 2*Pi : ((Angle_D <= -Pi + Angle) ? Angle_D + 2*Pi : Angle_D))-Angle;
    12fa:	c8 01       	movw	r24, r16
    12fc:	b7 01       	movw	r22, r14
    12fe:	2b ed       	ldi	r18, 0xDB	; 219
    1300:	3f e0       	ldi	r19, 0x0F	; 15
    1302:	49 e4       	ldi	r20, 0x49	; 73
    1304:	50 e4       	ldi	r21, 0x40	; 64
    1306:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__addsf3>
    130a:	9b 01       	movw	r18, r22
    130c:	ac 01       	movw	r20, r24
    130e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1310:	7c 85       	ldd	r23, Y+12	; 0x0c
    1312:	8d 85       	ldd	r24, Y+13	; 0x0d
    1314:	9e 85       	ldd	r25, Y+14	; 0x0e
    1316:	0e 94 73 24 	call	0x48e6	; 0x48e6 <__gesf2>
    131a:	88 23       	and	r24, r24
    131c:	5c f0       	brlt	.+22     	; 0x1334 <CalculPWM+0x234>
    131e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1320:	7c 85       	ldd	r23, Y+12	; 0x0c
    1322:	8d 85       	ldd	r24, Y+13	; 0x0d
    1324:	9e 85       	ldd	r25, Y+14	; 0x0e
    1326:	2b ed       	ldi	r18, 0xDB	; 219
    1328:	3f e0       	ldi	r19, 0x0F	; 15
    132a:	49 ec       	ldi	r20, 0xC9	; 201
    132c:	50 e4       	ldi	r21, 0x40	; 64
    132e:	0e 94 3f 22 	call	0x447e	; 0x447e <__subsf3>
    1332:	1c c0       	rjmp	.+56     	; 0x136c <CalculPWM+0x26c>
    1334:	c8 01       	movw	r24, r16
    1336:	b7 01       	movw	r22, r14
    1338:	2b ed       	ldi	r18, 0xDB	; 219
    133a:	3f e0       	ldi	r19, 0x0F	; 15
    133c:	49 e4       	ldi	r20, 0x49	; 73
    133e:	50 e4       	ldi	r21, 0x40	; 64
    1340:	0e 94 3f 22 	call	0x447e	; 0x447e <__subsf3>
    1344:	9b 01       	movw	r18, r22
    1346:	ac 01       	movw	r20, r24
    1348:	6b 85       	ldd	r22, Y+11	; 0x0b
    134a:	7c 85       	ldd	r23, Y+12	; 0x0c
    134c:	8d 85       	ldd	r24, Y+13	; 0x0d
    134e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1350:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <__lesf2>
    1354:	18 16       	cp	r1, r24
    1356:	74 f0       	brlt	.+28     	; 0x1374 <CalculPWM+0x274>
    1358:	6b 85       	ldd	r22, Y+11	; 0x0b
    135a:	7c 85       	ldd	r23, Y+12	; 0x0c
    135c:	8d 85       	ldd	r24, Y+13	; 0x0d
    135e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1360:	2b ed       	ldi	r18, 0xDB	; 219
    1362:	3f e0       	ldi	r19, 0x0F	; 15
    1364:	49 ec       	ldi	r20, 0xC9	; 201
    1366:	50 e4       	ldi	r21, 0x40	; 64
    1368:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__addsf3>
    136c:	6b 87       	std	Y+11, r22	; 0x0b
    136e:	7c 87       	std	Y+12, r23	; 0x0c
    1370:	8d 87       	std	Y+13, r24	; 0x0d
    1372:	9e 87       	std	Y+14, r25	; 0x0e
    1374:	6b 85       	ldd	r22, Y+11	; 0x0b
    1376:	7c 85       	ldd	r23, Y+12	; 0x0c
    1378:	8d 85       	ldd	r24, Y+13	; 0x0d
    137a:	9e 85       	ldd	r25, Y+14	; 0x0e
    137c:	a8 01       	movw	r20, r16
    137e:	97 01       	movw	r18, r14
    1380:	0e 94 3f 22 	call	0x447e	; 0x447e <__subsf3>
    1384:	5b 01       	movw	r10, r22
    1386:	6c 01       	movw	r12, r24
    1388:	60 93 8a 02 	sts	0x028A, r22
    138c:	70 93 8b 02 	sts	0x028B, r23
    1390:	80 93 8c 02 	sts	0x028C, r24
    1394:	90 93 8d 02 	sts	0x028D, r25

	Ut = -H11*Vt + H12*Vitesse_D;
    1398:	c4 01       	movw	r24, r8
    139a:	b3 01       	movw	r22, r6
    139c:	28 ee       	ldi	r18, 0xE8	; 232
    139e:	31 eb       	ldi	r19, 0xB1	; 177
    13a0:	49 e7       	ldi	r20, 0x79	; 121
    13a2:	50 ec       	ldi	r21, 0xC0	; 192
    13a4:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    13a8:	7b 01       	movw	r14, r22
    13aa:	8c 01       	movw	r16, r24
    13ac:	6f 81       	ldd	r22, Y+7	; 0x07
    13ae:	78 85       	ldd	r23, Y+8	; 0x08
    13b0:	89 85       	ldd	r24, Y+9	; 0x09
    13b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b4:	24 ef       	ldi	r18, 0xF4	; 244
    13b6:	38 ed       	ldi	r19, 0xD8	; 216
    13b8:	4c e9       	ldi	r20, 0x9C	; 156
    13ba:	50 e4       	ldi	r21, 0x40	; 64
    13bc:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    13c0:	9b 01       	movw	r18, r22
    13c2:	ac 01       	movw	r20, r24
    13c4:	c8 01       	movw	r24, r16
    13c6:	b7 01       	movw	r22, r14
    13c8:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__addsf3>
    13cc:	3b 01       	movw	r6, r22
    13ce:	4c 01       	movw	r8, r24
	Ua = H21*ErreurAngle - H22*W;
    13d0:	c6 01       	movw	r24, r12
    13d2:	b5 01       	movw	r22, r10
    13d4:	21 e2       	ldi	r18, 0x21	; 33
    13d6:	37 ea       	ldi	r19, 0xA7	; 167
    13d8:	44 e9       	ldi	r20, 0x94	; 148
    13da:	5f e3       	ldi	r21, 0x3F	; 63
    13dc:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    13e0:	7b 01       	movw	r14, r22
    13e2:	8c 01       	movw	r16, r24
    13e4:	6b 81       	ldd	r22, Y+3	; 0x03
    13e6:	7c 81       	ldd	r23, Y+4	; 0x04
    13e8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ea:	9e 81       	ldd	r25, Y+6	; 0x06
    13ec:	28 e1       	ldi	r18, 0x18	; 24
    13ee:	37 ea       	ldi	r19, 0xA7	; 167
    13f0:	44 e1       	ldi	r20, 0x14	; 20
    13f2:	5f eb       	ldi	r21, 0xBF	; 191
    13f4:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    13f8:	9b 01       	movw	r18, r22
    13fa:	ac 01       	movw	r20, r24
    13fc:	c8 01       	movw	r24, r16
    13fe:	b7 01       	movw	r22, r14
    1400:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__addsf3>
    1404:	5b 01       	movw	r10, r22
    1406:	6c 01       	movw	r12, r24
			
	Signe_Ua = (Ua >= 0.0)   ? 1 : -1;
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	0e 94 73 24 	call	0x48e6	; 0x48e6 <__gesf2>
    1414:	87 ff       	sbrs	r24, 7
    1416:	03 c0       	rjmp	.+6      	; 0x141e <CalculPWM+0x31e>
    1418:	0f ef       	ldi	r16, 0xFF	; 255
    141a:	1f ef       	ldi	r17, 0xFF	; 255
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <CalculPWM+0x322>
    141e:	01 e0       	ldi	r16, 0x01	; 1
    1420:	10 e0       	ldi	r17, 0x00	; 0
    1422:	10 93 75 02 	sts	0x0275, r17
    1426:	00 93 74 02 	sts	0x0274, r16
	Signe_Ut = (Ut >= 0.0) ? 1 : -1;
    142a:	c4 01       	movw	r24, r8
    142c:	b3 01       	movw	r22, r6
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	0e 94 73 24 	call	0x48e6	; 0x48e6 <__gesf2>
    143a:	87 ff       	sbrs	r24, 7
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <CalculPWM+0x348>
    143e:	2f ef       	ldi	r18, 0xFF	; 255
    1440:	3f ef       	ldi	r19, 0xFF	; 255
    1442:	3a 83       	std	Y+2, r19	; 0x02
    1444:	29 83       	std	Y+1, r18	; 0x01
    1446:	04 c0       	rjmp	.+8      	; 0x1450 <CalculPWM+0x350>
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	9a 83       	std	Y+2, r25	; 0x02
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	a9 81       	ldd	r26, Y+1	; 0x01
    1452:	ba 81       	ldd	r27, Y+2	; 0x02
    1454:	b0 93 73 02 	sts	0x0273, r27
    1458:	a0 93 72 02 	sts	0x0272, r26
	
	Ua = (Signe_Ua*Ua > 1.0) ? Signe_Ua*1.0 : ((Signe_Ua*Ua <= 0.05) ? 0.0 : Ua);
    145c:	b8 01       	movw	r22, r16
    145e:	88 27       	eor	r24, r24
    1460:	77 fd       	sbrc	r23, 7
    1462:	80 95       	com	r24
    1464:	98 2f       	mov	r25, r24
    1466:	0e 94 03 25 	call	0x4a06	; 0x4a06 <__floatsisf>
    146a:	1b 01       	movw	r2, r22
    146c:	2c 01       	movw	r4, r24
    146e:	a6 01       	movw	r20, r12
    1470:	95 01       	movw	r18, r10
    1472:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    1476:	7b 01       	movw	r14, r22
    1478:	8c 01       	movw	r16, r24
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e8       	ldi	r20, 0x80	; 128
    1480:	5f e3       	ldi	r21, 0x3F	; 63
    1482:	0e 94 43 24 	call	0x4886	; 0x4886 <__gtsf2>
    1486:	18 16       	cp	r1, r24
    1488:	1c f4       	brge	.+6      	; 0x1490 <CalculPWM+0x390>
    148a:	62 01       	movw	r12, r4
    148c:	51 01       	movw	r10, r2
    148e:	14 c0       	rjmp	.+40     	; 0x14b8 <CalculPWM+0x3b8>
    1490:	c8 01       	movw	r24, r16
    1492:	b7 01       	movw	r22, r14
    1494:	2d ec       	ldi	r18, 0xCD	; 205
    1496:	3c ec       	ldi	r19, 0xCC	; 204
    1498:	4c e4       	ldi	r20, 0x4C	; 76
    149a:	5d e3       	ldi	r21, 0x3D	; 61
    149c:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <__lesf2>
    14a0:	18 16       	cp	r1, r24
    14a2:	54 f0       	brlt	.+20     	; 0x14b8 <CalculPWM+0x3b8>
    14a4:	0f 2e       	mov	r0, r31
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	af 2e       	mov	r10, r31
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	bf 2e       	mov	r11, r31
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	cf 2e       	mov	r12, r31
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	df 2e       	mov	r13, r31
    14b6:	f0 2d       	mov	r31, r0
    14b8:	a0 92 76 02 	sts	0x0276, r10
    14bc:	b0 92 77 02 	sts	0x0277, r11
    14c0:	c0 92 78 02 	sts	0x0278, r12
    14c4:	d0 92 79 02 	sts	0x0279, r13
	Ut = (Signe_Ut*Ut > 1.0) ? Signe_Ut*1.0 : Ut;
    14c8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ca:	fa 81       	ldd	r31, Y+2	; 0x02
    14cc:	bf 01       	movw	r22, r30
    14ce:	88 27       	eor	r24, r24
    14d0:	77 fd       	sbrc	r23, 7
    14d2:	80 95       	com	r24
    14d4:	98 2f       	mov	r25, r24
    14d6:	0e 94 03 25 	call	0x4a06	; 0x4a06 <__floatsisf>
    14da:	7b 01       	movw	r14, r22
    14dc:	8c 01       	movw	r16, r24
    14de:	a4 01       	movw	r20, r8
    14e0:	93 01       	movw	r18, r6
    14e2:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	40 e8       	ldi	r20, 0x80	; 128
    14ec:	5f e3       	ldi	r21, 0x3F	; 63
    14ee:	0e 94 43 24 	call	0x4886	; 0x4886 <__gtsf2>
    14f2:	18 16       	cp	r1, r24
    14f4:	14 f4       	brge	.+4      	; 0x14fa <CalculPWM+0x3fa>
    14f6:	37 01       	movw	r6, r14
    14f8:	48 01       	movw	r8, r16
	Ut = ((Signe_Ut*Ut) > (1.0 - Signe_Ua*Ua)) ? Signe_Ut*(1.0 - Signe_Ua*Ua) : Ut;
    14fa:	c2 01       	movw	r24, r4
    14fc:	b1 01       	movw	r22, r2
    14fe:	a6 01       	movw	r20, r12
    1500:	95 01       	movw	r18, r10
    1502:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    1506:	9b 01       	movw	r18, r22
    1508:	ac 01       	movw	r20, r24
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	80 e8       	ldi	r24, 0x80	; 128
    1510:	9f e3       	ldi	r25, 0x3F	; 63
    1512:	0e 94 3f 22 	call	0x447e	; 0x447e <__subsf3>
    1516:	1b 01       	movw	r2, r22
    1518:	2c 01       	movw	r4, r24
    151a:	c8 01       	movw	r24, r16
    151c:	b7 01       	movw	r22, r14
    151e:	a4 01       	movw	r20, r8
    1520:	93 01       	movw	r18, r6
    1522:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    1526:	a2 01       	movw	r20, r4
    1528:	91 01       	movw	r18, r2
    152a:	0e 94 43 24 	call	0x4886	; 0x4886 <__gtsf2>
    152e:	18 16       	cp	r1, r24
    1530:	44 f4       	brge	.+16     	; 0x1542 <CalculPWM+0x442>
    1532:	c8 01       	movw	r24, r16
    1534:	b7 01       	movw	r22, r14
    1536:	a2 01       	movw	r20, r4
    1538:	91 01       	movw	r18, r2
    153a:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    153e:	3b 01       	movw	r6, r22
    1540:	4c 01       	movw	r8, r24
    1542:	60 92 7a 02 	sts	0x027A, r6
    1546:	70 92 7b 02 	sts	0x027B, r7
    154a:	80 92 7c 02 	sts	0x027C, r8
    154e:	90 92 7d 02 	sts	0x027D, r9


	*Duty_D = (Ut+Ua);
    1552:	c4 01       	movw	r24, r8
    1554:	b3 01       	movw	r22, r6
    1556:	a6 01       	movw	r20, r12
    1558:	95 01       	movw	r18, r10
    155a:	0e 94 70 22 	call	0x44e0	; 0x44e0 <__addsf3>
    155e:	ad a1       	ldd	r26, Y+37	; 0x25
    1560:	be a1       	ldd	r27, Y+38	; 0x26
    1562:	6d 93       	st	X+, r22
    1564:	7d 93       	st	X+, r23
    1566:	8d 93       	st	X+, r24
    1568:	9c 93       	st	X, r25
    156a:	13 97       	sbiw	r26, 0x03	; 3
	*Duty_G = (Ut-Ua);
    156c:	c4 01       	movw	r24, r8
    156e:	b3 01       	movw	r22, r6
    1570:	a6 01       	movw	r20, r12
    1572:	95 01       	movw	r18, r10
    1574:	0e 94 3f 22 	call	0x447e	; 0x447e <__subsf3>
    1578:	ef 85       	ldd	r30, Y+15	; 0x0f
    157a:	f8 89       	ldd	r31, Y+16	; 0x10
    157c:	60 83       	st	Z, r22
    157e:	71 83       	std	Z+1, r23	; 0x01
    1580:	82 83       	std	Z+2, r24	; 0x02
    1582:	93 83       	std	Z+3, r25	; 0x03

	*Duty_D = (*Duty_D > 0.99) ? 0.99 : ((*Duty_D < -0.99) ? -0.99 : *Duty_D);
    1584:	ad a1       	ldd	r26, Y+37	; 0x25
    1586:	be a1       	ldd	r27, Y+38	; 0x26
    1588:	ed 90       	ld	r14, X+
    158a:	fd 90       	ld	r15, X+
    158c:	0d 91       	ld	r16, X+
    158e:	1c 91       	ld	r17, X
    1590:	c8 01       	movw	r24, r16
    1592:	b7 01       	movw	r22, r14
    1594:	24 ea       	ldi	r18, 0xA4	; 164
    1596:	30 e7       	ldi	r19, 0x70	; 112
    1598:	4d e7       	ldi	r20, 0x7D	; 125
    159a:	5f e3       	ldi	r21, 0x3F	; 63
    159c:	0e 94 43 24 	call	0x4886	; 0x4886 <__gtsf2>
    15a0:	18 16       	cp	r1, r24
    15a2:	5c f4       	brge	.+22     	; 0x15ba <CalculPWM+0x4ba>
    15a4:	0f 2e       	mov	r0, r31
    15a6:	f4 ea       	ldi	r31, 0xA4	; 164
    15a8:	ef 2e       	mov	r14, r31
    15aa:	f0 e7       	ldi	r31, 0x70	; 112
    15ac:	ff 2e       	mov	r15, r31
    15ae:	fd e7       	ldi	r31, 0x7D	; 125
    15b0:	0f 2f       	mov	r16, r31
    15b2:	ff e3       	ldi	r31, 0x3F	; 63
    15b4:	1f 2f       	mov	r17, r31
    15b6:	f0 2d       	mov	r31, r0
    15b8:	14 c0       	rjmp	.+40     	; 0x15e2 <CalculPWM+0x4e2>
    15ba:	c8 01       	movw	r24, r16
    15bc:	b7 01       	movw	r22, r14
    15be:	24 ea       	ldi	r18, 0xA4	; 164
    15c0:	30 e7       	ldi	r19, 0x70	; 112
    15c2:	4d e7       	ldi	r20, 0x7D	; 125
    15c4:	5f eb       	ldi	r21, 0xBF	; 191
    15c6:	0e 94 a3 24 	call	0x4946	; 0x4946 <__ltsf2>
    15ca:	88 23       	and	r24, r24
    15cc:	54 f4       	brge	.+20     	; 0x15e2 <CalculPWM+0x4e2>
    15ce:	0f 2e       	mov	r0, r31
    15d0:	f4 ea       	ldi	r31, 0xA4	; 164
    15d2:	ef 2e       	mov	r14, r31
    15d4:	f0 e7       	ldi	r31, 0x70	; 112
    15d6:	ff 2e       	mov	r15, r31
    15d8:	fd e7       	ldi	r31, 0x7D	; 125
    15da:	0f 2f       	mov	r16, r31
    15dc:	ff eb       	ldi	r31, 0xBF	; 191
    15de:	1f 2f       	mov	r17, r31
    15e0:	f0 2d       	mov	r31, r0
    15e2:	ed a1       	ldd	r30, Y+37	; 0x25
    15e4:	fe a1       	ldd	r31, Y+38	; 0x26
    15e6:	e0 82       	st	Z, r14
    15e8:	f1 82       	std	Z+1, r15	; 0x01
    15ea:	02 83       	std	Z+2, r16	; 0x02
    15ec:	13 83       	std	Z+3, r17	; 0x03
	*Duty_G = (*Duty_G > 0.99) ? 0.99 : ((*Duty_G < -0.99) ? -0.99 : *Duty_G);	
    15ee:	af 85       	ldd	r26, Y+15	; 0x0f
    15f0:	b8 89       	ldd	r27, Y+16	; 0x10
    15f2:	ed 90       	ld	r14, X+
    15f4:	fd 90       	ld	r15, X+
    15f6:	0d 91       	ld	r16, X+
    15f8:	1c 91       	ld	r17, X
    15fa:	c8 01       	movw	r24, r16
    15fc:	b7 01       	movw	r22, r14
    15fe:	24 ea       	ldi	r18, 0xA4	; 164
    1600:	30 e7       	ldi	r19, 0x70	; 112
    1602:	4d e7       	ldi	r20, 0x7D	; 125
    1604:	5f e3       	ldi	r21, 0x3F	; 63
    1606:	0e 94 43 24 	call	0x4886	; 0x4886 <__gtsf2>
    160a:	18 16       	cp	r1, r24
    160c:	5c f4       	brge	.+22     	; 0x1624 <CalculPWM+0x524>
    160e:	0f 2e       	mov	r0, r31
    1610:	f4 ea       	ldi	r31, 0xA4	; 164
    1612:	ef 2e       	mov	r14, r31
    1614:	f0 e7       	ldi	r31, 0x70	; 112
    1616:	ff 2e       	mov	r15, r31
    1618:	fd e7       	ldi	r31, 0x7D	; 125
    161a:	0f 2f       	mov	r16, r31
    161c:	ff e3       	ldi	r31, 0x3F	; 63
    161e:	1f 2f       	mov	r17, r31
    1620:	f0 2d       	mov	r31, r0
    1622:	14 c0       	rjmp	.+40     	; 0x164c <CalculPWM+0x54c>
    1624:	c8 01       	movw	r24, r16
    1626:	b7 01       	movw	r22, r14
    1628:	24 ea       	ldi	r18, 0xA4	; 164
    162a:	30 e7       	ldi	r19, 0x70	; 112
    162c:	4d e7       	ldi	r20, 0x7D	; 125
    162e:	5f eb       	ldi	r21, 0xBF	; 191
    1630:	0e 94 a3 24 	call	0x4946	; 0x4946 <__ltsf2>
    1634:	88 23       	and	r24, r24
    1636:	54 f4       	brge	.+20     	; 0x164c <CalculPWM+0x54c>
    1638:	0f 2e       	mov	r0, r31
    163a:	f4 ea       	ldi	r31, 0xA4	; 164
    163c:	ef 2e       	mov	r14, r31
    163e:	f0 e7       	ldi	r31, 0x70	; 112
    1640:	ff 2e       	mov	r15, r31
    1642:	fd e7       	ldi	r31, 0x7D	; 125
    1644:	0f 2f       	mov	r16, r31
    1646:	ff eb       	ldi	r31, 0xBF	; 191
    1648:	1f 2f       	mov	r17, r31
    164a:	f0 2d       	mov	r31, r0
    164c:	ef 85       	ldd	r30, Y+15	; 0x0f
    164e:	f8 89       	ldd	r31, Y+16	; 0x10
    1650:	e0 82       	st	Z, r14
    1652:	f1 82       	std	Z+1, r15	; 0x01
    1654:	02 83       	std	Z+2, r16	; 0x02
    1656:	13 83       	std	Z+3, r17	; 0x03
}
    1658:	60 96       	adiw	r28, 0x10	; 16
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	1f 91       	pop	r17
    166a:	0f 91       	pop	r16
    166c:	ff 90       	pop	r15
    166e:	ef 90       	pop	r14
    1670:	df 90       	pop	r13
    1672:	cf 90       	pop	r12
    1674:	bf 90       	pop	r11
    1676:	af 90       	pop	r10
    1678:	9f 90       	pop	r9
    167a:	8f 90       	pop	r8
    167c:	7f 90       	pop	r7
    167e:	6f 90       	pop	r6
    1680:	5f 90       	pop	r5
    1682:	4f 90       	pop	r4
    1684:	3f 90       	pop	r3
    1686:	2f 90       	pop	r2
    1688:	08 95       	ret

0000168a <initMotors>:
void initMotors(void)
{
	//TODO: move calib here
	
	//initialize motor direction outputs
	motorDirection = (LEFT_MOTOR_BRAKE)|(RIGHT_MOTOR_BRAKE);
    168a:	8c ec       	ldi	r24, 0xCC	; 204
    168c:	80 93 cd 03 	sts	0x03CD, r24
	PORTD = motorDirection;
    1690:	80 91 cd 03 	lds	r24, 0x03CD
    1694:	82 bb       	out	0x12, r24	; 18

	//Init motor command from controler
	requestedCommand.speed = 100;
    1696:	84 e6       	ldi	r24, 0x64	; 100
    1698:	80 93 92 03 	sts	0x0392, r24
	requestedCommand.angle = 0;
    169c:	10 92 93 03 	sts	0x0393, r1

	//init all motor and adc data
	adcValues.left = 0;
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	a0 e0       	ldi	r26, 0x00	; 0
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	80 93 9a 02 	sts	0x029A, r24
    16ac:	90 93 9b 02 	sts	0x029B, r25
    16b0:	a0 93 9c 02 	sts	0x029C, r26
    16b4:	b0 93 9d 02 	sts	0x029D, r27
	adcValues.right = 0;
    16b8:	80 93 9e 02 	sts	0x029E, r24
    16bc:	90 93 9f 02 	sts	0x029F, r25
    16c0:	a0 93 a0 02 	sts	0x02A0, r26
    16c4:	b0 93 a1 02 	sts	0x02A1, r27
	dutyCycleLeft = 0;
    16c8:	80 93 d0 03 	sts	0x03D0, r24
    16cc:	90 93 d1 03 	sts	0x03D1, r25
    16d0:	a0 93 d2 03 	sts	0x03D2, r26
    16d4:	b0 93 d3 03 	sts	0x03D3, r27
	dutyCycleRight = 0;
    16d8:	80 93 74 03 	sts	0x0374, r24
    16dc:	90 93 75 03 	sts	0x0375, r25
    16e0:	a0 93 76 03 	sts	0x0376, r26
    16e4:	b0 93 77 03 	sts	0x0377, r27
	computedCommand.speed = 0.0;
    16e8:	80 93 96 02 	sts	0x0296, r24
    16ec:	90 93 97 02 	sts	0x0297, r25
    16f0:	a0 93 98 02 	sts	0x0298, r26
    16f4:	b0 93 99 02 	sts	0x0299, r27
	computedCommand.angle = 0.0;
    16f8:	80 93 92 02 	sts	0x0292, r24
    16fc:	90 93 93 02 	sts	0x0293, r25
    1700:	a0 93 94 02 	sts	0x0294, r26
    1704:	b0 93 95 02 	sts	0x0295, r27
	
	//Set motors outputs to 0
	OCR1A = 0;
    1708:	1b bc       	out	0x2b, r1	; 43
    170a:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;
    170c:	19 bc       	out	0x29, r1	; 41
    170e:	18 bc       	out	0x28, r1	; 40
}
    1710:	08 95       	ret

00001712 <checkDirection>:
//
///////////////////////////////////////////
void checkDirection(void)
{

	if (convertedMotorSpeed.left > ABSOLUTE_ZERO)	//if dutyCycle is positive
    1712:	80 91 6c 03 	lds	r24, 0x036C
    1716:	90 91 6d 03 	lds	r25, 0x036D
    171a:	18 16       	cp	r1, r24
    171c:	19 06       	cpc	r1, r25
    171e:	24 f4       	brge	.+8      	; 0x1728 <checkDirection+0x16>
	{
		motorDirection = LEFT_MOTOR_FORWARD;
    1720:	84 e0       	ldi	r24, 0x04	; 4
    1722:	80 93 cd 03 	sts	0x03CD, r24
    1726:	1d c0       	rjmp	.+58     	; 0x1762 <checkDirection+0x50>
	}	
	else if (convertedMotorSpeed.left < ABSOLUTE_ZERO)	//if it is negative
    1728:	80 91 6c 03 	lds	r24, 0x036C
    172c:	90 91 6d 03 	lds	r25, 0x036D
    1730:	97 ff       	sbrs	r25, 7
    1732:	0f c0       	rjmp	.+30     	; 0x1752 <checkDirection+0x40>
	{
		motorDirection = LEFT_MOTOR_BACKWARD;
    1734:	88 e0       	ldi	r24, 0x08	; 8
    1736:	80 93 cd 03 	sts	0x03CD, r24
		convertedMotorSpeed.left = ((-1)*convertedMotorSpeed.left);
    173a:	80 91 6c 03 	lds	r24, 0x036C
    173e:	90 91 6d 03 	lds	r25, 0x036D
    1742:	90 95       	com	r25
    1744:	81 95       	neg	r24
    1746:	9f 4f       	sbci	r25, 0xFF	; 255
    1748:	90 93 6d 03 	sts	0x036D, r25
    174c:	80 93 6c 03 	sts	0x036C, r24
    1750:	08 c0       	rjmp	.+16     	; 0x1762 <checkDirection+0x50>
	}
	else if (convertedMotorSpeed.left == ABSOLUTE_ZERO)	//if we got a big 0
    1752:	80 91 6c 03 	lds	r24, 0x036C
    1756:	90 91 6d 03 	lds	r25, 0x036D
    175a:	89 2b       	or	r24, r25
    175c:	11 f4       	brne	.+4      	; 0x1762 <checkDirection+0x50>
	{
		motorDirection = LEFT_MOTOR_STOP;
    175e:	10 92 cd 03 	sts	0x03CD, r1
	}
	
	if (convertedMotorSpeed.right > ABSOLUTE_ZERO)	//same thing as with left
    1762:	80 91 6e 03 	lds	r24, 0x036E
    1766:	90 91 6f 03 	lds	r25, 0x036F
    176a:	18 16       	cp	r1, r24
    176c:	19 06       	cpc	r1, r25
    176e:	24 f4       	brge	.+8      	; 0x1778 <checkDirection+0x66>
	{
		motorDirection |= RIGHT_MOTOR_FORWARD;
    1770:	80 91 cd 03 	lds	r24, 0x03CD
    1774:	80 64       	ori	r24, 0x40	; 64
    1776:	22 c0       	rjmp	.+68     	; 0x17bc <checkDirection+0xaa>
	}	
	else if (convertedMotorSpeed.right < ABSOLUTE_ZERO)
    1778:	80 91 6e 03 	lds	r24, 0x036E
    177c:	90 91 6f 03 	lds	r25, 0x036F
    1780:	97 ff       	sbrs	r25, 7
    1782:	11 c0       	rjmp	.+34     	; 0x17a6 <checkDirection+0x94>
	{
		motorDirection |= RIGHT_MOTOR_BACKWARD;
    1784:	80 91 cd 03 	lds	r24, 0x03CD
    1788:	80 68       	ori	r24, 0x80	; 128
    178a:	80 93 cd 03 	sts	0x03CD, r24
		convertedMotorSpeed.right = ((-1)*convertedMotorSpeed.right);
    178e:	80 91 6e 03 	lds	r24, 0x036E
    1792:	90 91 6f 03 	lds	r25, 0x036F
    1796:	90 95       	com	r25
    1798:	81 95       	neg	r24
    179a:	9f 4f       	sbci	r25, 0xFF	; 255
    179c:	90 93 6f 03 	sts	0x036F, r25
    17a0:	80 93 6e 03 	sts	0x036E, r24
    17a4:	08 95       	ret
	}
	else if (convertedMotorSpeed.right == ABSOLUTE_ZERO)	//in the case of a 0
    17a6:	80 91 6e 03 	lds	r24, 0x036E
    17aa:	90 91 6f 03 	lds	r25, 0x036F
    17ae:	89 2b       	or	r24, r25
    17b0:	61 f4       	brne	.+24     	; 0x17ca <checkDirection+0xb8>
	{
		if (motorDirection == (LEFT_MOTOR_STOP))	//verify if left is also 0
    17b2:	80 91 cd 03 	lds	r24, 0x03CD
    17b6:	88 23       	and	r24, r24
    17b8:	21 f4       	brne	.+8      	; 0x17c2 <checkDirection+0xb0>
		{
			motorDirection = (LEFT_MOTOR_BRAKE | RIGHT_MOTOR_BRAKE);	//then brake
    17ba:	8c ec       	ldi	r24, 0xCC	; 204
    17bc:	80 93 cd 03 	sts	0x03CD, r24
    17c0:	08 95       	ret
		}
		else
		{
			motorDirection |= RIGHT_MOTOR_STOP;	//else only send stop
    17c2:	80 91 cd 03 	lds	r24, 0x03CD
    17c6:	80 93 cd 03 	sts	0x03CD, r24
    17ca:	08 95       	ret

000017cc <setMotorOutputs>:


	//set motor outputs
	//TODO: Add a way to avoid obstacles
	
	if ((objectDetectedRight == 1) || (objectDetectedLeft == 1))
    17cc:	80 91 c4 03 	lds	r24, 0x03C4
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	21 f0       	breq	.+8      	; 0x17dc <setMotorOutputs+0x10>
    17d4:	80 91 a3 02 	lds	r24, 0x02A3
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	31 f4       	brne	.+12     	; 0x17e8 <setMotorOutputs+0x1c>
	{
		OCR1A = 0;
    17dc:	1b bc       	out	0x2b, r1	; 43
    17de:	1a bc       	out	0x2a, r1	; 42
		OCR1B = 0;
    17e0:	19 bc       	out	0x29, r1	; 41
    17e2:	18 bc       	out	0x28, r1	; 40
		PORTD = (LEFT_MOTOR_BRAKE | RIGHT_MOTOR_BRAKE);
    17e4:	8c ec       	ldi	r24, 0xCC	; 204
    17e6:	0e c0       	rjmp	.+28     	; 0x1804 <setMotorOutputs+0x38>

	}
	else
	{
		OCR1A = convertedMotorSpeed.left;
    17e8:	80 91 6c 03 	lds	r24, 0x036C
    17ec:	90 91 6d 03 	lds	r25, 0x036D
    17f0:	9b bd       	out	0x2b, r25	; 43
    17f2:	8a bd       	out	0x2a, r24	; 42
		OCR1B = convertedMotorSpeed.right;
    17f4:	80 91 6e 03 	lds	r24, 0x036E
    17f8:	90 91 6f 03 	lds	r25, 0x036F
    17fc:	99 bd       	out	0x29, r25	; 41
    17fe:	88 bd       	out	0x28, r24	; 40
		PORTD = motorDirection;
    1800:	80 91 cd 03 	lds	r24, 0x03CD
    1804:	82 bb       	out	0x12, r24	; 18
    1806:	08 95       	ret

00001808 <convertValuesToInt>:
//
///////////////////////////////////////////
void convertValuesToInt(void)
{

	convertedMotorSpeed.left = (signed int)((dutyCycleLeft*MAX_OVERFLOW_VALUE));
    1808:	60 91 d0 03 	lds	r22, 0x03D0
    180c:	70 91 d1 03 	lds	r23, 0x03D1
    1810:	80 91 d2 03 	lds	r24, 0x03D2
    1814:	90 91 d3 03 	lds	r25, 0x03D3
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e4       	ldi	r19, 0x40	; 64
    181c:	4c e1       	ldi	r20, 0x1C	; 28
    181e:	56 e4       	ldi	r21, 0x46	; 70
    1820:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    1824:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <__fixsfsi>
    1828:	70 93 6d 03 	sts	0x036D, r23
    182c:	60 93 6c 03 	sts	0x036C, r22
	convertedMotorSpeed.right = (signed int)((dutyCycleRight*MAX_OVERFLOW_VALUE));
    1830:	60 91 74 03 	lds	r22, 0x0374
    1834:	70 91 75 03 	lds	r23, 0x0375
    1838:	80 91 76 03 	lds	r24, 0x0376
    183c:	90 91 77 03 	lds	r25, 0x0377
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e4       	ldi	r19, 0x40	; 64
    1844:	4c e1       	ldi	r20, 0x1C	; 28
    1846:	56 e4       	ldi	r21, 0x46	; 70
    1848:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    184c:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <__fixsfsi>
    1850:	70 93 6f 03 	sts	0x036F, r23
    1854:	60 93 6e 03 	sts	0x036E, r22

}
    1858:	08 95       	ret

0000185a <setMotors>:
//
//Return value:	-none
//
///////////////////////////////////////////
void setMotors(void)
{
    185a:	8f 92       	push	r8
    185c:	9f 92       	push	r9
    185e:	af 92       	push	r10
    1860:	bf 92       	push	r11
    1862:	cf 92       	push	r12
    1864:	df 92       	push	r13
    1866:	ef 92       	push	r14
    1868:	ff 92       	push	r15
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
	//get new duty cycle values
	CalculPWM((float)computedCommand.speed, (float)computedCommand.angle, adcValues.left, adcValues.right, &dutyCycleLeft, &dutyCycleRight);
    186e:	e0 90 9a 02 	lds	r14, 0x029A
    1872:	f0 90 9b 02 	lds	r15, 0x029B
    1876:	00 91 9c 02 	lds	r16, 0x029C
    187a:	10 91 9d 02 	lds	r17, 0x029D
    187e:	a0 90 9e 02 	lds	r10, 0x029E
    1882:	b0 90 9f 02 	lds	r11, 0x029F
    1886:	c0 90 a0 02 	lds	r12, 0x02A0
    188a:	d0 90 a1 02 	lds	r13, 0x02A1
    188e:	00 d0       	rcall	.+0      	; 0x1890 <setMotors+0x36>
    1890:	60 91 96 02 	lds	r22, 0x0296
    1894:	70 91 97 02 	lds	r23, 0x0297
    1898:	80 91 98 02 	lds	r24, 0x0298
    189c:	90 91 99 02 	lds	r25, 0x0299
    18a0:	20 91 92 02 	lds	r18, 0x0292
    18a4:	30 91 93 02 	lds	r19, 0x0293
    18a8:	40 91 94 02 	lds	r20, 0x0294
    18ac:	50 91 95 02 	lds	r21, 0x0295
    18b0:	e4 e7       	ldi	r30, 0x74	; 116
    18b2:	f3 e0       	ldi	r31, 0x03	; 3
    18b4:	ad b7       	in	r26, 0x3d	; 61
    18b6:	be b7       	in	r27, 0x3e	; 62
    18b8:	12 96       	adiw	r26, 0x02	; 2
    18ba:	fc 93       	st	X, r31
    18bc:	ee 93       	st	-X, r30
    18be:	11 97       	sbiw	r26, 0x01	; 1
    18c0:	e0 ed       	ldi	r30, 0xD0	; 208
    18c2:	8e 2e       	mov	r8, r30
    18c4:	e3 e0       	ldi	r30, 0x03	; 3
    18c6:	9e 2e       	mov	r9, r30
    18c8:	0e 94 80 08 	call	0x1100	; 0x1100 <CalculPWM>
//
///////////////////////////////////////////
void convertValuesToInt(void)
{

	convertedMotorSpeed.left = (signed int)((dutyCycleLeft*MAX_OVERFLOW_VALUE));
    18cc:	60 91 d0 03 	lds	r22, 0x03D0
    18d0:	70 91 d1 03 	lds	r23, 0x03D1
    18d4:	80 91 d2 03 	lds	r24, 0x03D2
    18d8:	90 91 d3 03 	lds	r25, 0x03D3
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e4       	ldi	r19, 0x40	; 64
    18e0:	4c e1       	ldi	r20, 0x1C	; 28
    18e2:	56 e4       	ldi	r21, 0x46	; 70
    18e4:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    18e8:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <__fixsfsi>
    18ec:	70 93 6d 03 	sts	0x036D, r23
    18f0:	60 93 6c 03 	sts	0x036C, r22
	convertedMotorSpeed.right = (signed int)((dutyCycleRight*MAX_OVERFLOW_VALUE));
    18f4:	60 91 74 03 	lds	r22, 0x0374
    18f8:	70 91 75 03 	lds	r23, 0x0375
    18fc:	80 91 76 03 	lds	r24, 0x0376
    1900:	90 91 77 03 	lds	r25, 0x0377
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e4       	ldi	r19, 0x40	; 64
    1908:	4c e1       	ldi	r20, 0x1C	; 28
    190a:	56 e4       	ldi	r21, 0x46	; 70
    190c:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    1910:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <__fixsfsi>
    1914:	70 93 6f 03 	sts	0x036F, r23
    1918:	60 93 6e 03 	sts	0x036E, r22
	//get new duty cycle values
	CalculPWM((float)computedCommand.speed, (float)computedCommand.angle, adcValues.left, adcValues.right, &dutyCycleLeft, &dutyCycleRight);
	//convert flot duty cycles to int
	convertValuesToInt();
	//set direction outputs
	checkDirection();
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0e 94 89 0b 	call	0x1712	; 0x1712 <checkDirection>


	//set motor outputs
	//TODO: Add a way to avoid obstacles
	
	if ((objectDetectedRight == 1) || (objectDetectedLeft == 1))
    1924:	80 91 c4 03 	lds	r24, 0x03C4
    1928:	81 30       	cpi	r24, 0x01	; 1
    192a:	21 f0       	breq	.+8      	; 0x1934 <setMotors+0xda>
    192c:	80 91 a3 02 	lds	r24, 0x02A3
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	31 f4       	brne	.+12     	; 0x1940 <setMotors+0xe6>
	{
		OCR1A = 0;
    1934:	1b bc       	out	0x2b, r1	; 43
    1936:	1a bc       	out	0x2a, r1	; 42
		OCR1B = 0;
    1938:	19 bc       	out	0x29, r1	; 41
    193a:	18 bc       	out	0x28, r1	; 40
		PORTD = (LEFT_MOTOR_BRAKE | RIGHT_MOTOR_BRAKE);
    193c:	8c ec       	ldi	r24, 0xCC	; 204
    193e:	0e c0       	rjmp	.+28     	; 0x195c <setMotors+0x102>

	}
	else
	{
		OCR1A = convertedMotorSpeed.left;
    1940:	80 91 6c 03 	lds	r24, 0x036C
    1944:	90 91 6d 03 	lds	r25, 0x036D
    1948:	9b bd       	out	0x2b, r25	; 43
    194a:	8a bd       	out	0x2a, r24	; 42
		OCR1B = convertedMotorSpeed.right;
    194c:	80 91 6e 03 	lds	r24, 0x036E
    1950:	90 91 6f 03 	lds	r25, 0x036F
    1954:	99 bd       	out	0x29, r25	; 41
    1956:	88 bd       	out	0x28, r24	; 40
		PORTD = motorDirection;
    1958:	80 91 cd 03 	lds	r24, 0x03CD
    195c:	82 bb       	out	0x12, r24	; 18
	//set direction outputs
	checkDirection();
	//set pwm values on timer1
	setMotorOutputs();

	adcCompletedFlag = 0;	//flag to ADC that it can restart its job
    195e:	10 92 69 03 	sts	0x0369, r1

}
    1962:	1f 91       	pop	r17
    1964:	0f 91       	pop	r16
    1966:	ff 90       	pop	r15
    1968:	ef 90       	pop	r14
    196a:	df 90       	pop	r13
    196c:	cf 90       	pop	r12
    196e:	bf 90       	pop	r11
    1970:	af 90       	pop	r10
    1972:	9f 90       	pop	r9
    1974:	8f 90       	pop	r8
    1976:	08 95       	ret

00001978 <initPorts>:
//Return value:	-none
//
///////////////////////////////////////////
void initPorts(void)
{
	DDRB = 0xFF;            	//PortB output
    1978:	8f ef       	ldi	r24, 0xFF	; 255
    197a:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFE; 				//port D = all out but Rx bit
    197c:	8e ef       	ldi	r24, 0xFE	; 254
    197e:	81 bb       	out	0x11, r24	; 17
	DDRA = 0x10;				//All out but calib bit. Note that bit 5 is unused
    1980:	80 e1       	ldi	r24, 0x10	; 16
    1982:	8a bb       	out	0x1a, r24	; 26
	robotState = STATE_ASLEEP;	//start robot at DEAD state
    1984:	10 92 cc 03 	sts	0x03CC, r1
}
    1988:	08 95       	ret

0000198a <setWatchDog>:
//
///////////////////////////////////////////
void setWatchDog(void)
{
	//enable + presacaler value.... value is fine tuned for smooth operations
	WDTCR = (1<<WDTOE)|(1<<WDE)|(1<<WDP2)|(0<<WDP1)|(0<<WDP0);
    198a:	8c e1       	ldi	r24, 0x1C	; 28
    198c:	81 bd       	out	0x21, r24	; 33
}
    198e:	08 95       	ret

00001990 <checkControls>:
//Return value:	-none
//
///////////////////////////////////////////
void checkControls(void)	//Check switch inputs 
{
	if (~PINA & INPUT_LIVE)
    1990:	ce 99       	sbic	0x19, 6	; 25
    1992:	0c c0       	rjmp	.+24     	; 0x19ac <checkControls+0x1c>
	{
		robotState = STATE_ALIVE;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	80 93 cc 03 	sts	0x03CC, r24
		PORTB = 0x00;	//light leds to notice it received the input
    199a:	18 ba       	out	0x18, r1	; 24

		while(~PINA & INPUT_LIVE){}	// to make sure switch is released
    199c:	ce 9b       	sbis	0x19, 6	; 25
    199e:	fe cf       	rjmp	.-4      	; 0x199c <checkControls+0xc>
		
		ledAliveState();	//set leds for normal ops
    19a0:	0e 94 73 07 	call	0xee6	; 0xee6 <ledAliveState>
//
///////////////////////////////////////////
void setWatchDog(void)
{
	//enable + presacaler value.... value is fine tuned for smooth operations
	WDTCR = (1<<WDTOE)|(1<<WDE)|(1<<WDP2)|(0<<WDP1)|(0<<WDP0);
    19a4:	8c e1       	ldi	r24, 0x1C	; 28
    19a6:	81 bd       	out	0x21, r24	; 33

		while(~PINA & INPUT_LIVE){}	// to make sure switch is released
		
		ledAliveState();	//set leds for normal ops
		setWatchDog();		//enable watchdog
		resetTWI();			//reset TWI com
    19a8:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <resetTWI>
	}
	
	if (~PINA & INPUT_DIE)
    19ac:	cf 99       	sbic	0x19, 7	; 25
    19ae:	0a c0       	rjmp	.+20     	; 0x19c4 <checkControls+0x34>
	{
		robotState = STATE_ASLEEP;
    19b0:	10 92 cc 03 	sts	0x03CC, r1
		
		OCR1A = 0;
    19b4:	1b bc       	out	0x2b, r1	; 43
    19b6:	1a bc       	out	0x2a, r1	; 42
		OCR1B = 0;
    19b8:	19 bc       	out	0x29, r1	; 41
    19ba:	18 bc       	out	0x28, r1	; 40
		PORTB = 0x00;	//light leds to notice it received the input
    19bc:	18 ba       	out	0x18, r1	; 24

		while(~PINA & INPUT_DIE){}	// to make sure switch is released
    19be:	cf 9b       	sbis	0x19, 7	; 25
    19c0:	fe cf       	rjmp	.-4      	; 0x19be <checkControls+0x2e>

		wdt_reset();
    19c2:	a8 95       	wdr
    19c4:	08 95       	ret

000019c6 <configureTWI>:
///////////////////////////////////////////
void configureTWI(void)
{
	//init all data
	//memset((void*) &SonarData, 0, sizeof(SonarData));	//init all values	
	SonarData.initFlag = 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	80 93 88 03 	sts	0x0388, r24
	SonarData.sendCompleteFlag = 1;
    19cc:	80 93 8a 03 	sts	0x038A, r24
	pingCounter = 0;
    19d0:	10 92 6b 03 	sts	0x036B, r1
	twiStateMachine = 0;
    19d4:	10 92 a2 02 	sts	0x02A2, r1
	
	//set TWI frequency
	TWSR = TWPS_PRESCALER_VALUE;
    19d8:	81 b9       	out	0x01, r24	; 1
	TWBR = TWBR_REGISTER_VALUE;
    19da:	86 ec       	ldi	r24, 0xC6	; 198
    19dc:	80 b9       	out	0x00, r24	; 0
	
}
    19de:	08 95       	ret

000019e0 <resetTWI>:
///////////////////////////////////////////
void resetTWI(void)
{
	//memset((void*) &SonarData, 0, sizeof(SonarData));

	twiStateMachine = 0;
    19e0:	10 92 a2 02 	sts	0x02A2, r1

	//set initial values
	SonarData.initFlag = 1;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	80 93 88 03 	sts	0x0388, r24
	SonarData.sendCompleteFlag = 1;
    19ea:	80 93 8a 03 	sts	0x038A, r24
	objectDetectedRight = 0;
    19ee:	10 92 c4 03 	sts	0x03C4, r1
	objectDetectedLeft = 0;
    19f2:	10 92 a3 02 	sts	0x02A3, r1
	pingCounter = 0;
    19f6:	10 92 6b 03 	sts	0x036B, r1
	SonarData.pingSide = 0;
    19fa:	10 92 89 03 	sts	0x0389, r1
	SonarData.range = INIT_SONAR_RANGE;
    19fe:	8e e2       	ldi	r24, 0x2E	; 46
    1a00:	80 93 81 03 	sts	0x0381, r24
}
    1a04:	08 95       	ret

00001a06 <TWIcheckState>:
//Return value:	-none
//
///////////////////////////////////////////									
void TWIcheckState(void)
{
	TWIstate = (TWSR & TWSR_MASK);	//get newest TW status value
    1a06:	81 b1       	in	r24, 0x01	; 1
    1a08:	88 7f       	andi	r24, 0xF8	; 248
    1a0a:	80 93 78 03 	sts	0x0378, r24
	switch (TWIstate)
    1a0e:	80 91 78 03 	lds	r24, 0x0378
    1a12:	88 32       	cpi	r24, 0x28	; 40
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <TWIcheckState+0x12>
    1a16:	3f c0       	rjmp	.+126    	; 0x1a96 <TWIcheckState+0x90>
    1a18:	89 32       	cpi	r24, 0x29	; 41
    1a1a:	88 f4       	brcc	.+34     	; 0x1a3e <TWIcheckState+0x38>
    1a1c:	80 31       	cpi	r24, 0x10	; 16
    1a1e:	01 f1       	breq	.+64     	; 0x1a60 <TWIcheckState+0x5a>
    1a20:	81 31       	cpi	r24, 0x11	; 17
    1a22:	38 f4       	brcc	.+14     	; 0x1a32 <TWIcheckState+0x2c>
    1a24:	88 23       	and	r24, r24
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <TWIcheckState+0x24>
    1a28:	a0 c0       	rjmp	.+320    	; 0x1b6a <TWIcheckState+0x164>
    1a2a:	88 30       	cpi	r24, 0x08	; 8
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <TWIcheckState+0x2a>
    1a2e:	a3 c0       	rjmp	.+326    	; 0x1b76 <TWIcheckState+0x170>
    1a30:	26 c0       	rjmp	.+76     	; 0x1a7e <TWIcheckState+0x78>
    1a32:	88 31       	cpi	r24, 0x18	; 24
    1a34:	41 f1       	breq	.+80     	; 0x1a86 <TWIcheckState+0x80>
    1a36:	80 32       	cpi	r24, 0x20	; 32
    1a38:	09 f0       	breq	.+2      	; 0x1a3c <TWIcheckState+0x36>
    1a3a:	9d c0       	rjmp	.+314    	; 0x1b76 <TWIcheckState+0x170>
    1a3c:	28 c0       	rjmp	.+80     	; 0x1a8e <TWIcheckState+0x88>
    1a3e:	80 34       	cpi	r24, 0x40	; 64
    1a40:	f1 f1       	breq	.+124    	; 0x1abe <TWIcheckState+0xb8>
    1a42:	81 34       	cpi	r24, 0x41	; 65
    1a44:	38 f4       	brcc	.+14     	; 0x1a54 <TWIcheckState+0x4e>
    1a46:	80 33       	cpi	r24, 0x30	; 48
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <TWIcheckState+0x46>
    1a4a:	95 c0       	rjmp	.+298    	; 0x1b76 <TWIcheckState+0x170>
    1a4c:	88 33       	cpi	r24, 0x38	; 56
    1a4e:	09 f0       	breq	.+2      	; 0x1a52 <TWIcheckState+0x4c>
    1a50:	92 c0       	rjmp	.+292    	; 0x1b76 <TWIcheckState+0x170>
    1a52:	8b c0       	rjmp	.+278    	; 0x1b6a <TWIcheckState+0x164>
    1a54:	80 35       	cpi	r24, 0x50	; 80
    1a56:	a9 f1       	breq	.+106    	; 0x1ac2 <TWIcheckState+0xbc>
    1a58:	88 35       	cpi	r24, 0x58	; 88
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <TWIcheckState+0x58>
    1a5c:	8c c0       	rjmp	.+280    	; 0x1b76 <TWIcheckState+0x170>
    1a5e:	85 c0       	rjmp	.+266    	; 0x1b6a <TWIcheckState+0x164>
			TWCR = TWI_ENABLE;
			break;
		}
		case (TW_REP_START):	//repeated start...	
		{
			if (SonarData.pingingFlag)
    1a60:	80 91 87 03 	lds	r24, 0x0387
    1a64:	88 23       	and	r24, r24
    1a66:	59 f0       	breq	.+22     	; 0x1a7e <TWIcheckState+0x78>
			{
				SonarData.pingingFlag = 0;	//if pinging mode, send SLA+R
    1a68:	10 92 87 03 	sts	0x0387, r1
				if (SonarData.pingSide == 2)
    1a6c:	80 91 89 03 	lds	r24, 0x0389
    1a70:	82 30       	cpi	r24, 0x02	; 2
    1a72:	11 f4       	brne	.+4      	; 0x1a78 <TWIcheckState+0x72>
				{
					SonarData.slaveAdd = LEFT_SONAR_READ;
    1a74:	83 ee       	ldi	r24, 0xE3	; 227
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <TWIcheckState+0x74>
				}
				else
				{
					SonarData.slaveAdd = RIGHT_SONAR_READ;
    1a78:	81 ee       	ldi	r24, 0xE1	; 225
    1a7a:	80 93 82 03 	sts	0x0382, r24
				}
			}
			TWDR = SonarData.slaveAdd;		//else, re-send actual address
    1a7e:	80 91 82 03 	lds	r24, 0x0382
    1a82:	83 b9       	out	0x03, r24	; 3
    1a84:	70 c0       	rjmp	.+224    	; 0x1b66 <TWIcheckState+0x160>
			TWCR = TWI_ENABLE;
			break;
		}
		case (TW_SLA_ACK):	//slave write ack, send register to modify
		{	
			TWDR = SonarData.slaveReg;
    1a86:	80 91 83 03 	lds	r24, 0x0383
    1a8a:	83 b9       	out	0x03, r24	; 3
    1a8c:	18 c0       	rjmp	.+48     	; 0x1abe <TWIcheckState+0xb8>
			TWCR = TWI_ENABLE | TWI_ACK;
			break;
		}
		case (TW_SLA_NACK):	//slave write not ack, restart
		{
			SonarData.sendCompleteFlag = 1;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	80 93 8a 03 	sts	0x038A, r24
    1a94:	68 c0       	rjmp	.+208    	; 0x1b66 <TWIcheckState+0x160>
			TWCR = TWI_ENABLE;
			break;
		}
		case (TW_DATA_ACK):	//slave received data
		{		
			if (SonarData.valueFlag)	//if we got additional value to send
    1a96:	80 91 85 03 	lds	r24, 0x0385
    1a9a:	88 23       	and	r24, r24
    1a9c:	31 f0       	breq	.+12     	; 0x1aaa <TWIcheckState+0xa4>
			{
				TWDR = SonarData.valueToSend;
    1a9e:	80 91 84 03 	lds	r24, 0x0384
    1aa2:	83 b9       	out	0x03, r24	; 3
				SonarData.valueFlag = 0;	//only one data after register value.. leave it hardcoded for now
    1aa4:	10 92 85 03 	sts	0x0385, r1
    1aa8:	5e c0       	rjmp	.+188    	; 0x1b66 <TWIcheckState+0x160>
				TWCR = TWI_ENABLE;

			}
			else if (SonarData.pingFlag) //if ping mode
    1aaa:	80 91 86 03 	lds	r24, 0x0386
    1aae:	88 23       	and	r24, r24
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <TWIcheckState+0xae>
    1ab2:	5b c0       	rjmp	.+182    	; 0x1b6a <TWIcheckState+0x164>
			{
				
				SonarData.pingingFlag = 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	80 93 87 03 	sts	0x0387, r24
				TWCR = TWI_START;	//send repeated start for read
    1aba:	85 ea       	ldi	r24, 0xA5	; 165
    1abc:	5a c0       	rjmp	.+180    	; 0x1b72 <TWIcheckState+0x16c>
			TWCR = TWI_STOP;	//give up, release master powers
			break;
		}
		case (TW_SLA_READ_ACK):	//SLA+R ack
		{
			TWCR = TWI_ENABLE | TWI_ACK;	//send ack bit
    1abe:	85 ec       	ldi	r24, 0xC5	; 197
    1ac0:	58 c0       	rjmp	.+176    	; 0x1b72 <TWIcheckState+0x16c>
			break;
		}
		case (TW_SLAVE_DATA_ACK):	//data received from slave
		{
			//robustness purpose: makes sure it is in good state to receive data
			if ((twiStateMachine == STATE_3)&&(SonarData.pingFlag))
    1ac2:	80 91 a2 02 	lds	r24, 0x02A2
    1ac6:	82 30       	cpi	r24, 0x02	; 2
    1ac8:	a1 f4       	brne	.+40     	; 0x1af2 <TWIcheckState+0xec>
    1aca:	80 91 86 03 	lds	r24, 0x0386
    1ace:	88 23       	and	r24, r24
    1ad0:	81 f0       	breq	.+32     	; 0x1af2 <TWIcheckState+0xec>
			{	
				if (SonarData.pingSide == PING_LEFT)
    1ad2:	80 91 89 03 	lds	r24, 0x0389
    1ad6:	82 30       	cpi	r24, 0x02	; 2
    1ad8:	21 f4       	brne	.+8      	; 0x1ae2 <TWIcheckState+0xdc>
				{
					SonarData.valueLeftMSB = TWDR;
    1ada:	83 b1       	in	r24, 0x03	; 3
    1adc:	80 93 8e 03 	sts	0x038E, r24
    1ae0:	42 c0       	rjmp	.+132    	; 0x1b66 <TWIcheckState+0x160>
					
				}
				else if (SonarData.pingSide == PING_RIGHT)//robustness: reverify ping side
    1ae2:	80 91 89 03 	lds	r24, 0x0389
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	f1 f5       	brne	.+124    	; 0x1b66 <TWIcheckState+0x160>
				{
					SonarData.valueRightMSB = TWDR;
    1aea:	83 b1       	in	r24, 0x03	; 3
    1aec:	80 93 8c 03 	sts	0x038C, r24
    1af0:	3a c0       	rjmp	.+116    	; 0x1b66 <TWIcheckState+0x160>
				}

			}		
			//robustness purpose: makes sure it is in good state to receive data			
			else if ((twiStateMachine == STATE_4)&&(SonarData.pingFlag))
    1af2:	80 91 a2 02 	lds	r24, 0x02A2
    1af6:	83 30       	cpi	r24, 0x03	; 3
    1af8:	b1 f5       	brne	.+108    	; 0x1b66 <TWIcheckState+0x160>
    1afa:	80 91 86 03 	lds	r24, 0x0386
    1afe:	88 23       	and	r24, r24
    1b00:	91 f1       	breq	.+100    	; 0x1b66 <TWIcheckState+0x160>
			{
				if (SonarData.pingSide == PING_LEFT)
    1b02:	80 91 89 03 	lds	r24, 0x0389
    1b06:	82 30       	cpi	r24, 0x02	; 2
    1b08:	b1 f4       	brne	.+44     	; 0x1b36 <TWIcheckState+0x130>
				{
					SonarData.valueLeftLSB = TWDR;
    1b0a:	83 b1       	in	r24, 0x03	; 3
    1b0c:	80 93 8d 03 	sts	0x038D, r24
					//These are actual values when no object in sight
					if ((SonarData.valueLeftLSB != PING_ZEROVALUE_LSB)&&(SonarData.valueLeftMSB != PING_ZEROVALUE_MSB))
    1b10:	80 91 8d 03 	lds	r24, 0x038D
    1b14:	8f 3f       	cpi	r24, 0xFF	; 255
    1b16:	51 f0       	breq	.+20     	; 0x1b2c <TWIcheckState+0x126>
    1b18:	80 91 8e 03 	lds	r24, 0x038E
    1b1c:	8f 30       	cpi	r24, 0x0F	; 15
    1b1e:	31 f0       	breq	.+12     	; 0x1b2c <TWIcheckState+0x126>
					{
						objectDetectedLeft = 1;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	80 93 a3 02 	sts	0x02A3, r24
						leftObjectLed = 1;
    1b26:	80 93 73 03 	sts	0x0373, r24
    1b2a:	1d c0       	rjmp	.+58     	; 0x1b66 <TWIcheckState+0x160>
					}
					else
					{
						objectDetectedLeft = 0;
    1b2c:	10 92 a3 02 	sts	0x02A3, r1
						leftObjectLed = 0;
    1b30:	10 92 73 03 	sts	0x0373, r1
    1b34:	18 c0       	rjmp	.+48     	; 0x1b66 <TWIcheckState+0x160>
					}
				}
				else if (SonarData.pingSide == PING_RIGHT)
    1b36:	90 91 89 03 	lds	r25, 0x0389
    1b3a:	91 30       	cpi	r25, 0x01	; 1
    1b3c:	a1 f4       	brne	.+40     	; 0x1b66 <TWIcheckState+0x160>
				{
					SonarData.valueRightLSB = TWDR;
    1b3e:	83 b1       	in	r24, 0x03	; 3
    1b40:	80 93 8b 03 	sts	0x038B, r24
					//These are actual values when no object in sight
					if ((SonarData.valueRightLSB != PING_ZEROVALUE_LSB)&&(SonarData.valueRightMSB != PING_ZEROVALUE_MSB))
    1b44:	80 91 8b 03 	lds	r24, 0x038B
    1b48:	8f 3f       	cpi	r24, 0xFF	; 255
    1b4a:	49 f0       	breq	.+18     	; 0x1b5e <TWIcheckState+0x158>
    1b4c:	80 91 8c 03 	lds	r24, 0x038C
    1b50:	8f 30       	cpi	r24, 0x0F	; 15
    1b52:	29 f0       	breq	.+10     	; 0x1b5e <TWIcheckState+0x158>
					{
						objectDetectedRight = 1;
    1b54:	90 93 c4 03 	sts	0x03C4, r25
						rightObjectLed = 1;
    1b58:	90 93 9b 03 	sts	0x039B, r25
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <TWIcheckState+0x160>
					}
					else
					{
						objectDetectedRight = 0;
    1b5e:	10 92 c4 03 	sts	0x03C4, r1
						rightObjectLed = 0;
    1b62:	10 92 9b 03 	sts	0x039B, r1
					}
				}
			}
			TWCR = TWI_ENABLE;	//send no-ack, data is received
    1b66:	85 e8       	ldi	r24, 0x85	; 133
    1b68:	04 c0       	rjmp	.+8      	; 0x1b72 <TWIcheckState+0x16c>
			TWCR = TWI_STOP;	//stop COM
			break;
		}
		case (TW_BUS_ERROR):	//this should never happen
		{
			SonarData.sendCompleteFlag = 1;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	80 93 8a 03 	sts	0x038A, r24
			TWCR = TWI_STOP;	//give up, release master powers
    1b70:	84 e9       	ldi	r24, 0x94	; 148
    1b72:	86 bf       	out	0x36, r24	; 54
    1b74:	08 95       	ret
			break;
		}
		default:
		{
			SonarData.sendCompleteFlag = 1;	//this should never happer
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	80 93 8a 03 	sts	0x038A, r24
    1b7c:	08 95       	ret

00001b7e <setTWIstream>:
//
///////////////////////////////////////////	
void setTWIstream(void)
{

	if (SonarData.initFlag == 1)	//change register values
    1b7e:	90 91 88 03 	lds	r25, 0x0388
    1b82:	91 30       	cpi	r25, 0x01	; 1
    1b84:	09 f0       	breq	.+2      	; 0x1b88 <setTWIstream+0xa>
    1b86:	4d c0       	rjmp	.+154    	; 0x1c22 <setTWIstream+0xa4>
	{
		SonarData.valueFlag = 1;
    1b88:	90 93 85 03 	sts	0x0385, r25
		switch (twiStateMachine)
    1b8c:	80 91 a2 02 	lds	r24, 0x02A2
    1b90:	81 30       	cpi	r24, 0x01	; 1
    1b92:	c9 f0       	breq	.+50     	; 0x1bc6 <setTWIstream+0x48>
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	28 f0       	brcs	.+10     	; 0x1ba2 <setTWIstream+0x24>
    1b98:	82 30       	cpi	r24, 0x02	; 2
    1b9a:	f1 f0       	breq	.+60     	; 0x1bd8 <setTWIstream+0x5a>
    1b9c:	83 30       	cpi	r24, 0x03	; 3
    1b9e:	71 f5       	brne	.+92     	; 0x1bfc <setTWIstream+0x7e>
    1ba0:	2b c0       	rjmp	.+86     	; 0x1bf8 <setTWIstream+0x7a>
		{
			case (STATE_1):
			{

				SonarData.slaveAdd = LEFT_SONAR_WRITE;
    1ba2:	82 ee       	ldi	r24, 0xE2	; 226
    1ba4:	80 93 82 03 	sts	0x0382, r24
				SonarData.slaveReg = SONAR_RANGE_REGISTER;
    1ba8:	82 e0       	ldi	r24, 0x02	; 2
    1baa:	80 93 83 03 	sts	0x0383, r24
				SonarData.valueToSend = SonarData.range;
    1bae:	80 91 81 03 	lds	r24, 0x0381
    1bb2:	80 93 84 03 	sts	0x0384, r24
				twiStateMachine++;
    1bb6:	80 91 a2 02 	lds	r24, 0x02A2
    1bba:	8f 5f       	subi	r24, 0xFF	; 255
    1bbc:	80 93 a2 02 	sts	0x02A2, r24
				TWCR = TWI_START;
    1bc0:	85 ea       	ldi	r24, 0xA5	; 165
    1bc2:	86 bf       	out	0x36, r24	; 54
    1bc4:	2e c0       	rjmp	.+92     	; 0x1c22 <setTWIstream+0xa4>
				break;
			}
			case (STATE_2):
			{
				SonarData.slaveAdd = RIGHT_SONAR_WRITE;
    1bc6:	80 ee       	ldi	r24, 0xE0	; 224
    1bc8:	80 93 82 03 	sts	0x0382, r24
				SonarData.slaveReg = SONAR_RANGE_REGISTER;
    1bcc:	82 e0       	ldi	r24, 0x02	; 2
    1bce:	80 93 83 03 	sts	0x0383, r24
				SonarData.valueToSend = SonarData.range;
    1bd2:	80 91 81 03 	lds	r24, 0x0381
    1bd6:	06 c0       	rjmp	.+12     	; 0x1be4 <setTWIstream+0x66>
				twiStateMachine++;
				break;
			}
			case (STATE_3):
			{
				SonarData.slaveAdd = LEFT_SONAR_WRITE;
    1bd8:	82 ee       	ldi	r24, 0xE2	; 226
    1bda:	80 93 82 03 	sts	0x0382, r24
				SonarData.slaveReg = SONAR_GAIN_REGISTER;
    1bde:	90 93 83 03 	sts	0x0383, r25
				SonarData.valueToSend = INIT_SONAR_GAIN;
    1be2:	8a e0       	ldi	r24, 0x0A	; 10
    1be4:	80 93 84 03 	sts	0x0384, r24
				TWCR = TWI_START;
    1be8:	85 ea       	ldi	r24, 0xA5	; 165
    1bea:	86 bf       	out	0x36, r24	; 54
				twiStateMachine++;
    1bec:	80 91 a2 02 	lds	r24, 0x02A2
    1bf0:	8f 5f       	subi	r24, 0xFF	; 255
    1bf2:	80 93 a2 02 	sts	0x02A2, r24
    1bf6:	15 c0       	rjmp	.+42     	; 0x1c22 <setTWIstream+0xa4>
				break;
			}
			case (STATE_4):
			{
				SonarData.slaveAdd = RIGHT_SONAR_WRITE;
    1bf8:	80 ee       	ldi	r24, 0xE0	; 224
    1bfa:	ef cf       	rjmp	.-34     	; 0x1bda <setTWIstream+0x5c>
				break;
			}

			default:
			{
				twiStateMachine=0;			//start pinging
    1bfc:	10 92 a2 02 	sts	0x02A2, r1
				SonarData.valueFlag = 0;	//robustness call
    1c00:	10 92 85 03 	sts	0x0385, r1
				SonarData.initFlag = 0;		//most of these values are already set
    1c04:	10 92 88 03 	sts	0x0388, r1
				SonarData.pingFlag = 1;					
    1c08:	90 93 86 03 	sts	0x0386, r25
				SonarData.slaveAdd = LEFT_SONAR_WRITE;
    1c0c:	82 ee       	ldi	r24, 0xE2	; 226
    1c0e:	80 93 82 03 	sts	0x0382, r24
				pingCounter = 0;
    1c12:	10 92 6b 03 	sts	0x036B, r1
				SonarData.sendCompleteFlag = 1;
    1c16:	90 93 8a 03 	sts	0x038A, r25
				SonarData.pingSide = 1;
    1c1a:	90 93 89 03 	sts	0x0389, r25
				SonarData.valueFlag = 0;
    1c1e:	10 92 85 03 	sts	0x0385, r1
	}/*	FUTUR GROWTH: SONAR RANGE SETTINGS MUST CHANGE ALONG SPEED
	else if (SonarData.changeRangeFlag)
	{

	}*/
	if (SonarData.pingFlag)
    1c22:	80 91 86 03 	lds	r24, 0x0386
    1c26:	88 23       	and	r24, r24
    1c28:	09 f4       	brne	.+2      	; 0x1c2c <setTWIstream+0xae>
    1c2a:	67 c0       	rjmp	.+206    	; 0x1cfa <setTWIstream+0x17c>
	{
		//switch ping side
		if (pingCounter >= MAX_DELAY_PING)
    1c2c:	80 91 6b 03 	lds	r24, 0x036B
    1c30:	8a 30       	cpi	r24, 0x0A	; 10
    1c32:	b8 f0       	brcs	.+46     	; 0x1c62 <setTWIstream+0xe4>
		{

			if (SonarData.pingSide == PING_LEFT)
    1c34:	80 91 89 03 	lds	r24, 0x0389
    1c38:	82 30       	cpi	r24, 0x02	; 2
    1c3a:	31 f4       	brne	.+12     	; 0x1c48 <setTWIstream+0xca>
			{
				SonarData.pingSide = PING_RIGHT;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	80 93 89 03 	sts	0x0389, r24
				leftPingFlag = 1;
    1c42:	80 93 cc 02 	sts	0x02CC, r24
    1c46:	06 c0       	rjmp	.+12     	; 0x1c54 <setTWIstream+0xd6>
			}
			else
			{
				SonarData.pingSide = PING_LEFT;
    1c48:	82 e0       	ldi	r24, 0x02	; 2
    1c4a:	80 93 89 03 	sts	0x0389, r24
				rightPingFlag= PING_RIGHT;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	80 93 9a 03 	sts	0x039A, r24
			}

			//ready for next TWI COM
			twiStateMachine = 0;
    1c54:	10 92 a2 02 	sts	0x02A2, r1
			pingCounter = 0;	
    1c58:	10 92 6b 03 	sts	0x036B, r1
			SonarData.sendCompleteFlag = 1;	
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	80 93 8a 03 	sts	0x038A, r24

		}		
		//PINGING MODE
		switch (twiStateMachine)
    1c62:	80 91 a2 02 	lds	r24, 0x02A2
    1c66:	81 30       	cpi	r24, 0x01	; 1
    1c68:	01 f1       	breq	.+64     	; 0x1caa <setTWIstream+0x12c>
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	18 f0       	brcs	.+6      	; 0x1c74 <setTWIstream+0xf6>
    1c6e:	82 30       	cpi	r24, 0x02	; 2
    1c70:	e1 f5       	brne	.+120    	; 0x1cea <setTWIstream+0x16c>
    1c72:	26 c0       	rjmp	.+76     	; 0x1cc0 <setTWIstream+0x142>
		{		
			case (STATE_1):
			{		
				//send ping to other sonar
				if (SonarData.pingSide == PING_LEFT)
    1c74:	80 91 89 03 	lds	r24, 0x0389
    1c78:	82 30       	cpi	r24, 0x02	; 2
    1c7a:	11 f4       	brne	.+4      	; 0x1c80 <setTWIstream+0x102>
				{
					SonarData.slaveAdd = RIGHT_SONAR_WRITE;
    1c7c:	80 ee       	ldi	r24, 0xE0	; 224
    1c7e:	01 c0       	rjmp	.+2      	; 0x1c82 <setTWIstream+0x104>
				}
				else
				{
					SonarData.slaveAdd = LEFT_SONAR_WRITE;
    1c80:	82 ee       	ldi	r24, 0xE2	; 226
    1c82:	80 93 82 03 	sts	0x0382, r24
				}
				SonarData.slaveReg = SONAR_CMD_REGISTER;
    1c86:	10 92 83 03 	sts	0x0383, r1
				SonarData.valueFlag = 1;
    1c8a:	91 e0       	ldi	r25, 0x01	; 1
    1c8c:	90 93 85 03 	sts	0x0385, r25
				SonarData.valueToSend = PING_CMD_CM;
    1c90:	81 e5       	ldi	r24, 0x51	; 81
    1c92:	80 93 84 03 	sts	0x0384, r24
				twiStateMachine++;
    1c96:	80 91 a2 02 	lds	r24, 0x02A2
    1c9a:	8f 5f       	subi	r24, 0xFF	; 255
    1c9c:	80 93 a2 02 	sts	0x02A2, r24
				TWCR = TWI_START;
    1ca0:	85 ea       	ldi	r24, 0xA5	; 165
    1ca2:	86 bf       	out	0x36, r24	; 54
				SonarData.pingFlag = 1;
    1ca4:	90 93 86 03 	sts	0x0386, r25
    1ca8:	08 95       	ret
				break;
			}
			case (STATE_2):
			{
				if (SonarData.pingSide == PING_LEFT)
    1caa:	80 91 89 03 	lds	r24, 0x0389
    1cae:	82 30       	cpi	r24, 0x02	; 2
    1cb0:	11 f4       	brne	.+4      	; 0x1cb6 <setTWIstream+0x138>
				{
					SonarData.slaveAdd = LEFT_SONAR_WRITE;
    1cb2:	82 ee       	ldi	r24, 0xE2	; 226
    1cb4:	01 c0       	rjmp	.+2      	; 0x1cb8 <setTWIstream+0x13a>
				}
				else
				{
					SonarData.slaveAdd = RIGHT_SONAR_WRITE;
    1cb6:	80 ee       	ldi	r24, 0xE0	; 224
    1cb8:	80 93 82 03 	sts	0x0382, r24
				}

				SonarData.slaveReg = SONAR_MSB_VALUE_REGISTER;
    1cbc:	82 e0       	ldi	r24, 0x02	; 2
    1cbe:	06 c0       	rjmp	.+12     	; 0x1ccc <setTWIstream+0x14e>
				SonarData.pingFlag = 1;
				break;
			}
			case (STATE_3):	//ask value low right
			{
				SonarData.slaveAdd = (SonarData.slaveAdd & ~SONAR_READ_FLAG);	//remove write flag
    1cc0:	80 91 82 03 	lds	r24, 0x0382
    1cc4:	8e 7f       	andi	r24, 0xFE	; 254
    1cc6:	80 93 82 03 	sts	0x0382, r24
				SonarData.slaveReg = SONAR_LSB_VALUE_REGISTER;
    1cca:	83 e0       	ldi	r24, 0x03	; 3
    1ccc:	80 93 83 03 	sts	0x0383, r24
				SonarData.valueFlag = 0;
    1cd0:	10 92 85 03 	sts	0x0385, r1
				TWCR = TWI_START;
    1cd4:	85 ea       	ldi	r24, 0xA5	; 165
    1cd6:	86 bf       	out	0x36, r24	; 54
				twiStateMachine++;
    1cd8:	80 91 a2 02 	lds	r24, 0x02A2
    1cdc:	8f 5f       	subi	r24, 0xFF	; 255
    1cde:	80 93 a2 02 	sts	0x02A2, r24
				SonarData.pingFlag = 1;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	80 93 86 03 	sts	0x0386, r24
    1ce8:	08 95       	ret
				break;
			}
			default:
			{
				twiStateMachine = STATE_4;
    1cea:	83 e0       	ldi	r24, 0x03	; 3
    1cec:	80 93 a2 02 	sts	0x02A2, r24
				SonarData.sendCompleteFlag = 1;	
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	80 93 8a 03 	sts	0x038A, r24
				SonarData.pingFlag = 1;
    1cf6:	80 93 86 03 	sts	0x0386, r24
    1cfa:	08 95       	ret

00001cfc <processTWI>:
//Return value:	-none
//
///////////////////////////////////////////
void processTWI(void)
{	
	if (SonarData.sendCompleteFlag)
    1cfc:	80 91 8a 03 	lds	r24, 0x038A
    1d00:	88 23       	and	r24, r24
    1d02:	21 f0       	breq	.+8      	; 0x1d0c <processTWI+0x10>
	{
		SonarData.sendCompleteFlag = 0;
    1d04:	10 92 8a 03 	sts	0x038A, r1
		setTWIstream();
    1d08:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <setTWIstream>
    1d0c:	08 95       	ret

00001d0e <__vector_19>:
//		 status to process TWI communications.
//
///////////////////////////////////////////
ISR(TWI_vect, ISR_NAKED)	//TWI interrupt vector
{		
	OSIntEnter();
    1d0e:	0e 94 25 11 	call	0x224a	; 0x224a <OSIntEnter>
	TWIcheckState();	//TWI Rx or Tx
    1d12:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <TWIcheckState>
	OSIntEnter();
    1d16:	0e 94 25 11 	call	0x224a	; 0x224a <OSIntEnter>

00001d1a <initTimer1>:
///////////////////////////////////////////
void initTimer1(void)
{
	//Set timer1 register values for desired operation
	//won't change output settings, fast PWM, using output compare, disable input capture
	TCCR1A = (0<<COM1A0) | (1<<COM1A1) | (0<<COM1B0) | (1<<COM1B1) | (0<<FOC1A) | (0<<FOC1B) | (1<<WGM11) | (0<<WGM10);
    1d1a:	82 ea       	ldi	r24, 0xA2	; 162
    1d1c:	8f bd       	out	0x2f, r24	; 47
	//no noise cancelation, detection on falling edge, reserved bit, fast PWM, prescaler = 8 
	TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<5) | (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
    1d1e:	8a e1       	ldi	r24, 0x1A	; 26
    1d20:	8e bd       	out	0x2e, r24	; 46

	ICR1 = MAX_OVERFLOW_VALUE;	//set max overflow value
    1d22:	80 e1       	ldi	r24, 0x10	; 16
    1d24:	97 e2       	ldi	r25, 0x27	; 39
    1d26:	97 bd       	out	0x27, r25	; 39
    1d28:	86 bd       	out	0x26, r24	; 38

	//enable interrupt on timer1 (input capture and output compare disable, enable interrupt on timer overflow)
	TIMSK |= (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1);
    1d2a:	89 b7       	in	r24, 0x39	; 57
    1d2c:	84 60       	ori	r24, 0x04	; 4
    1d2e:	89 bf       	out	0x39, r24	; 57

	//init outputs to 0
	OCR1A = 0;
    1d30:	1b bc       	out	0x2b, r1	; 43
    1d32:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;
    1d34:	19 bc       	out	0x29, r1	; 41
    1d36:	18 bc       	out	0x28, r1	; 40
	
	//init flags
	timer1ReadyFlag = 0;
    1d38:	10 92 68 03 	sts	0x0368, r1
	motorReadyFlag = 0;
    1d3c:	10 92 cb 03 	sts	0x03CB, r1
	adcCalibrationFlag = 0;
    1d40:	10 92 ca 03 	sts	0x03CA, r1
}
    1d44:	08 95       	ret

00001d46 <dealWithMotors>:
//Return value:	-none
//
///////////////////////////////////////////
void dealWithMotors(void)
{
	if (motorReadyFlag == 1)
    1d46:	80 91 cb 03 	lds	r24, 0x03CB
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	69 f4       	brne	.+26     	; 0x1d68 <dealWithMotors+0x22>
	{
		if (pingCounter <= MAX_DELAY_PING)	//increase counter for pings
    1d4e:	80 91 6b 03 	lds	r24, 0x036B
    1d52:	8b 30       	cpi	r24, 0x0B	; 11
    1d54:	28 f4       	brcc	.+10     	; 0x1d60 <dealWithMotors+0x1a>
		{
			pingCounter++;
    1d56:	80 91 6b 03 	lds	r24, 0x036B
    1d5a:	8f 5f       	subi	r24, 0xFF	; 255
    1d5c:	80 93 6b 03 	sts	0x036B, r24
		}	
		setMotors();	//set motor outputs
    1d60:	0e 94 2d 0c 	call	0x185a	; 0x185a <setMotors>
		motorReadyFlag = 0;
    1d64:	10 92 cb 03 	sts	0x03CB, r1
    1d68:	08 95       	ret

00001d6a <__vector_9>:
//		 on motor outputs.
//
///////////////////////////////////////////
ISR(TIMER1_OVF_vect, ISR_NAKED) //timer1 overflow
{
	OSIntEnter();
    1d6a:	0e 94 25 11 	call	0x224a	; 0x224a <OSIntEnter>
	motorReadyFlag = 1;	 // flag for motors
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	80 93 cb 03 	sts	0x03CB, r24
	OSIntExit();
    1d74:	0e 94 19 20 	call	0x4032	; 0x4032 <OSIntExit>

00001d78 <uart_init>:
///////////////////////////////////////////
void uart_init(void)
{
	
	//set uart set-up registers
	UCSRC = UCSRC_REGISTER_SELECTIONS;
    1d78:	86 e8       	ldi	r24, 0x86	; 134
    1d7a:	80 bd       	out	0x20, r24	; 32
	UCSRB = UCSRB_REGISTER_SELECTIONS;
    1d7c:	88 ed       	ldi	r24, 0xD8	; 216
    1d7e:	8a b9       	out	0x0a, r24	; 10
    /* set baud rate */
    UBRRH = ((uint8_t)(UART_BAUD_SELECT >> 8));
    1d80:	10 bc       	out	0x20, r1	; 32
    UBRRL = ((uint8_t)(UART_BAUD_SELECT & 0x00FF));
    1d82:	87 e6       	ldi	r24, 0x67	; 103
    1d84:	89 b9       	out	0x09, r24	; 9
	//set receiver state machine to waiting
	ReceiverState = STATE_WAITING;    
    1d86:	10 92 c3 03 	sts	0x03C3, r1
	
	//init all flags
	echo_on_flag = 1;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	80 93 cf 03 	sts	0x03CF, r24
	uartTxReady = 1;
    1d90:	80 93 c6 03 	sts	0x03C6, r24
	uartReadyFlag = 0;
    1d94:	10 92 69 05 	sts	0x0569, r1
	motorCommandCompletedFlag = 0;
    1d98:	10 92 c5 03 	sts	0x03C5, r1
	actualCommand.speed = 0;
    1d9c:	10 92 90 03 	sts	0x0390, r1
	actualCommand.angle = 0;
    1da0:	10 92 91 03 	sts	0x0391, r1
	stopFlag = 0;
    1da4:	10 92 95 03 	sts	0x0395, r1
}
    1da8:	08 95       	ret

00001daa <processData>:
//
///////////////////////////////////////////
void processData(void)
{

	switch (ReceiverState)
    1daa:	80 91 c3 03 	lds	r24, 0x03C3
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	e1 f0       	breq	.+56     	; 0x1dea <processData+0x40>
    1db2:	81 30       	cpi	r24, 0x01	; 1
    1db4:	18 f0       	brcs	.+6      	; 0x1dbc <processData+0x12>
    1db6:	82 30       	cpi	r24, 0x02	; 2
    1db8:	61 f5       	brne	.+88     	; 0x1e12 <processData+0x68>
    1dba:	1f c0       	rjmp	.+62     	; 0x1dfa <processData+0x50>
	{
		case (STATE_WAITING):	//waiting for new command
			
			if (data == 0xF1) //signal for new incomming command
    1dbc:	80 91 c2 03 	lds	r24, 0x03C2
    1dc0:	81 3f       	cpi	r24, 0xF1	; 241
    1dc2:	11 f4       	brne	.+4      	; 0x1dc8 <processData+0x1e>
			{
				ReceiverState = STATE_CMD_RECEIVED;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	16 c0       	rjmp	.+44     	; 0x1df4 <processData+0x4a>
			}
			else if (stopFlag == 2)	//if flag as been received
    1dc8:	80 91 95 03 	lds	r24, 0x0395
    1dcc:	82 30       	cpi	r24, 0x02	; 2
    1dce:	19 f4       	brne	.+6      	; 0x1dd6 <processData+0x2c>
			{
				stopFlag = 0;
    1dd0:	10 92 95 03 	sts	0x0395, r1
    1dd4:	08 95       	ret
			}
			else if (data == 0xF0)	//stop command
    1dd6:	80 91 c2 03 	lds	r24, 0x03C2
    1dda:	80 3f       	cpi	r24, 0xF0	; 240
    1ddc:	d1 f4       	brne	.+52     	; 0x1e12 <processData+0x68>
			{
				ReceiverState = STATE_WAITING;	//come back to waiting
    1dde:	10 92 c3 03 	sts	0x03C3, r1
				stopFlag = 1;	
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	80 93 95 03 	sts	0x0395, r24
    1de8:	08 95       	ret
			}
			
			break;
		case (STATE_CMD_RECEIVED):	//command as been received, retrieve speed
		{
			requestedCommand.speed = data;
    1dea:	80 91 c2 03 	lds	r24, 0x03C2
    1dee:	80 93 92 03 	sts	0x0392, r24
			ReceiverState = STATE_SPEED_RECEIVED;
    1df2:	82 e0       	ldi	r24, 0x02	; 2
    1df4:	80 93 c3 03 	sts	0x03C3, r24
    1df8:	08 95       	ret
			break;
		}
		case (STATE_SPEED_RECEIVED):	//speed as been received, retrieve angle
		{
			requestedCommand.angle = data;
    1dfa:	80 91 c2 03 	lds	r24, 0x03C2
    1dfe:	80 93 93 03 	sts	0x0393, r24
			ReceiverState = STATE_ANGLE_RECEIVED;
    1e02:	83 e0       	ldi	r24, 0x03	; 3
    1e04:	80 93 c3 03 	sts	0x03C3, r24
			motorCommandCompletedFlag = 1;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	80 93 c5 03 	sts	0x03C5, r24
			uartLedFlag = 1;
    1e0e:	80 93 ce 03 	sts	0x03CE, r24
    1e12:	08 95       	ret

00001e14 <uart_send>:
//
//Return value:	-none
//
///////////////////////////////////////////
void uart_send(char *buf, unsigned char size)
{  
    1e14:	48 2f       	mov	r20, r24
	echo_on_flag = 0;				//Debug mode, stop echo on incomming data
    1e16:	10 92 cf 03 	sts	0x03CF, r1
//Return value:	-none
//
///////////////////////////////////////////
void transmitByte(unsigned char dataToSend)
{
	while(!uartTxReady){}	//wait transmitter is ready	
    1e1a:	80 91 c6 03 	lds	r24, 0x03C6
    1e1e:	88 23       	and	r24, r24
    1e20:	e1 f3       	breq	.-8      	; 0x1e1a <uart_send+0x6>
	uartTxReady = 0;		//reset tx ready flag
    1e22:	10 92 c6 03 	sts	0x03C6, r1
	UDR = dataToSend;		//send data
    1e26:	8e ef       	ldi	r24, 0xFE	; 254
    1e28:	8c b9       	out	0x0c, r24	; 12
    1e2a:	24 2f       	mov	r18, r20
    1e2c:	39 2f       	mov	r19, r25
    1e2e:	c9 01       	movw	r24, r18
    1e30:	fc 01       	movw	r30, r24
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	0a c0       	rjmp	.+20     	; 0x1e4a <uart_send+0x36>
{  
	echo_on_flag = 0;				//Debug mode, stop echo on incomming data
	transmitByte(0xFE);				//Start debug string signal
	for (unsigned char i = 0; i<size; i++)	//Send all bytes
	{
		transmitByte(buf[i]);
    1e36:	20 81       	ld	r18, Z
//Return value:	-none
//
///////////////////////////////////////////
void transmitByte(unsigned char dataToSend)
{
	while(!uartTxReady){}	//wait transmitter is ready	
    1e38:	80 91 c6 03 	lds	r24, 0x03C6
    1e3c:	88 23       	and	r24, r24
    1e3e:	e1 f3       	breq	.-8      	; 0x1e38 <uart_send+0x24>
	uartTxReady = 0;		//reset tx ready flag
    1e40:	10 92 c6 03 	sts	0x03C6, r1
	UDR = dataToSend;		//send data
    1e44:	2c b9       	out	0x0c, r18	; 12
///////////////////////////////////////////
void uart_send(char *buf, unsigned char size)
{  
	echo_on_flag = 0;				//Debug mode, stop echo on incomming data
	transmitByte(0xFE);				//Start debug string signal
	for (unsigned char i = 0; i<size; i++)	//Send all bytes
    1e46:	9f 5f       	subi	r25, 0xFF	; 255
    1e48:	31 96       	adiw	r30, 0x01	; 1
    1e4a:	96 17       	cp	r25, r22
    1e4c:	a0 f3       	brcs	.-24     	; 0x1e36 <uart_send+0x22>
//Return value:	-none
//
///////////////////////////////////////////
void transmitByte(unsigned char dataToSend)
{
	while(!uartTxReady){}	//wait transmitter is ready	
    1e4e:	80 91 c6 03 	lds	r24, 0x03C6
    1e52:	88 23       	and	r24, r24
    1e54:	e1 f3       	breq	.-8      	; 0x1e4e <uart_send+0x3a>
	uartTxReady = 0;		//reset tx ready flag
    1e56:	10 92 c6 03 	sts	0x03C6, r1
	UDR = dataToSend;		//send data
    1e5a:	8f ef       	ldi	r24, 0xFF	; 255
    1e5c:	8c b9       	out	0x0c, r24	; 12
	{
		transmitByte(buf[i]);
	}
	transmitByte(0xFF);			//End of debug string signal

	echo_on_flag = 1;	//Remove if bug persist
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	80 93 cf 03 	sts	0x03CF, r24
}
    1e64:	08 95       	ret

00001e66 <transmitByte>:
//
//Return value:	-none
//
///////////////////////////////////////////
void transmitByte(unsigned char dataToSend)
{
    1e66:	98 2f       	mov	r25, r24
	while(!uartTxReady){}	//wait transmitter is ready	
    1e68:	80 91 c6 03 	lds	r24, 0x03C6
    1e6c:	88 23       	and	r24, r24
    1e6e:	e1 f3       	breq	.-8      	; 0x1e68 <transmitByte+0x2>
	uartTxReady = 0;		//reset tx ready flag
    1e70:	10 92 c6 03 	sts	0x03C6, r1
	UDR = dataToSend;		//send data
    1e74:	9c b9       	out	0x0c, r25	; 12
}
    1e76:	08 95       	ret

00001e78 <uartReceive>:
//
///////////////////////////////////////////
void uartReceive(void)
{
	//wait for new command from controler
	if (motorCommandCompletedFlag == 1)	//if new command fully received
    1e78:	80 91 c5 03 	lds	r24, 0x03C5
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <uartReceive+0xa>
    1e80:	4a c0       	rjmp	.+148    	; 0x1f16 <uartReceive+0x9e>
	{		
		wdt_reset();	//reset watchdog	//reset watchdog --> Robot still in control
    1e82:	a8 95       	wdr
		
		if (actualCommand.speed != requestedCommand.speed)	//if speed is different
    1e84:	90 91 90 03 	lds	r25, 0x0390
    1e88:	80 91 92 03 	lds	r24, 0x0392
    1e8c:	98 17       	cp	r25, r24
    1e8e:	f9 f0       	breq	.+62     	; 0x1ece <uartReceive+0x56>
		{													//compute new speed
			actualCommand.speed = requestedCommand.speed;
    1e90:	80 91 92 03 	lds	r24, 0x0392
    1e94:	80 93 90 03 	sts	0x0390, r24
			computedCommand.speed = (((float)(actualCommand.speed) - 100.0) / 100.0); 
    1e98:	60 91 90 03 	lds	r22, 0x0390
    1e9c:	70 e0       	ldi	r23, 0x00	; 0
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <__floatunsisf>
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	48 ec       	ldi	r20, 0xC8	; 200
    1eac:	52 e4       	ldi	r21, 0x42	; 66
    1eae:	0e 94 3f 22 	call	0x447e	; 0x447e <__subsf3>
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	48 ec       	ldi	r20, 0xC8	; 200
    1eb8:	52 e4       	ldi	r21, 0x42	; 66
    1eba:	0e 94 97 23 	call	0x472e	; 0x472e <__divsf3>
    1ebe:	60 93 96 02 	sts	0x0296, r22
    1ec2:	70 93 97 02 	sts	0x0297, r23
    1ec6:	80 93 98 02 	sts	0x0298, r24
    1eca:	90 93 99 02 	sts	0x0299, r25
		}

		if (actualCommand.angle != requestedCommand.angle)	//same with angle
    1ece:	90 91 91 03 	lds	r25, 0x0391
    1ed2:	80 91 93 03 	lds	r24, 0x0393
    1ed6:	98 17       	cp	r25, r24
    1ed8:	d9 f0       	breq	.+54     	; 0x1f10 <uartReceive+0x98>
		{
			actualCommand.angle = requestedCommand.angle;
    1eda:	80 91 93 03 	lds	r24, 0x0393
    1ede:	80 93 91 03 	sts	0x0391, r24
			computedCommand.angle = ((actualCommand.angle)*ANGLE_RATIO);
    1ee2:	60 91 91 03 	lds	r22, 0x0391
    1ee6:	70 e0       	ldi	r23, 0x00	; 0
    1ee8:	88 27       	eor	r24, r24
    1eea:	77 fd       	sbrc	r23, 7
    1eec:	80 95       	com	r24
    1eee:	98 2f       	mov	r25, r24
    1ef0:	0e 94 03 25 	call	0x4a06	; 0x4a06 <__floatsisf>
    1ef4:	26 e3       	ldi	r18, 0x36	; 54
    1ef6:	3a ef       	ldi	r19, 0xFA	; 250
    1ef8:	4e e0       	ldi	r20, 0x0E	; 14
    1efa:	5d e3       	ldi	r21, 0x3D	; 61
    1efc:	0e 94 9d 22 	call	0x453a	; 0x453a <__mulsf3>
    1f00:	60 93 92 02 	sts	0x0292, r22
    1f04:	70 93 93 02 	sts	0x0293, r23
    1f08:	80 93 94 02 	sts	0x0294, r24
    1f0c:	90 93 95 02 	sts	0x0295, r25
		}			

		motorCommandCompletedFlag = 0;
    1f10:	10 92 c5 03 	sts	0x03C5, r1
    1f14:	08 95       	ret
	}
	else if (stopFlag)
    1f16:	80 91 95 03 	lds	r24, 0x0395
    1f1a:	88 23       	and	r24, r24
    1f1c:	b9 f0       	breq	.+46     	; 0x1f4c <uartReceive+0xd4>
	{
		wdt_reset(); //reset watchdog --> Robot still listenning
    1f1e:	a8 95       	wdr
		
		actualCommand.speed = 100;	//Emergency stop
    1f20:	84 e6       	ldi	r24, 0x64	; 100
    1f22:	80 93 90 03 	sts	0x0390, r24
		actualCommand.angle = 0;	
    1f26:	10 92 91 03 	sts	0x0391, r1
		requestedCommand.speed = 100;
    1f2a:	80 93 92 03 	sts	0x0392, r24
		//requestedCommand.angle = 0;	
		computedCommand.speed = 0;
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	a0 e0       	ldi	r26, 0x00	; 0
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	80 93 96 02 	sts	0x0296, r24
    1f3a:	90 93 97 02 	sts	0x0297, r25
    1f3e:	a0 93 98 02 	sts	0x0298, r26
    1f42:	b0 93 99 02 	sts	0x0299, r27
		//computedCommand.angle = 0;
		stopFlag = 2;				//signal for receiver state machine
    1f46:	82 e0       	ldi	r24, 0x02	; 2
    1f48:	80 93 95 03 	sts	0x0395, r24
    1f4c:	08 95       	ret

00001f4e <__vector_13>:
//
///////////////////////////////////////////
ISR(USART_RXC_vect, ISR_NAKED)     //RX ready 
// signal handler for receive complete interrupt
{
	OSIntEnter();
    1f4e:	0e 94 25 11 	call	0x224a	; 0x224a <OSIntEnter>
	data = UDR;        // read byte for UART data buffer
    1f52:	8c b1       	in	r24, 0x0c	; 12
    1f54:	80 93 c2 03 	sts	0x03C2, r24
	
	processData();
    1f58:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <processData>
	if ((echo_on_flag == 1))
    1f5c:	80 91 cf 03 	lds	r24, 0x03CF
    1f60:	81 30       	cpi	r24, 0x01	; 1
    1f62:	39 f4       	brne	.+14     	; 0x1f72 <__vector_13+0x24>
	{
		while(!uartTxReady){}
    1f64:	80 91 c6 03 	lds	r24, 0x03C6
    1f68:	88 23       	and	r24, r24
    1f6a:	e1 f3       	breq	.-8      	; 0x1f64 <__vector_13+0x16>
		UDR = data;
    1f6c:	80 91 c2 03 	lds	r24, 0x03C2
    1f70:	8c b9       	out	0x0c, r24	; 12
	}

	uartReadyFlag = 1;
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	80 93 69 05 	sts	0x0569, r24
	OSIntExit();
    1f78:	0e 94 19 20 	call	0x4032	; 0x4032 <OSIntExit>

00001f7c <__vector_15>:
//
///////////////////////////////////////////
ISR(USART_TXC_vect, ISR_NAKED) 	//TX ready     
// signal handler for uart txd ready interrupt
{
	OSIntEnter();
    1f7c:	0e 94 25 11 	call	0x224a	; 0x224a <OSIntEnter>
	uartTxReady = 1;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	80 93 c6 03 	sts	0x03C6, r24
	OSIntExit();
    1f86:	0e 94 19 20 	call	0x4032	; 0x4032 <OSIntExit>

00001f8a <OSTaskStkInit>:
*
**********************************************************************************************************
*/

OS_STK   *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *ptos, INT16U opt)
{
    1f8a:	fa 01       	movw	r30, r20
    stk     = (INT8U *)ptos;				/* AVR return stack ("hardware stack")          			*/
    tmp     = (INT16U)task;

	/* "push" initial register values onto the stack */

    *stk-- = (INT8U)tmp;                   /* Put task start address on top of stack          			*/
    1f8c:	80 83       	st	Z, r24
    *stk-- = (INT8U)(tmp >> 8);
    1f8e:	92 93       	st	-Z, r25

    *stk-- = (INT8U)0x00;                   /* R18  = 0x00                                               */
    1f90:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R19  = 0x00                                               */
    1f92:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x80;                   /* SREG = Interrupts enabled                                */
    1f94:	80 e8       	ldi	r24, 0x80	; 128
    1f96:	82 93       	st	-Z, r24
    *stk-- = (INT8U)0x00;                   /* R0 = 0x00                                               */
    1f98:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R1 = 0x00                                               */
    1f9a:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R20 = 0x00                                               */
    1f9c:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R21 = 0x00                                               */
    1f9e:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R22 = 0x00                                               */
    1fa0:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R23 = 0x00                                               */
    1fa2:	12 92       	st	-Z, r1
 	
    tmp    = (INT16U)pdata;
    *stk-- = (INT8U)tmp;                    /* Simulate call to function with argument                  */
    1fa4:	62 93       	st	-Z, r22
    *stk-- = (INT8U)(tmp >> 8);				/* R24, R25 contains argument pointer pdata 				*/
    1fa6:	72 93       	st	-Z, r23

    *stk-- = (INT8U)0x00;                   /* R26 = 0x00                                               */
    1fa8:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R27 = 0x00                                               */
    1faa:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R30 = 0x00                                               */
    1fac:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R31 = 0x00                                               */
    1fae:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R2  = 0x00                                               */
    1fb0:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R3  = 0x00                                               */
    1fb2:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R4  = 0x00                                               */
    1fb4:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R5  = 0x00                                               */
    1fb6:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R6  = 0x00                                               */
    1fb8:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R7  = 0x00                                               */
    1fba:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R8  = 0x00                                               */
    1fbc:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R9  = 0x00                                               */
    1fbe:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R10 = 0x00                                               */
    1fc0:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R11 = 0x00                                               */
    1fc2:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R12 = 0x00                                               */
    1fc4:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R13 = 0x00                                               */
    1fc6:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R14 = 0x00                                               */
    1fc8:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R15 = 0x00                                               */
    1fca:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R16 = 0x00                                               */
    1fcc:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R17 = 0x00                                               */
    1fce:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R28 = 0x00                                               */
    1fd0:	12 92       	st	-Z, r1
    *stk-- = (INT8U)0x00;                   /* R29 = 0x00                                               */
    1fd2:	12 92       	st	-Z, r1
    1fd4:	31 97       	sbiw	r30, 0x01	; 1
    return ((void *)stk);
}
    1fd6:	cf 01       	movw	r24, r30
    1fd8:	08 95       	ret

00001fda <OSStartHighRdy>:

void OSStartHighRdy (void) {
#if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)
	OSTaskSwHook();
#endif
	OSRunning++;
    1fda:	80 91 6b 05 	lds	r24, 0x056B
    1fde:	8f 5f       	subi	r24, 0xFF	; 255
    1fe0:	80 93 6b 05 	sts	0x056B, r24
	SP = (INT16U) OSTCBHighRdy->OSTCBStkPtr;
    1fe4:	e0 91 ab 05 	lds	r30, 0x05AB
    1fe8:	f0 91 ac 05 	lds	r31, 0x05AC
    1fec:	80 81       	ld	r24, Z
    1fee:	91 81       	ldd	r25, Z+1	; 0x01
    1ff0:	9e bf       	out	0x3e, r25	; 62
    1ff2:	8d bf       	out	0x3d, r24	; 61
	POP_ALL();
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	1f 91       	pop	r17
    1ffa:	0f 91       	pop	r16
    1ffc:	ff 90       	pop	r15
    1ffe:	ef 90       	pop	r14
    2000:	df 90       	pop	r13
    2002:	cf 90       	pop	r12
    2004:	bf 90       	pop	r11
    2006:	af 90       	pop	r10
    2008:	9f 90       	pop	r9
    200a:	8f 90       	pop	r8
    200c:	7f 90       	pop	r7
    200e:	6f 90       	pop	r6
    2010:	5f 90       	pop	r5
    2012:	4f 90       	pop	r4
    2014:	3f 90       	pop	r3
    2016:	2f 90       	pop	r2
    2018:	ff 91       	pop	r31
    201a:	ef 91       	pop	r30
    201c:	bf 91       	pop	r27
    201e:	af 91       	pop	r26
    2020:	9f 91       	pop	r25
    2022:	8f 91       	pop	r24
    2024:	7f 91       	pop	r23
    2026:	6f 91       	pop	r22
    2028:	5f 91       	pop	r21
    202a:	4f 91       	pop	r20
    202c:	1f 90       	pop	r1
    202e:	0f 90       	pop	r0
    2030:	2f 91       	pop	r18
    2032:	2f bf       	out	0x3f, r18	; 63
    2034:	3f 91       	pop	r19
    2036:	2f 91       	pop	r18
}
    2038:	08 95       	ret

0000203a <OSCtxSw>:
*                                                PCL                                     (High memory)
*********************************************************************************************************
*/

void OSCtxSw (void) {
	PUSH_ALL();
    203a:	2f 93       	push	r18
    203c:	3f 93       	push	r19
    203e:	2f b7       	in	r18, 0x3f	; 63
    2040:	2f 93       	push	r18
    2042:	0f 92       	push	r0
    2044:	1f 92       	push	r1
    2046:	4f 93       	push	r20
    2048:	5f 93       	push	r21
    204a:	6f 93       	push	r22
    204c:	7f 93       	push	r23
    204e:	8f 93       	push	r24
    2050:	9f 93       	push	r25
    2052:	af 93       	push	r26
    2054:	bf 93       	push	r27
    2056:	ef 93       	push	r30
    2058:	ff 93       	push	r31
    205a:	2f 92       	push	r2
    205c:	3f 92       	push	r3
    205e:	4f 92       	push	r4
    2060:	5f 92       	push	r5
    2062:	6f 92       	push	r6
    2064:	7f 92       	push	r7
    2066:	8f 92       	push	r8
    2068:	9f 92       	push	r9
    206a:	af 92       	push	r10
    206c:	bf 92       	push	r11
    206e:	cf 92       	push	r12
    2070:	df 92       	push	r13
    2072:	ef 92       	push	r14
    2074:	ff 92       	push	r15
    2076:	0f 93       	push	r16
    2078:	1f 93       	push	r17
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
	OSTCBCur->OSTCBStkPtr = (OS_STK *) SP;
    207e:	8d b7       	in	r24, 0x3d	; 61
    2080:	9e b7       	in	r25, 0x3e	; 62
    2082:	e0 91 b6 05 	lds	r30, 0x05B6
    2086:	f0 91 b7 05 	lds	r31, 0x05B7
    208a:	91 83       	std	Z+1, r25	; 0x01
    208c:	80 83       	st	Z, r24
#if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)
	OSTaskSwHook();
#endif
	OSPrioCur = OSPrioHighRdy;
    208e:	80 91 70 05 	lds	r24, 0x0570
    2092:	80 93 85 05 	sts	0x0585, r24
	OSTCBCur = OSTCBHighRdy;
    2096:	e0 91 ab 05 	lds	r30, 0x05AB
    209a:	f0 91 ac 05 	lds	r31, 0x05AC
    209e:	f0 93 b7 05 	sts	0x05B7, r31
    20a2:	e0 93 b6 05 	sts	0x05B6, r30
	SP = (INT16U) OSTCBHighRdy->OSTCBStkPtr;
    20a6:	80 81       	ld	r24, Z
    20a8:	91 81       	ldd	r25, Z+1	; 0x01
    20aa:	9e bf       	out	0x3e, r25	; 62
    20ac:	8d bf       	out	0x3d, r24	; 61
	POP_ALL();
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	1f 91       	pop	r17
    20b4:	0f 91       	pop	r16
    20b6:	ff 90       	pop	r15
    20b8:	ef 90       	pop	r14
    20ba:	df 90       	pop	r13
    20bc:	cf 90       	pop	r12
    20be:	bf 90       	pop	r11
    20c0:	af 90       	pop	r10
    20c2:	9f 90       	pop	r9
    20c4:	8f 90       	pop	r8
    20c6:	7f 90       	pop	r7
    20c8:	6f 90       	pop	r6
    20ca:	5f 90       	pop	r5
    20cc:	4f 90       	pop	r4
    20ce:	3f 90       	pop	r3
    20d0:	2f 90       	pop	r2
    20d2:	ff 91       	pop	r31
    20d4:	ef 91       	pop	r30
    20d6:	bf 91       	pop	r27
    20d8:	af 91       	pop	r26
    20da:	9f 91       	pop	r25
    20dc:	8f 91       	pop	r24
    20de:	7f 91       	pop	r23
    20e0:	6f 91       	pop	r22
    20e2:	5f 91       	pop	r21
    20e4:	4f 91       	pop	r20
    20e6:	1f 90       	pop	r1
    20e8:	0f 90       	pop	r0
    20ea:	2f 91       	pop	r18
    20ec:	2f bf       	out	0x3f, r18	; 63
    20ee:	3f 91       	pop	r19
    20f0:	2f 91       	pop	r18
}
    20f2:	08 95       	ret

000020f4 <OSIntCtxSw>:
void OSIntCtxSw (void) {
#if OS_CRITICAL_METHOD == 1
	OSTCBCur->OSTCBStkPtr = (OS_STK *) SP+4;
#endif
#if OS_CRITICAL_METHOD == 2
	OSTCBCur->OSTCBStkPtr = (OS_STK *) SP+6;
    20f4:	8d b7       	in	r24, 0x3d	; 61
    20f6:	9e b7       	in	r25, 0x3e	; 62
    20f8:	e0 91 b6 05 	lds	r30, 0x05B6
    20fc:	f0 91 b7 05 	lds	r31, 0x05B7
    2100:	06 96       	adiw	r24, 0x06	; 6
    2102:	91 83       	std	Z+1, r25	; 0x01
    2104:	80 83       	st	Z, r24
#endif
#if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)
	OSTaskSwHook();
#endif
	OSPrioCur = OSPrioHighRdy;
    2106:	80 91 70 05 	lds	r24, 0x0570
    210a:	80 93 85 05 	sts	0x0585, r24
	OSTCBCur = OSTCBHighRdy;
    210e:	e0 91 ab 05 	lds	r30, 0x05AB
    2112:	f0 91 ac 05 	lds	r31, 0x05AC
    2116:	f0 93 b7 05 	sts	0x05B7, r31
    211a:	e0 93 b6 05 	sts	0x05B6, r30
	SP = (INT16U) OSTCBHighRdy->OSTCBStkPtr;
    211e:	80 81       	ld	r24, Z
    2120:	91 81       	ldd	r25, Z+1	; 0x01
    2122:	9e bf       	out	0x3e, r25	; 62
    2124:	8d bf       	out	0x3d, r24	; 61
	POP_ALL();
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	1f 91       	pop	r17
    212c:	0f 91       	pop	r16
    212e:	ff 90       	pop	r15
    2130:	ef 90       	pop	r14
    2132:	df 90       	pop	r13
    2134:	cf 90       	pop	r12
    2136:	bf 90       	pop	r11
    2138:	af 90       	pop	r10
    213a:	9f 90       	pop	r9
    213c:	8f 90       	pop	r8
    213e:	7f 90       	pop	r7
    2140:	6f 90       	pop	r6
    2142:	5f 90       	pop	r5
    2144:	4f 90       	pop	r4
    2146:	3f 90       	pop	r3
    2148:	2f 90       	pop	r2
    214a:	ff 91       	pop	r31
    214c:	ef 91       	pop	r30
    214e:	bf 91       	pop	r27
    2150:	af 91       	pop	r26
    2152:	9f 91       	pop	r25
    2154:	8f 91       	pop	r24
    2156:	7f 91       	pop	r23
    2158:	6f 91       	pop	r22
    215a:	5f 91       	pop	r21
    215c:	4f 91       	pop	r20
    215e:	1f 90       	pop	r1
    2160:	0f 90       	pop	r0
    2162:	2f 91       	pop	r18
    2164:	2f bf       	out	0x3f, r18	; 63
    2166:	3f 91       	pop	r19
    2168:	2f 91       	pop	r18
}
    216a:	08 95       	ret

0000216c <InitOSTimer>:
}


void InitOSTimer(void) {

    TIMSK &= 0x3F;         // Disable TIMER2 Interrupts
    216c:	89 b7       	in	r24, 0x39	; 57
    216e:	8f 73       	andi	r24, 0x3F	; 63
    2170:	89 bf       	out	0x39, r24	; 57
    TCCR2  = 0x0D;
    2172:	8d e0       	ldi	r24, 0x0D	; 13
    2174:	85 bd       	out	0x25, r24	; 37
    TCNT2  =    0;         // Start TCNT at 0 for a new cycle
    2176:	14 bc       	out	0x24, r1	; 36
    OCR2   =  124;
    2178:	8c e7       	ldi	r24, 0x7C	; 124
    217a:	83 bd       	out	0x23, r24	; 35

    TIFR   |= 0xC0;         // Clear  TIMER2 compare Interrupt Flag
    217c:	88 b7       	in	r24, 0x38	; 56
    217e:	80 6c       	ori	r24, 0xC0	; 192
    2180:	88 bf       	out	0x38, r24	; 56
    TIMSK  |= 0x80;         // Enable TIMER2 compare Interrupt
    2182:	89 b7       	in	r24, 0x39	; 57
    2184:	80 68       	ori	r24, 0x80	; 128
    2186:	89 bf       	out	0x39, r24	; 57
}
    2188:	08 95       	ret

0000218a <OSInitHookBegin>:
*********************************************************************************************************
*/
//#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void  OSInitHookBegin (void)
{
}
    218a:	08 95       	ret

0000218c <OSInitHookEnd>:
*********************************************************************************************************
*/
//#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void  OSInitHookEnd (void)
{
}
    218c:	08 95       	ret

0000218e <OSTaskCreateHook>:
*/
//#if OS_CPU_HOOKS_EN > 0 
void  OSTaskCreateHook (OS_TCB *ptcb)
{
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    218e:	08 95       	ret

00002190 <OSTaskDelHook>:
*/
#if OS_CPU_HOOKS_EN > 0 
void  OSTaskDelHook (OS_TCB *ptcb)
{
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    2190:	08 95       	ret

00002192 <OSTaskIdleHook>:
*********************************************************************************************************
*/
//#if OS_CPU_HOOKS_EN > 0 && OS_VERSION >= 251
void  OSTaskIdleHook (void)
{
}
    2192:	08 95       	ret

00002194 <OSTaskStatHook>:
*/

#if OS_CPU_HOOKS_EN > 0 
void  OSTaskStatHook (void)
{
}
    2194:	08 95       	ret

00002196 <OSTaskSwHook>:
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)
void  OSTaskSwHook (void)
{
}
    2196:	08 95       	ret

00002198 <OSTCBInitHook>:
*/
//#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void  OSTCBInitHook (OS_TCB *ptcb)
{
    ptcb = ptcb;                                           /* Prevent Compiler warning                 */
}
    2198:	08 95       	ret

0000219a <OSTimeTickHook>:
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void  OSTimeTickHook (void)
{
}
    219a:	08 95       	ret

0000219c <__vector_4>:
*               Return from Interrupt
*********************************************************************************************************
*/

ISR(TIMER2_COMP_vect, ISR_NAKED) {
	OS_INT_ENTER();
    219c:	2f 93       	push	r18
    219e:	3f 93       	push	r19
    21a0:	2f b7       	in	r18, 0x3f	; 63
    21a2:	20 68       	ori	r18, 0x80	; 128
    21a4:	2f 93       	push	r18
    21a6:	0f 92       	push	r0
    21a8:	1f 92       	push	r1
    21aa:	4f 93       	push	r20
    21ac:	5f 93       	push	r21
    21ae:	6f 93       	push	r22
    21b0:	7f 93       	push	r23
    21b2:	8f 93       	push	r24
    21b4:	9f 93       	push	r25
    21b6:	af 93       	push	r26
    21b8:	bf 93       	push	r27
    21ba:	ef 93       	push	r30
    21bc:	ff 93       	push	r31
    21be:	80 91 b5 05 	lds	r24, 0x05B5
    21c2:	88 23       	and	r24, r24
    21c4:	91 f4       	brne	.+36     	; 0x21ea <__vector_4+0x4e>
    21c6:	2f 92       	push	r2
    21c8:	3f 92       	push	r3
    21ca:	4f 92       	push	r4
    21cc:	5f 92       	push	r5
    21ce:	6f 92       	push	r6
    21d0:	7f 92       	push	r7
    21d2:	8f 92       	push	r8
    21d4:	9f 92       	push	r9
    21d6:	af 92       	push	r10
    21d8:	bf 92       	push	r11
    21da:	cf 92       	push	r12
    21dc:	df 92       	push	r13
    21de:	ef 92       	push	r14
    21e0:	ff 92       	push	r15
    21e2:	0f 93       	push	r16
    21e4:	1f 93       	push	r17
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	8f 5f       	subi	r24, 0xFF	; 255
    21ec:	80 93 b5 05 	sts	0x05B5, r24
	OSTimeTick();
    21f0:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <OSTimeTick>
	OS_INT_EXIT();
    21f4:	f8 94       	cli
    21f6:	0e 94 19 20 	call	0x4032	; 0x4032 <OSIntExit>
    21fa:	80 91 b5 05 	lds	r24, 0x05B5
    21fe:	88 23       	and	r24, r24
    2200:	91 f4       	brne	.+36     	; 0x2226 <__vector_4+0x8a>
    2202:	df 91       	pop	r29
    2204:	cf 91       	pop	r28
    2206:	1f 91       	pop	r17
    2208:	0f 91       	pop	r16
    220a:	ff 90       	pop	r15
    220c:	ef 90       	pop	r14
    220e:	df 90       	pop	r13
    2210:	cf 90       	pop	r12
    2212:	bf 90       	pop	r11
    2214:	af 90       	pop	r10
    2216:	9f 90       	pop	r9
    2218:	8f 90       	pop	r8
    221a:	7f 90       	pop	r7
    221c:	6f 90       	pop	r6
    221e:	5f 90       	pop	r5
    2220:	4f 90       	pop	r4
    2222:	3f 90       	pop	r3
    2224:	2f 90       	pop	r2
    2226:	ff 91       	pop	r31
    2228:	ef 91       	pop	r30
    222a:	bf 91       	pop	r27
    222c:	af 91       	pop	r26
    222e:	9f 91       	pop	r25
    2230:	8f 91       	pop	r24
    2232:	7f 91       	pop	r23
    2234:	6f 91       	pop	r22
    2236:	5f 91       	pop	r21
    2238:	4f 91       	pop	r20
    223a:	1f 90       	pop	r1
    223c:	0f 90       	pop	r0
    223e:	2f 91       	pop	r18
    2240:	2f 77       	andi	r18, 0x7F	; 127
    2242:	2f bf       	out	0x3f, r18	; 63
    2244:	3f 91       	pop	r19
    2246:	2f 91       	pop	r18
    2248:	18 95       	reti

0000224a <OSIntEnter>:
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    if (OSRunning == TRUE) {
    224a:	80 91 6b 05 	lds	r24, 0x056B
    224e:	81 30       	cpi	r24, 0x01	; 1
    2250:	39 f4       	brne	.+14     	; 0x2260 <OSIntEnter+0x16>
        if (OSIntNesting < 255u) {
    2252:	80 91 b5 05 	lds	r24, 0x05B5
    2256:	8f 3f       	cpi	r24, 0xFF	; 255
    2258:	19 f0       	breq	.+6      	; 0x2260 <OSIntEnter+0x16>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    225a:	8f 5f       	subi	r24, 0xFF	; 255
    225c:	80 93 b5 05 	sts	0x05B5, r24
    2260:	08 95       	ret

00002262 <OSVersion>:
*/

INT16U  OSVersion (void)
{
    return (OS_VERSION);
}
    2262:	84 e0       	ldi	r24, 0x04	; 4
    2264:	91 e0       	ldi	r25, 0x01	; 1
    2266:	08 95       	ret

00002268 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if OS_EVENT_EN > 0
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *msg, INT8U msk)
{
    2268:	ff 92       	push	r15
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	ec 01       	movw	r28, r24
    2274:	8b 01       	movw	r16, r22
    2276:	f4 2e       	mov	r15, r20
    INT8U   bitx;
    INT8U   bity;
    INT8U   prio;


    y                      = OSUnMapTbl[pevent->OSEventGrp];   /* Find HPT waiting for message         */
    2278:	39 81       	ldd	r19, Y+1	; 0x01
    227a:	e3 2f       	mov	r30, r19
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	e8 59       	subi	r30, 0x98	; 152
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	20 81       	ld	r18, Z
    bity                   = OSMapTbl[y];
    2284:	42 2f       	mov	r20, r18
    2286:	50 e0       	ldi	r21, 0x00	; 0
    2288:	fa 01       	movw	r30, r20
    228a:	e0 5a       	subi	r30, 0xA0	; 160
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	70 81       	ld	r23, Z
    x                      = OSUnMapTbl[pevent->OSEventTbl[y]];
    2290:	dc 01       	movw	r26, r24
    2292:	a4 0f       	add	r26, r20
    2294:	b5 1f       	adc	r27, r21
    2296:	16 96       	adiw	r26, 0x06	; 6
    2298:	9c 91       	ld	r25, X
    229a:	16 97       	sbiw	r26, 0x06	; 6
    229c:	e9 2f       	mov	r30, r25
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	e8 59       	subi	r30, 0x98	; 152
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    bitx                   = OSMapTbl[x];
    22a6:	e8 2f       	mov	r30, r24
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	e0 5a       	subi	r30, 0xA0	; 160
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	60 81       	ld	r22, Z
    prio                   = (INT8U)((y << 3) + x);   /* Find priority of task getting the msg         */
    22b0:	22 0f       	add	r18, r18
    22b2:	22 0f       	add	r18, r18
    22b4:	22 0f       	add	r18, r18
    22b6:	28 0f       	add	r18, r24
    pevent->OSEventTbl[y] &= ~bitx;                   /* Remove this task from the waiting list        */
    22b8:	86 2f       	mov	r24, r22
    22ba:	80 95       	com	r24
    22bc:	89 23       	and	r24, r25
    22be:	16 96       	adiw	r26, 0x06	; 6
    22c0:	8c 93       	st	X, r24
    if (pevent->OSEventTbl[y] == 0x00) {              
    22c2:	88 23       	and	r24, r24
    22c4:	21 f4       	brne	.+8      	; 0x22ce <OS_EventTaskRdy+0x66>
        pevent->OSEventGrp &= ~bity;                  /* Clr group bit if this was only task pending   */
    22c6:	87 2f       	mov	r24, r23
    22c8:	80 95       	com	r24
    22ca:	38 23       	and	r19, r24
    22cc:	39 83       	std	Y+1, r19	; 0x01
    }
    ptcb                 =  OSTCBPrioTbl[prio];       /* Point to this task's OS_TCB                   */
    22ce:	e2 2f       	mov	r30, r18
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	ee 0f       	add	r30, r30
    22d4:	ff 1f       	adc	r31, r31
    22d6:	e4 58       	subi	r30, 0x84	; 132
    22d8:	f8 4f       	sbci	r31, 0xF8	; 248
    22da:	01 90       	ld	r0, Z+
    22dc:	f0 81       	ld	r31, Z
    22de:	e0 2d       	mov	r30, r0
    ptcb->OSTCBDly       =  0;                        /* Prevent OSTimeTick() from readying task       */
    22e0:	14 86       	std	Z+12, r1	; 0x0c
    22e2:	13 86       	std	Z+11, r1	; 0x0b
    ptcb->OSTCBEventPtr  = (OS_EVENT *)0;             /* Unlink ECB from this task                     */
    22e4:	17 82       	std	Z+7, r1	; 0x07
    22e6:	16 82       	std	Z+6, r1	; 0x06
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg       = msg;                       /* Send message directly to waiting task         */
    22e8:	11 87       	std	Z+9, r17	; 0x09
    22ea:	00 87       	std	Z+8, r16	; 0x08
#else
    msg                  = msg;                       /* Prevent compiler warning if not used          */
#endif
    ptcb->OSTCBStat     &= ~msk;                      /* Clear bit associated with event type          */
    22ec:	8f 2d       	mov	r24, r15
    22ee:	80 95       	com	r24
    22f0:	95 85       	ldd	r25, Z+13	; 0x0d
    22f2:	89 23       	and	r24, r25
    22f4:	85 87       	std	Z+13, r24	; 0x0d
    if (ptcb->OSTCBStat == OS_STAT_RDY) {             /* See if task is ready (could be susp'd)        */
    22f6:	88 23       	and	r24, r24
    22f8:	59 f4       	brne	.+22     	; 0x2310 <OS_EventTaskRdy+0xa8>
        OSRdyGrp        |=  bity;                     /* Put task in the ready to run list             */
    22fa:	80 91 af 05 	lds	r24, 0x05AF
    22fe:	87 2b       	or	r24, r23
    2300:	80 93 af 05 	sts	0x05AF, r24
        OSRdyTbl[y]     |=  bitx;
    2304:	fa 01       	movw	r30, r20
    2306:	e0 55       	subi	r30, 0x50	; 80
    2308:	fa 4f       	sbci	r31, 0xFA	; 250
    230a:	80 81       	ld	r24, Z
    230c:	68 2b       	or	r22, r24
    230e:	60 83       	st	Z, r22
    }
    return (prio);
}
    2310:	82 2f       	mov	r24, r18
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	1f 91       	pop	r17
    2318:	0f 91       	pop	r16
    231a:	ff 90       	pop	r15
    231c:	08 95       	ret

0000231e <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if OS_EVENT_EN > 0
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    231e:	cf 93       	push	r28
    2320:	df 93       	push	r29
    2322:	ec 01       	movw	r28, r24
    INT8U  y;


    OSTCBCur->OSTCBEventPtr = pevent;            /* Store pointer to event control block in TCB        */
    2324:	a0 91 b6 05 	lds	r26, 0x05B6
    2328:	b0 91 b7 05 	lds	r27, 0x05B7
    232c:	17 96       	adiw	r26, 0x07	; 7
    232e:	9c 93       	st	X, r25
    2330:	8e 93       	st	-X, r24
    2332:	16 97       	sbiw	r26, 0x06	; 6
    y                       = OSTCBCur->OSTCBY;  /* Task no longer ready                               */
    OSRdyTbl[y]            &= ~OSTCBCur->OSTCBBitX;
    2334:	50 96       	adiw	r26, 0x10	; 16
    2336:	8c 91       	ld	r24, X
    2338:	50 97       	sbiw	r26, 0x10	; 16
    233a:	28 2f       	mov	r18, r24
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	51 96       	adiw	r26, 0x11	; 17
    2340:	4c 91       	ld	r20, X
    2342:	51 97       	sbiw	r26, 0x11	; 17
    2344:	f9 01       	movw	r30, r18
    2346:	e0 55       	subi	r30, 0x50	; 80
    2348:	fa 4f       	sbci	r31, 0xFA	; 250
    234a:	84 2f       	mov	r24, r20
    234c:	80 95       	com	r24
    234e:	90 81       	ld	r25, Z
    2350:	89 23       	and	r24, r25
    2352:	80 83       	st	Z, r24
    if (OSRdyTbl[y] == 0x00) {                   
    2354:	88 23       	and	r24, r24
    2356:	49 f4       	brne	.+18     	; 0x236a <OS_EventTaskWait+0x4c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;        /* Clear event grp bit if this was only task pending  */
    2358:	52 96       	adiw	r26, 0x12	; 18
    235a:	9c 91       	ld	r25, X
    235c:	52 97       	sbiw	r26, 0x12	; 18
    235e:	90 95       	com	r25
    2360:	80 91 af 05 	lds	r24, 0x05AF
    2364:	89 23       	and	r24, r25
    2366:	80 93 af 05 	sts	0x05AF, r24
    }
    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;          /* Put task in waiting list  */
    236a:	fe 01       	movw	r30, r28
    236c:	e2 0f       	add	r30, r18
    236e:	f3 1f       	adc	r31, r19
    2370:	86 81       	ldd	r24, Z+6	; 0x06
    2372:	84 2b       	or	r24, r20
    2374:	86 83       	std	Z+6, r24	; 0x06
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	52 96       	adiw	r26, 0x12	; 18
    237a:	9c 91       	ld	r25, X
    237c:	89 2b       	or	r24, r25
    237e:	89 83       	std	Y+1, r24	; 0x01
}
    2380:	df 91       	pop	r29
    2382:	cf 91       	pop	r28
    2384:	08 95       	ret

00002386 <OS_EventTO>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if OS_EVENT_EN > 0
void  OS_EventTO (OS_EVENT *pevent)
{
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	ec 01       	movw	r28, r24
    INT8U  y;


    y                      = OSTCBCur->OSTCBY;
    238c:	a0 91 b6 05 	lds	r26, 0x05B6
    2390:	b0 91 b7 05 	lds	r27, 0x05B7
    pevent->OSEventTbl[y] &= ~OSTCBCur->OSTCBBitX;
    2394:	50 96       	adiw	r26, 0x10	; 16
    2396:	8c 91       	ld	r24, X
    2398:	50 97       	sbiw	r26, 0x10	; 16
    239a:	fe 01       	movw	r30, r28
    239c:	e8 0f       	add	r30, r24
    239e:	f1 1d       	adc	r31, r1
    23a0:	51 96       	adiw	r26, 0x11	; 17
    23a2:	8c 91       	ld	r24, X
    23a4:	51 97       	sbiw	r26, 0x11	; 17
    23a6:	80 95       	com	r24
    23a8:	96 81       	ldd	r25, Z+6	; 0x06
    23aa:	89 23       	and	r24, r25
    23ac:	86 83       	std	Z+6, r24	; 0x06
    if (pevent->OSEventTbl[y] == 0x00) {
    23ae:	88 23       	and	r24, r24
    23b0:	39 f4       	brne	.+14     	; 0x23c0 <OS_EventTO+0x3a>
        pevent->OSEventGrp &= ~OSTCBCur->OSTCBBitY;
    23b2:	52 96       	adiw	r26, 0x12	; 18
    23b4:	9c 91       	ld	r25, X
    23b6:	52 97       	sbiw	r26, 0x12	; 18
    23b8:	90 95       	com	r25
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	89 23       	and	r24, r25
    23be:	89 83       	std	Y+1, r24	; 0x01
    }
    OSTCBCur->OSTCBStat     = OS_STAT_RDY;       /* Set status to ready                                */
    23c0:	1d 96       	adiw	r26, 0x0d	; 13
    23c2:	1c 92       	st	X, r1
    23c4:	1d 97       	sbiw	r26, 0x0d	; 13
    OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;     /* No longer waiting for event                        */
    23c6:	17 96       	adiw	r26, 0x07	; 7
    23c8:	1c 92       	st	X, r1
    23ca:	1e 92       	st	-X, r1
    23cc:	16 97       	sbiw	r26, 0x06	; 6
}
    23ce:	df 91       	pop	r29
    23d0:	cf 91       	pop	r28
    23d2:	08 95       	ret

000023d4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if OS_EVENT_EN > 0
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    23d4:	fc 01       	movw	r30, r24
    INT8U  *ptbl;


    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
    23d6:	11 82       	std	Z+1, r1	; 0x01
    ptbl               = &pevent->OSEventTbl[0];

#if OS_EVENT_TBL_SIZE > 0
    *ptbl++            = 0x00;
    23d8:	16 82       	std	Z+6, r1	; 0x06
#endif

#if OS_EVENT_TBL_SIZE > 1
    *ptbl++            = 0x00;
    23da:	17 82       	std	Z+7, r1	; 0x07
#endif

#if OS_EVENT_TBL_SIZE > 7
    *ptbl              = 0x00;
#endif
}
    23dc:	08 95       	ret

000023de <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *err)
{
    23de:	fc 01       	movw	r30, r24
    23e0:	d9 01       	movw	r26, r18
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *err = OS_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    23e2:	80 81       	ld	r24, Z
    23e4:	85 30       	cpi	r24, 0x05	; 5
    23e6:	21 f0       	breq	.+8      	; 0x23f0 <OSFlagAccept+0x12>
        *err = OS_ERR_EVENT_TYPE;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	8c 93       	st	X, r24
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	08 95       	ret
        return ((OS_FLAGS)0);
    }
    if (wait_type & OS_FLAG_CONSUME) {                     /* See if we need to consume the flags      */
    23f0:	47 fd       	sbrc	r20, 7
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <OSFlagAccept+0x1a>
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <OSFlagAccept+0x1e>
        wait_type &= ~OS_FLAG_CONSUME;
    23f8:	4f 77       	andi	r20, 0x7F	; 127
    23fa:	21 e0       	ldi	r18, 0x01	; 1
        consume    = TRUE;
    } else {
        consume    = FALSE;
    }
/*$PAGE*/
    *err = OS_NO_ERR;                                      /* Assume NO error until proven otherwise.  */
    23fc:	1c 92       	st	X, r1
    OS_ENTER_CRITICAL();
    23fe:	0f 92       	push	r0
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	0f 92       	push	r0
    2404:	f8 94       	cli
    switch (wait_type) {
    2406:	41 30       	cpi	r20, 0x01	; 1
    2408:	09 f4       	brne	.+2      	; 0x240c <OSFlagAccept+0x2e>
    240a:	3c c0       	rjmp	.+120    	; 0x2484 <OSFlagAccept+0xa6>
    240c:	41 30       	cpi	r20, 0x01	; 1
    240e:	40 f1       	brcs	.+80     	; 0x2460 <OSFlagAccept+0x82>
    2410:	42 30       	cpi	r20, 0x02	; 2
    2412:	21 f0       	breq	.+8      	; 0x241c <OSFlagAccept+0x3e>
    2414:	43 30       	cpi	r20, 0x03	; 3
    2416:	09 f0       	breq	.+2      	; 0x241a <OSFlagAccept+0x3c>
    2418:	46 c0       	rjmp	.+140    	; 0x24a6 <OSFlagAccept+0xc8>
    241a:	12 c0       	rjmp	.+36     	; 0x2440 <OSFlagAccept+0x62>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = pgrp->OSFlagFlags & flags;        /* Extract only the bits we want            */
    241c:	93 81       	ldd	r25, Z+3	; 0x03
    241e:	86 2f       	mov	r24, r22
    2420:	89 23       	and	r24, r25
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    2422:	86 17       	cp	r24, r22
    2424:	31 f4       	brne	.+12     	; 0x2432 <OSFlagAccept+0x54>
                 if (consume == TRUE) {                    /* See if we need to consume the flags      */
    2426:	21 30       	cpi	r18, 0x01	; 1
    2428:	31 f4       	brne	.+12     	; 0x2436 <OSFlagAccept+0x58>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    242a:	60 95       	com	r22
    242c:	96 23       	and	r25, r22
    242e:	93 83       	std	Z+3, r25	; 0x03
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <OSFlagAccept+0x58>
                 }
             } else {
                 *err  = OS_FLAG_ERR_NOT_RDY;
    2432:	88 e9       	ldi	r24, 0x98	; 152
    2434:	8c 93       	st	X, r24
             }
             flags_cur = pgrp->OSFlagFlags;                /* Will return the state of the group       */
    2436:	83 81       	ldd	r24, Z+3	; 0x03
             OS_EXIT_CRITICAL();
    2438:	0f 90       	pop	r0
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	0f 90       	pop	r0
    243e:	08 95       	ret
             break;

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = pgrp->OSFlagFlags & flags;        /* Extract only the bits we want            */
    2440:	83 81       	ldd	r24, Z+3	; 0x03
    2442:	68 23       	and	r22, r24
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    2444:	31 f0       	breq	.+12     	; 0x2452 <OSFlagAccept+0x74>
                 if (consume == TRUE) {                    /* See if we need to consume the flags      */
    2446:	21 30       	cpi	r18, 0x01	; 1
    2448:	31 f4       	brne	.+12     	; 0x2456 <OSFlagAccept+0x78>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    244a:	60 95       	com	r22
    244c:	68 23       	and	r22, r24
    244e:	63 83       	std	Z+3, r22	; 0x03
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <OSFlagAccept+0x78>
                 }
             } else {
                 *err  = OS_FLAG_ERR_NOT_RDY;
    2452:	88 e9       	ldi	r24, 0x98	; 152
    2454:	8c 93       	st	X, r24
             }
             flags_cur = pgrp->OSFlagFlags;                /* Will return the state of the group       */
    2456:	83 81       	ldd	r24, Z+3	; 0x03
             OS_EXIT_CRITICAL();
    2458:	0f 90       	pop	r0
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	0f 90       	pop	r0
    245e:	08 95       	ret
             break;

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = ~pgrp->OSFlagFlags & flags;       /* Extract only the bits we want            */
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	89 2f       	mov	r24, r25
    2464:	80 95       	com	r24
    2466:	86 23       	and	r24, r22
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    2468:	86 17       	cp	r24, r22
    246a:	29 f4       	brne	.+10     	; 0x2476 <OSFlagAccept+0x98>
                 if (consume == TRUE) {                    /* See if we need to consume the flags      */
    246c:	21 30       	cpi	r18, 0x01	; 1
    246e:	29 f4       	brne	.+10     	; 0x247a <OSFlagAccept+0x9c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    2470:	96 2b       	or	r25, r22
    2472:	93 83       	std	Z+3, r25	; 0x03
    2474:	02 c0       	rjmp	.+4      	; 0x247a <OSFlagAccept+0x9c>
                 }
             } else {
                 *err  = OS_FLAG_ERR_NOT_RDY;
    2476:	88 e9       	ldi	r24, 0x98	; 152
    2478:	8c 93       	st	X, r24
             }
             flags_cur = pgrp->OSFlagFlags;                /* Will return the state of the group       */
    247a:	83 81       	ldd	r24, Z+3	; 0x03
             OS_EXIT_CRITICAL();
    247c:	0f 90       	pop	r0
    247e:	0f be       	out	0x3f, r0	; 63
    2480:	0f 90       	pop	r0
    2482:	08 95       	ret
             break;

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = ~pgrp->OSFlagFlags & flags;       /* Extract only the bits we want            */
    2484:	93 81       	ldd	r25, Z+3	; 0x03
    2486:	89 2f       	mov	r24, r25
    2488:	80 95       	com	r24
    248a:	86 23       	and	r24, r22
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    248c:	29 f0       	breq	.+10     	; 0x2498 <OSFlagAccept+0xba>
                 if (consume == TRUE) {                    /* See if we need to consume the flags      */
    248e:	21 30       	cpi	r18, 0x01	; 1
    2490:	29 f4       	brne	.+10     	; 0x249c <OSFlagAccept+0xbe>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    2492:	89 2b       	or	r24, r25
    2494:	83 83       	std	Z+3, r24	; 0x03
    2496:	02 c0       	rjmp	.+4      	; 0x249c <OSFlagAccept+0xbe>
                 }
             } else {
                 *err  = OS_FLAG_ERR_NOT_RDY;
    2498:	88 e9       	ldi	r24, 0x98	; 152
    249a:	8c 93       	st	X, r24
             }
             flags_cur = pgrp->OSFlagFlags;                /* Will return the state of the group       */
    249c:	83 81       	ldd	r24, Z+3	; 0x03
             OS_EXIT_CRITICAL();
    249e:	0f 90       	pop	r0
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	0f 90       	pop	r0
    24a4:	08 95       	ret
             break;
#endif

        default:
             OS_EXIT_CRITICAL();
    24a6:	0f 90       	pop	r0
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	0f 90       	pop	r0
             flags_cur = (OS_FLAGS)0;
             *err      = OS_FLAG_ERR_WAIT_TYPE;
    24ac:	87 e9       	ldi	r24, 0x97	; 151
    24ae:	8c 93       	st	X, r24
    24b0:	80 e0       	ldi	r24, 0x00	; 0
             break;
    }
    return (flags_cur);
}
    24b2:	08 95       	ret

000024b4 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *err)
{
    24b4:	28 2f       	mov	r18, r24
    24b6:	db 01       	movw	r26, r22
    OS_CPU_SR    cpu_sr;
#endif
    OS_FLAG_GRP *pgrp;


    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    24b8:	80 91 b5 05 	lds	r24, 0x05B5
    24bc:	88 23       	and	r24, r24
    24be:	29 f0       	breq	.+10     	; 0x24ca <OSFlagCreate+0x16>
        *err = OS_ERR_CREATE_ISR;                   /* ... can't CREATE from an ISR                    */
    24c0:	8d e8       	ldi	r24, 0x8D	; 141
    24c2:	8c 93       	st	X, r24
    24c4:	e0 e0       	ldi	r30, 0x00	; 0
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	1f c0       	rjmp	.+62     	; 0x2508 <OSFlagCreate+0x54>
        return ((OS_FLAG_GRP *)0);
    }
    OS_ENTER_CRITICAL();
    24ca:	0f 92       	push	r0
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	0f 92       	push	r0
    24d0:	f8 94       	cli
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    24d2:	e0 91 7a 07 	lds	r30, 0x077A
    24d6:	f0 91 7b 07 	lds	r31, 0x077B
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    24da:	30 97       	sbiw	r30, 0x00	; 0
    24dc:	81 f0       	breq	.+32     	; 0x24fe <OSFlagCreate+0x4a>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    24de:	81 81       	ldd	r24, Z+1	; 0x01
    24e0:	92 81       	ldd	r25, Z+2	; 0x02
    24e2:	90 93 7b 07 	sts	0x077B, r25
    24e6:	80 93 7a 07 	sts	0x077A, r24
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    24ea:	85 e0       	ldi	r24, 0x05	; 5
    24ec:	80 83       	st	Z, r24
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    24ee:	23 83       	std	Z+3, r18	; 0x03
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    24f0:	12 82       	std	Z+2, r1	; 0x02
    24f2:	11 82       	std	Z+1, r1	; 0x01
#if OS_FLAG_NAME_SIZE > 0
        (void)strcpy(pgrp->OSFlagName, "?");
#endif
        OS_EXIT_CRITICAL();
    24f4:	0f 90       	pop	r0
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	0f 90       	pop	r0
        *err                 = OS_NO_ERR;
    24fa:	1c 92       	st	X, r1
    24fc:	05 c0       	rjmp	.+10     	; 0x2508 <OSFlagCreate+0x54>
    } else {
        OS_EXIT_CRITICAL();
    24fe:	0f 90       	pop	r0
    2500:	0f be       	out	0x3f, r0	; 63
    2502:	0f 90       	pop	r0
        *err                 = OS_FLAG_GRP_DEPLETED;
    2504:	8a e9       	ldi	r24, 0x9A	; 154
    2506:	8c 93       	st	X, r24
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
}
    2508:	cf 01       	movw	r24, r30
    250a:	08 95       	ret

0000250c <OSFlagPendGetFlagsRdy>:
    OS_CPU_SR     cpu_sr;
#endif
    OS_FLAGS      flags;


    OS_ENTER_CRITICAL();
    250c:	0f 92       	push	r0
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	0f 92       	push	r0
    2512:	f8 94       	cli
    flags = OSTCBCur->OSTCBFlagsRdy;
    OS_ENTER_CRITICAL();
    2514:	0f 92       	push	r0
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	0f 92       	push	r0
    251a:	f8 94       	cli
    251c:	e0 91 b6 05 	lds	r30, 0x05B6
    2520:	f0 91 b7 05 	lds	r31, 0x05B7
    return (flags);
}
    2524:	82 85       	ldd	r24, Z+10	; 0x0a
    2526:	08 95       	ret

00002528 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *err)
{
    2528:	fc 01       	movw	r30, r24
    252a:	db 01       	movw	r26, r22
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
        *err = OS_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    252c:	80 81       	ld	r24, Z
    252e:	85 30       	cpi	r24, 0x05	; 5
    2530:	21 f0       	breq	.+8      	; 0x253a <OSFlagQuery+0x12>
        *err = OS_ERR_EVENT_TYPE;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	8c 93       	st	X, r24
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	08 95       	ret
        return ((OS_FLAGS)0);
    }
    OS_ENTER_CRITICAL();
    253a:	0f 92       	push	r0
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	0f 92       	push	r0
    2540:	f8 94       	cli
    flags = pgrp->OSFlagFlags;
    2542:	83 81       	ldd	r24, Z+3	; 0x03
    OS_EXIT_CRITICAL();
    2544:	0f 90       	pop	r0
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	0f 90       	pop	r0
    *err = OS_NO_ERR;
    254a:	1c 92       	st	X, r1
    return (flags);                               /* Return the current value of the event flags       */
}
    254c:	08 95       	ret

0000254e <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
    2552:	ec 01       	movw	r28, r24
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;  /* Point to TCB of waiting task             */
    2554:	ac 81       	ldd	r26, Y+4	; 0x04
    2556:	bd 81       	ldd	r27, Y+5	; 0x05
    ptcb->OSTCBDly      = 0;
    2558:	1c 96       	adiw	r26, 0x0c	; 12
    255a:	1c 92       	st	X, r1
    255c:	1e 92       	st	-X, r1
    255e:	1b 97       	sbiw	r26, 0x0b	; 11
    ptcb->OSTCBFlagsRdy = flags_rdy;
    2560:	1a 96       	adiw	r26, 0x0a	; 10
    2562:	6c 93       	st	X, r22
    2564:	1a 97       	sbiw	r26, 0x0a	; 10
    ptcb->OSTCBStat    &= ~OS_STAT_FLAG;
    2566:	1d 96       	adiw	r26, 0x0d	; 13
    2568:	8c 91       	ld	r24, X
    256a:	1d 97       	sbiw	r26, 0x0d	; 13
    256c:	8f 7d       	andi	r24, 0xDF	; 223
    256e:	1d 96       	adiw	r26, 0x0d	; 13
    2570:	8c 93       	st	X, r24
    2572:	1d 97       	sbiw	r26, 0x0d	; 13
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Put task into ready list                 */
    2574:	88 23       	and	r24, r24
    2576:	11 f0       	breq	.+4      	; 0x257c <OS_FlagTaskRdy+0x2e>
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	14 c0       	rjmp	.+40     	; 0x25a4 <OS_FlagTaskRdy+0x56>
        OSRdyGrp               |= ptcb->OSTCBBitY;
    257c:	80 91 af 05 	lds	r24, 0x05AF
    2580:	52 96       	adiw	r26, 0x12	; 18
    2582:	9c 91       	ld	r25, X
    2584:	52 97       	sbiw	r26, 0x12	; 18
    2586:	89 2b       	or	r24, r25
    2588:	80 93 af 05 	sts	0x05AF, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    258c:	50 96       	adiw	r26, 0x10	; 16
    258e:	ec 91       	ld	r30, X
    2590:	50 97       	sbiw	r26, 0x10	; 16
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	e0 55       	subi	r30, 0x50	; 80
    2596:	fa 4f       	sbci	r31, 0xFA	; 250
    2598:	80 81       	ld	r24, Z
    259a:	51 96       	adiw	r26, 0x11	; 17
    259c:	9c 91       	ld	r25, X
    259e:	89 2b       	or	r24, r25
    25a0:	80 83       	st	Z, r24
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    25a4:	ea 81       	ldd	r30, Y+2	; 0x02
    25a6:	fb 81       	ldd	r31, Y+3	; 0x03
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    25a8:	a8 81       	ld	r26, Y
    25aa:	b9 81       	ldd	r27, Y+1	; 0x01
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    25ac:	30 97       	sbiw	r30, 0x00	; 0
    25ae:	59 f4       	brne	.+22     	; 0x25c6 <OS_FlagTaskRdy+0x78>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    25b0:	ee 81       	ldd	r30, Y+6	; 0x06
    25b2:	ff 81       	ldd	r31, Y+7	; 0x07
    25b4:	b2 83       	std	Z+2, r27	; 0x02
    25b6:	a1 83       	std	Z+1, r26	; 0x01
        if (pnode_next != (OS_FLAG_NODE *)0) {
    25b8:	10 97       	sbiw	r26, 0x00	; 0
    25ba:	69 f0       	breq	.+26     	; 0x25d6 <OS_FlagTaskRdy+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    25bc:	13 96       	adiw	r26, 0x03	; 3
    25be:	1c 92       	st	X, r1
    25c0:	1e 92       	st	-X, r1
    25c2:	12 97       	sbiw	r26, 0x02	; 2
    25c4:	08 c0       	rjmp	.+16     	; 0x25d6 <OS_FlagTaskRdy+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    25c6:	b1 83       	std	Z+1, r27	; 0x01
    25c8:	a0 83       	st	Z, r26
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    25ca:	10 97       	sbiw	r26, 0x00	; 0
    25cc:	21 f0       	breq	.+8      	; 0x25d6 <OS_FlagTaskRdy+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    25ce:	13 96       	adiw	r26, 0x03	; 3
    25d0:	fc 93       	st	X, r31
    25d2:	ee 93       	st	-X, r30
    25d4:	12 97       	sbiw	r26, 0x02	; 2
    } else {
        sched                   = FALSE;
    }
    OS_FlagUnlink(pnode);
    return (sched);
}
    25d6:	df 91       	pop	r29
    25d8:	cf 91       	pop	r28
    25da:	08 95       	ret

000025dc <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    25dc:	cf 93       	push	r28
    25de:	df 93       	push	r29
    25e0:	fc 01       	movw	r30, r24
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    25e2:	c2 81       	ldd	r28, Z+2	; 0x02
    25e4:	d3 81       	ldd	r29, Z+3	; 0x03
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    25e6:	a0 81       	ld	r26, Z
    25e8:	b1 81       	ldd	r27, Z+1	; 0x01
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    25ea:	20 97       	sbiw	r28, 0x00	; 0
    25ec:	61 f4       	brne	.+24     	; 0x2606 <OS_FlagUnlink+0x2a>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    25ee:	06 80       	ldd	r0, Z+6	; 0x06
    25f0:	f7 81       	ldd	r31, Z+7	; 0x07
    25f2:	e0 2d       	mov	r30, r0
    25f4:	b2 83       	std	Z+2, r27	; 0x02
    25f6:	a1 83       	std	Z+1, r26	; 0x01
        if (pnode_next != (OS_FLAG_NODE *)0) {
    25f8:	10 97       	sbiw	r26, 0x00	; 0
    25fa:	69 f0       	breq	.+26     	; 0x2616 <OS_FlagUnlink+0x3a>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    25fc:	13 96       	adiw	r26, 0x03	; 3
    25fe:	1c 92       	st	X, r1
    2600:	1e 92       	st	-X, r1
    2602:	12 97       	sbiw	r26, 0x02	; 2
    2604:	08 c0       	rjmp	.+16     	; 0x2616 <OS_FlagUnlink+0x3a>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    2606:	b9 83       	std	Y+1, r27	; 0x01
    2608:	a8 83       	st	Y, r26
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    260a:	10 97       	sbiw	r26, 0x00	; 0
    260c:	21 f0       	breq	.+8      	; 0x2616 <OS_FlagUnlink+0x3a>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    260e:	13 96       	adiw	r26, 0x03	; 3
    2610:	dc 93       	st	X, r29
    2612:	ce 93       	st	-X, r28
    2614:	12 97       	sbiw	r26, 0x02	; 2
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
#endif
}
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	08 95       	ret

0000261c <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
    261c:	fc 01       	movw	r30, r24
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
        return ((void *)0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
    261e:	80 81       	ld	r24, Z
    2620:	81 30       	cpi	r24, 0x01	; 1
    2622:	19 f0       	breq	.+6      	; 0x262a <OSMboxAccept+0xe>
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	0b c0       	rjmp	.+22     	; 0x2640 <OSMboxAccept+0x24>
        return ((void *)0);
    }
    OS_ENTER_CRITICAL();
    262a:	0f 92       	push	r0
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	0f 92       	push	r0
    2630:	f8 94       	cli
    msg                = pevent->OSEventPtr;
    2632:	24 81       	ldd	r18, Z+4	; 0x04
    2634:	35 81       	ldd	r19, Z+5	; 0x05
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
    2636:	15 82       	std	Z+5, r1	; 0x05
    2638:	14 82       	std	Z+4, r1	; 0x04
    OS_EXIT_CRITICAL();
    263a:	0f 90       	pop	r0
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	0f 90       	pop	r0
    return (msg);                                         /* Return the message received (or NULL)     */
}
    2640:	c9 01       	movw	r24, r18
    2642:	08 95       	ret

00002644 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *msg)
{
    2644:	9c 01       	movw	r18, r24
    OS_CPU_SR  cpu_sr;
#endif    
    OS_EVENT  *pevent;


    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    2646:	80 91 b5 05 	lds	r24, 0x05B5
    264a:	88 23       	and	r24, r24
    264c:	19 f0       	breq	.+6      	; 0x2654 <OSMboxCreate+0x10>
    264e:	e0 e0       	ldi	r30, 0x00	; 0
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	1e c0       	rjmp	.+60     	; 0x2690 <OSMboxCreate+0x4c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    }
    OS_ENTER_CRITICAL();
    2654:	0f 92       	push	r0
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	0f 92       	push	r0
    265a:	f8 94       	cli
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    265c:	e0 91 b2 05 	lds	r30, 0x05B2
    2660:	f0 91 b3 05 	lds	r31, 0x05B3
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    2664:	30 97       	sbiw	r30, 0x00	; 0
    2666:	31 f0       	breq	.+12     	; 0x2674 <OSMboxCreate+0x30>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    2668:	84 81       	ldd	r24, Z+4	; 0x04
    266a:	95 81       	ldd	r25, Z+5	; 0x05
    266c:	90 93 b3 05 	sts	0x05B3, r25
    2670:	80 93 b2 05 	sts	0x05B2, r24
    }
    OS_EXIT_CRITICAL();
    2674:	0f 90       	pop	r0
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	0f 90       	pop	r0
    if (pevent != (OS_EVENT *)0) {
    267a:	30 97       	sbiw	r30, 0x00	; 0
    267c:	49 f0       	breq	.+18     	; 0x2690 <OSMboxCreate+0x4c>
        pevent->OSEventType = OS_EVENT_TYPE_MBOX;
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	80 83       	st	Z, r24
        pevent->OSEventCnt  = 0;
    2682:	13 82       	std	Z+3, r1	; 0x03
    2684:	12 82       	std	Z+2, r1	; 0x02
        pevent->OSEventPtr  = msg;               /* Deposit message in event control block             */
    2686:	35 83       	std	Z+5, r19	; 0x05
    2688:	24 83       	std	Z+4, r18	; 0x04
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    INT8U  *ptbl;


    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
    268a:	11 82       	std	Z+1, r1	; 0x01
    ptbl               = &pevent->OSEventTbl[0];

#if OS_EVENT_TBL_SIZE > 0
    *ptbl++            = 0x00;
    268c:	16 82       	std	Z+6, r1	; 0x06
#endif

#if OS_EVENT_TBL_SIZE > 1
    *ptbl++            = 0x00;
    268e:	17 82       	std	Z+7, r1	; 0x07
        (void)strcpy(pevent->OSEventName, "?");
#endif
        OS_EventWaitListInit(pevent);
    }
    return (pevent);                             /* Return pointer to event control block              */
}
    2690:	cf 01       	movw	r24, r30
    2692:	08 95       	ret

00002694 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *pdata)
{
    2694:	fc 01       	movw	r30, r24
    2696:	db 01       	movw	r26, r22
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
    2698:	80 81       	ld	r24, Z
    269a:	81 30       	cpi	r24, 0x01	; 1
    269c:	11 f0       	breq	.+4      	; 0x26a2 <OSMboxQuery+0xe>
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	08 95       	ret
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    26a2:	0f 92       	push	r0
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	0f 92       	push	r0
    26a8:	f8 94       	cli
    pdata->OSEventGrp = pevent->OSEventGrp;                /* Copy message mailbox wait list           */
    26aa:	81 81       	ldd	r24, Z+1	; 0x01
    26ac:	14 96       	adiw	r26, 0x04	; 4
    26ae:	8c 93       	st	X, r24
    26b0:	14 97       	sbiw	r26, 0x04	; 4
    psrc              = &pevent->OSEventTbl[0];
    pdest             = &pdata->OSEventTbl[0];

#if OS_EVENT_TBL_SIZE > 0
    *pdest++          = *psrc++;
    26b2:	86 81       	ldd	r24, Z+6	; 0x06
    26b4:	12 96       	adiw	r26, 0x02	; 2
    26b6:	8c 93       	st	X, r24
    26b8:	12 97       	sbiw	r26, 0x02	; 2
#endif

#if OS_EVENT_TBL_SIZE > 1
    *pdest++          = *psrc++;
    26ba:	87 81       	ldd	r24, Z+7	; 0x07
    26bc:	13 96       	adiw	r26, 0x03	; 3
    26be:	8c 93       	st	X, r24
    26c0:	13 97       	sbiw	r26, 0x03	; 3
#endif

#if OS_EVENT_TBL_SIZE > 7
    *pdest            = *psrc;
#endif
    pdata->OSMsg = pevent->OSEventPtr;                     /* Get message from mailbox                 */
    26c2:	84 81       	ldd	r24, Z+4	; 0x04
    26c4:	95 81       	ldd	r25, Z+5	; 0x05
    26c6:	8d 93       	st	X+, r24
    26c8:	9c 93       	st	X, r25
    OS_EXIT_CRITICAL();
    26ca:	0f 90       	pop	r0
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	0f 90       	pop	r0
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    return (OS_NO_ERR);
}
    26d2:	08 95       	ret

000026d4 <OSMutexAccept>:
*********************************************************************************************************
*/

#if OS_MUTEX_ACCEPT_EN > 0
INT8U  OSMutexAccept (OS_EVENT *pevent, INT8U *err)
{
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	dc 01       	movw	r26, r24
    26da:	eb 01       	movw	r28, r22
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr;
#endif    
    
    
    if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
    26dc:	80 91 b5 05 	lds	r24, 0x05B5
    26e0:	88 23       	and	r24, r24
    26e2:	11 f0       	breq	.+4      	; 0x26e8 <OSMutexAccept+0x14>
        *err = OS_ERR_PEND_ISR;
    26e4:	82 e0       	ldi	r24, 0x02	; 2
    26e6:	04 c0       	rjmp	.+8      	; 0x26f0 <OSMutexAccept+0x1c>
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
        *err = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif                                                     
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
    26e8:	8c 91       	ld	r24, X
    26ea:	84 30       	cpi	r24, 0x04	; 4
    26ec:	19 f0       	breq	.+6      	; 0x26f4 <OSMutexAccept+0x20>
        *err = OS_ERR_EVENT_TYPE;
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	88 83       	st	Y, r24
    26f2:	25 c0       	rjmp	.+74     	; 0x273e <OSMutexAccept+0x6a>
        return (0);
    }
    OS_ENTER_CRITICAL();							   /* Get value (0 or 1) of Mutex                  */
    26f4:	0f 92       	push	r0
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	0f 92       	push	r0
    26fa:	f8 94       	cli
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {     
    26fc:	12 96       	adiw	r26, 0x02	; 2
    26fe:	2d 91       	ld	r18, X+
    2700:	3c 91       	ld	r19, X
    2702:	13 97       	sbiw	r26, 0x03	; 3
    2704:	2f 3f       	cpi	r18, 0xFF	; 255
    2706:	b9 f4       	brne	.+46     	; 0x2736 <OSMutexAccept+0x62>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
    2708:	e0 91 b6 05 	lds	r30, 0x05B6
    270c:	f0 91 b7 05 	lds	r31, 0x05B7
    2710:	86 85       	ldd	r24, Z+14	; 0x0e
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	20 70       	andi	r18, 0x00	; 0
    2716:	82 2b       	or	r24, r18
    2718:	93 2b       	or	r25, r19
    271a:	13 96       	adiw	r26, 0x03	; 3
    271c:	9c 93       	st	X, r25
    271e:	8e 93       	st	-X, r24
    2720:	12 97       	sbiw	r26, 0x02	; 2
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
    2722:	15 96       	adiw	r26, 0x05	; 5
    2724:	fc 93       	st	X, r31
    2726:	ee 93       	st	-X, r30
    2728:	14 97       	sbiw	r26, 0x04	; 4
        OS_EXIT_CRITICAL();
    272a:	0f 90       	pop	r0
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	0f 90       	pop	r0
        *err = OS_NO_ERR;
    2730:	18 82       	st	Y, r1
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	05 c0       	rjmp	.+10     	; 0x2740 <OSMutexAccept+0x6c>
        return (1);
    }
    OS_EXIT_CRITICAL();
    2736:	0f 90       	pop	r0
    2738:	0f be       	out	0x3f, r0	; 63
    273a:	0f 90       	pop	r0
    *err = OS_NO_ERR;
    273c:	18 82       	st	Y, r1
    273e:	80 e0       	ldi	r24, 0x00	; 0
    return (0);
}
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
    2744:	08 95       	ret

00002746 <OSMutexCreate>:
*                 to use to reduce priority inversion.
*********************************************************************************************************
*/

OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *err)
{
    2746:	cf 93       	push	r28
    2748:	df 93       	push	r29
    274a:	28 2f       	mov	r18, r24
    274c:	eb 01       	movw	r28, r22
    OS_CPU_SR  cpu_sr;
#endif    
    OS_EVENT  *pevent;


    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    274e:	80 91 b5 05 	lds	r24, 0x05B5
    2752:	88 23       	and	r24, r24
    2754:	11 f0       	breq	.+4      	; 0x275a <OSMutexCreate+0x14>
        *err = OS_ERR_CREATE_ISR;                          /* ... can't CREATE mutex from an ISR       */
    2756:	8d e8       	ldi	r24, 0x8D	; 141
    2758:	12 c0       	rjmp	.+36     	; 0x277e <OSMutexCreate+0x38>
    if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
        *err = OS_PRIO_INVALID;
        return ((OS_EVENT *)0);
    }
#endif
    OS_ENTER_CRITICAL();
    275a:	0f 92       	push	r0
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	0f 92       	push	r0
    2760:	f8 94       	cli
    if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
    2762:	e2 2f       	mov	r30, r18
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	ee 0f       	add	r30, r30
    2768:	ff 1f       	adc	r31, r31
    276a:	e4 58       	subi	r30, 0x84	; 132
    276c:	f8 4f       	sbci	r31, 0xF8	; 248
    276e:	80 81       	ld	r24, Z
    2770:	91 81       	ldd	r25, Z+1	; 0x01
    2772:	89 2b       	or	r24, r25
    2774:	41 f0       	breq	.+16     	; 0x2786 <OSMutexCreate+0x40>
        OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
    2776:	0f 90       	pop	r0
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	0f 90       	pop	r0
        *err = OS_PRIO_EXIST;                              /* ... inheritance priority                 */
    277c:	88 e2       	ldi	r24, 0x28	; 40
    277e:	88 83       	st	Y, r24
    2780:	a0 e0       	ldi	r26, 0x00	; 0
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	34 c0       	rjmp	.+104    	; 0x27ee <OSMutexCreate+0xa8>
        return ((OS_EVENT *)0);                            
    }
    OSTCBPrioTbl[prio] = (OS_TCB *)1;                      /* Reserve the table entry                  */
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	80 83       	st	Z, r24
    pevent             = OSEventFreeList;                  /* Get next free event control block        */
    278e:	a0 91 b2 05 	lds	r26, 0x05B2
    2792:	b0 91 b3 05 	lds	r27, 0x05B3
    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
    2796:	10 97       	sbiw	r26, 0x00	; 0
    2798:	41 f4       	brne	.+16     	; 0x27aa <OSMutexCreate+0x64>
        OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
    279a:	11 82       	std	Z+1, r1	; 0x01
    279c:	10 82       	st	Z, r1
        OS_EXIT_CRITICAL();
    279e:	0f 90       	pop	r0
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	0f 90       	pop	r0
        *err               = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
    27a4:	84 e0       	ldi	r24, 0x04	; 4
    27a6:	88 83       	st	Y, r24
    27a8:	22 c0       	rjmp	.+68     	; 0x27ee <OSMutexCreate+0xa8>
        return (pevent);
    }
    OSEventFreeList     = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list           */
    27aa:	14 96       	adiw	r26, 0x04	; 4
    27ac:	8d 91       	ld	r24, X+
    27ae:	9c 91       	ld	r25, X
    27b0:	15 97       	sbiw	r26, 0x05	; 5
    27b2:	90 93 b3 05 	sts	0x05B3, r25
    27b6:	80 93 b2 05 	sts	0x05B2, r24
    OS_EXIT_CRITICAL();
    27ba:	0f 90       	pop	r0
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	0f 90       	pop	r0
    pevent->OSEventType = OS_EVENT_TYPE_MUTEX;
    27c0:	84 e0       	ldi	r24, 0x04	; 4
    27c2:	8c 93       	st	X, r24
    pevent->OSEventCnt  = ((INT16U)prio << 8) | OS_MUTEX_AVAILABLE;  /* Resource is available          */
    27c4:	92 2f       	mov	r25, r18
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	8f 6f       	ori	r24, 0xFF	; 255
    27ca:	13 96       	adiw	r26, 0x03	; 3
    27cc:	9c 93       	st	X, r25
    27ce:	8e 93       	st	-X, r24
    27d0:	12 97       	sbiw	r26, 0x02	; 2
    pevent->OSEventPtr  = (void *)0;                                 /* No task owning the mutex       */
    27d2:	15 96       	adiw	r26, 0x05	; 5
    27d4:	1c 92       	st	X, r1
    27d6:	1e 92       	st	-X, r1
    27d8:	14 97       	sbiw	r26, 0x04	; 4
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    INT8U  *ptbl;


    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
    27da:	11 96       	adiw	r26, 0x01	; 1
    27dc:	1c 92       	st	X, r1
    27de:	11 97       	sbiw	r26, 0x01	; 1
    ptbl               = &pevent->OSEventTbl[0];

#if OS_EVENT_TBL_SIZE > 0
    *ptbl++            = 0x00;
    27e0:	16 96       	adiw	r26, 0x06	; 6
    27e2:	1c 92       	st	X, r1
    27e4:	16 97       	sbiw	r26, 0x06	; 6
#endif

#if OS_EVENT_TBL_SIZE > 1
    *ptbl++            = 0x00;
    27e6:	17 96       	adiw	r26, 0x07	; 7
    27e8:	1c 92       	st	X, r1
    27ea:	17 97       	sbiw	r26, 0x07	; 7
#if OS_EVENT_NAME_SIZE > 0
    (void)strcpy(pevent->OSEventName, "?");
#endif
    OS_EventWaitListInit(pevent);
    *err                = OS_NO_ERR;
    27ec:	18 82       	st	Y, r1
    return (pevent);
}
    27ee:	cd 01       	movw	r24, r26
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	08 95       	ret

000027f6 <OSMutexQuery>:
*********************************************************************************************************
*/

#if OS_MUTEX_QUERY_EN > 0
INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *pdata)
{
    27f6:	dc 01       	movw	r26, r24
    27f8:	fb 01       	movw	r30, r22
#endif    
    INT8U     *psrc;
    INT8U     *pdest;


    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    27fa:	80 91 b5 05 	lds	r24, 0x05B5
    27fe:	88 23       	and	r24, r24
    2800:	11 f0       	breq	.+4      	; 0x2806 <OSMutexQuery+0x10>
    2802:	86 e0       	ldi	r24, 0x06	; 6
    2804:	08 95       	ret
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
    2806:	8c 91       	ld	r24, X
    2808:	84 30       	cpi	r24, 0x04	; 4
    280a:	11 f0       	breq	.+4      	; 0x2810 <OSMutexQuery+0x1a>
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	08 95       	ret
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    2810:	0f 92       	push	r0
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	0f 92       	push	r0
    2816:	f8 94       	cli
    pdata->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
    2818:	12 96       	adiw	r26, 0x02	; 2
    281a:	9c 91       	ld	r25, X
    281c:	12 97       	sbiw	r26, 0x02	; 2
    281e:	13 96       	adiw	r26, 0x03	; 3
    2820:	8c 91       	ld	r24, X
    2822:	13 97       	sbiw	r26, 0x03	; 3
    2824:	85 83       	std	Z+5, r24	; 0x05
    pdata->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
    2826:	94 83       	std	Z+4, r25	; 0x04
    if (pdata->OSOwnerPrio == 0xFF) {
    2828:	9f 3f       	cpi	r25, 0xFF	; 255
    282a:	19 f4       	brne	.+6      	; 0x2832 <OSMutexQuery+0x3c>
        pdata->OSValue = 1;
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	83 83       	std	Z+3, r24	; 0x03
    2830:	01 c0       	rjmp	.+2      	; 0x2834 <OSMutexQuery+0x3e>
    } else {
        pdata->OSValue = 0;
    2832:	13 82       	std	Z+3, r1	; 0x03
    }
    pdata->OSEventGrp  = pevent->OSEventGrp;               /* Copy wait list                           */
    2834:	11 96       	adiw	r26, 0x01	; 1
    2836:	8c 91       	ld	r24, X
    2838:	11 97       	sbiw	r26, 0x01	; 1
    283a:	82 83       	std	Z+2, r24	; 0x02
    psrc               = &pevent->OSEventTbl[0];
    pdest              = &pdata->OSEventTbl[0];
#if OS_EVENT_TBL_SIZE > 0
    *pdest++           = *psrc++;
    283c:	16 96       	adiw	r26, 0x06	; 6
    283e:	8c 91       	ld	r24, X
    2840:	16 97       	sbiw	r26, 0x06	; 6
    2842:	80 83       	st	Z, r24
#endif

#if OS_EVENT_TBL_SIZE > 1
    *pdest++           = *psrc++;
    2844:	17 96       	adiw	r26, 0x07	; 7
    2846:	8c 91       	ld	r24, X
    2848:	81 83       	std	Z+1, r24	; 0x01
#endif

#if OS_EVENT_TBL_SIZE > 7
    *pdest             = *psrc;
#endif
    OS_EXIT_CRITICAL();
    284a:	0f 90       	pop	r0
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	0f 90       	pop	r0
    2850:	80 e0       	ldi	r24, 0x00	; 0
    return (OS_NO_ERR);
}
    2852:	08 95       	ret

00002854 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *err)
{
    2854:	cf 93       	push	r28
    2856:	df 93       	push	r29
    2858:	fc 01       	movw	r30, r24
    285a:	eb 01       	movw	r28, r22
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
        *err = OS_ERR_PEVENT_NULL;
        return ((void *)0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    285c:	80 81       	ld	r24, Z
    285e:	82 30       	cpi	r24, 0x02	; 2
    2860:	29 f0       	breq	.+10     	; 0x286c <OSQAccept+0x18>
        *err = OS_ERR_EVENT_TYPE;
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	88 83       	st	Y, r24
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	33 c0       	rjmp	.+102    	; 0x28d2 <OSQAccept+0x7e>
        return ((void *)0);
    }
    OS_ENTER_CRITICAL();
    286c:	0f 92       	push	r0
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	0f 92       	push	r0
    2872:	f8 94       	cli
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    2874:	a4 81       	ldd	r26, Z+4	; 0x04
    2876:	b5 81       	ldd	r27, Z+5	; 0x05
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    2878:	1c 96       	adiw	r26, 0x0c	; 12
    287a:	8d 91       	ld	r24, X+
    287c:	9c 91       	ld	r25, X
    287e:	1d 97       	sbiw	r26, 0x0d	; 13
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	01 f1       	breq	.+64     	; 0x28c4 <OSQAccept+0x70>
        msg = *pq->OSQOut++;                     /* Yes, extract oldest message from the queue         */
    2884:	18 96       	adiw	r26, 0x08	; 8
    2886:	ed 91       	ld	r30, X+
    2888:	fc 91       	ld	r31, X
    288a:	19 97       	sbiw	r26, 0x09	; 9
    288c:	21 91       	ld	r18, Z+
    288e:	31 91       	ld	r19, Z+
    2890:	19 96       	adiw	r26, 0x09	; 9
    2892:	fc 93       	st	X, r31
    2894:	ee 93       	st	-X, r30
    2896:	18 97       	sbiw	r26, 0x08	; 8
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	1d 96       	adiw	r26, 0x0d	; 13
    289c:	9c 93       	st	X, r25
    289e:	8e 93       	st	-X, r24
    28a0:	1c 97       	sbiw	r26, 0x0c	; 12
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    28a2:	14 96       	adiw	r26, 0x04	; 4
    28a4:	8d 91       	ld	r24, X+
    28a6:	9c 91       	ld	r25, X
    28a8:	15 97       	sbiw	r26, 0x05	; 5
    28aa:	e8 17       	cp	r30, r24
    28ac:	f9 07       	cpc	r31, r25
    28ae:	41 f4       	brne	.+16     	; 0x28c0 <OSQAccept+0x6c>
            pq->OSQOut = pq->OSQStart;
    28b0:	12 96       	adiw	r26, 0x02	; 2
    28b2:	8d 91       	ld	r24, X+
    28b4:	9c 91       	ld	r25, X
    28b6:	13 97       	sbiw	r26, 0x03	; 3
    28b8:	19 96       	adiw	r26, 0x09	; 9
    28ba:	9c 93       	st	X, r25
    28bc:	8e 93       	st	-X, r24
    28be:	18 97       	sbiw	r26, 0x08	; 8
        }
        *err = OS_NO_ERR;
    28c0:	18 82       	st	Y, r1
    28c2:	04 c0       	rjmp	.+8      	; 0x28cc <OSQAccept+0x78>
    } else {
        *err = OS_Q_EMPTY;
    28c4:	8f e1       	ldi	r24, 0x1F	; 31
    28c6:	88 83       	st	Y, r24
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
        msg  = (void *)0;                        /* Queue is empty                                     */
    }
    OS_EXIT_CRITICAL();
    28cc:	0f 90       	pop	r0
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	0f 90       	pop	r0
    return (msg);                                /* Return message received (or NULL)                  */
}
    28d2:	c9 01       	movw	r24, r18
    28d4:	df 91       	pop	r29
    28d6:	cf 91       	pop	r28
    28d8:	08 95       	ret

000028da <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    28da:	9c 01       	movw	r18, r24
#endif
    OS_EVENT  *pevent;
    OS_Q      *pq;


    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    28dc:	80 91 b5 05 	lds	r24, 0x05B5
    28e0:	88 23       	and	r24, r24
    28e2:	09 f0       	breq	.+2      	; 0x28e6 <OSQCreate+0xc>
    28e4:	5f c0       	rjmp	.+190    	; 0x29a4 <OSQCreate+0xca>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    }
    OS_ENTER_CRITICAL();
    28e6:	0f 92       	push	r0
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	0f 92       	push	r0
    28ec:	f8 94       	cli
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    28ee:	a0 91 b2 05 	lds	r26, 0x05B2
    28f2:	b0 91 b3 05 	lds	r27, 0x05B3
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    28f6:	10 97       	sbiw	r26, 0x00	; 0
    28f8:	41 f0       	breq	.+16     	; 0x290a <OSQCreate+0x30>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    28fa:	14 96       	adiw	r26, 0x04	; 4
    28fc:	8d 91       	ld	r24, X+
    28fe:	9c 91       	ld	r25, X
    2900:	15 97       	sbiw	r26, 0x05	; 5
    2902:	90 93 b3 05 	sts	0x05B3, r25
    2906:	80 93 b2 05 	sts	0x05B2, r24
    }
    OS_EXIT_CRITICAL();
    290a:	0f 90       	pop	r0
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	0f 90       	pop	r0
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    2910:	10 97       	sbiw	r26, 0x00	; 0
    2912:	09 f4       	brne	.+2      	; 0x2916 <OSQCreate+0x3c>
    2914:	49 c0       	rjmp	.+146    	; 0x29a8 <OSQCreate+0xce>
        OS_ENTER_CRITICAL();
    2916:	0f 92       	push	r0
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	0f 92       	push	r0
    291c:	f8 94       	cli
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    291e:	e0 91 ad 05 	lds	r30, 0x05AD
    2922:	f0 91 ae 05 	lds	r31, 0x05AE
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    2926:	30 97       	sbiw	r30, 0x00	; 0
    2928:	71 f1       	breq	.+92     	; 0x2986 <OSQCreate+0xac>
            OSQFreeList         = OSQFreeList->OSQPtr;    /* Yes, Adjust free list pointer to next free*/
    292a:	80 81       	ld	r24, Z
    292c:	91 81       	ldd	r25, Z+1	; 0x01
    292e:	90 93 ae 05 	sts	0x05AE, r25
    2932:	80 93 ad 05 	sts	0x05AD, r24
            OS_EXIT_CRITICAL();
    2936:	0f 90       	pop	r0
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	0f 90       	pop	r0
            pq->OSQStart        = start;                  /*      Initialize the queue                 */
    293c:	33 83       	std	Z+3, r19	; 0x03
    293e:	22 83       	std	Z+2, r18	; 0x02
            pq->OSQEnd          = &start[size];
    2940:	cb 01       	movw	r24, r22
    2942:	88 0f       	add	r24, r24
    2944:	99 1f       	adc	r25, r25
    2946:	82 0f       	add	r24, r18
    2948:	93 1f       	adc	r25, r19
    294a:	95 83       	std	Z+5, r25	; 0x05
    294c:	84 83       	std	Z+4, r24	; 0x04
            pq->OSQIn           = start;
    294e:	37 83       	std	Z+7, r19	; 0x07
    2950:	26 83       	std	Z+6, r18	; 0x06
            pq->OSQOut          = start;
    2952:	31 87       	std	Z+9, r19	; 0x09
    2954:	20 87       	std	Z+8, r18	; 0x08
            pq->OSQSize         = size;
    2956:	73 87       	std	Z+11, r23	; 0x0b
    2958:	62 87       	std	Z+10, r22	; 0x0a
            pq->OSQEntries      = 0;
    295a:	15 86       	std	Z+13, r1	; 0x0d
    295c:	14 86       	std	Z+12, r1	; 0x0c
            pevent->OSEventType = OS_EVENT_TYPE_Q;
    295e:	82 e0       	ldi	r24, 0x02	; 2
    2960:	8c 93       	st	X, r24
            pevent->OSEventCnt  = 0;
    2962:	13 96       	adiw	r26, 0x03	; 3
    2964:	1c 92       	st	X, r1
    2966:	1e 92       	st	-X, r1
    2968:	12 97       	sbiw	r26, 0x02	; 2
            pevent->OSEventPtr  = pq;
    296a:	15 96       	adiw	r26, 0x05	; 5
    296c:	fc 93       	st	X, r31
    296e:	ee 93       	st	-X, r30
    2970:	14 97       	sbiw	r26, 0x04	; 4
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    INT8U  *ptbl;


    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
    2972:	11 96       	adiw	r26, 0x01	; 1
    2974:	1c 92       	st	X, r1
    2976:	11 97       	sbiw	r26, 0x01	; 1
    ptbl               = &pevent->OSEventTbl[0];

#if OS_EVENT_TBL_SIZE > 0
    *ptbl++            = 0x00;
    2978:	16 96       	adiw	r26, 0x06	; 6
    297a:	1c 92       	st	X, r1
    297c:	16 97       	sbiw	r26, 0x06	; 6
#endif

#if OS_EVENT_TBL_SIZE > 1
    *ptbl++            = 0x00;
    297e:	17 96       	adiw	r26, 0x07	; 7
    2980:	1c 92       	st	X, r1
    2982:	17 97       	sbiw	r26, 0x07	; 7
    2984:	11 c0       	rjmp	.+34     	; 0x29a8 <OSQCreate+0xce>
#if OS_EVENT_NAME_SIZE > 0
            (void)strcpy(pevent->OSEventName, "?");
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    2986:	80 91 b2 05 	lds	r24, 0x05B2
    298a:	90 91 b3 05 	lds	r25, 0x05B3
    298e:	15 96       	adiw	r26, 0x05	; 5
    2990:	9c 93       	st	X, r25
    2992:	8e 93       	st	-X, r24
    2994:	14 97       	sbiw	r26, 0x04	; 4
            OSEventFreeList    = pevent;
    2996:	b0 93 b3 05 	sts	0x05B3, r27
    299a:	a0 93 b2 05 	sts	0x05B2, r26
            OS_EXIT_CRITICAL();
    299e:	0f 90       	pop	r0
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	0f 90       	pop	r0
    29a4:	a0 e0       	ldi	r26, 0x00	; 0
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
            pevent = (OS_EVENT *)0;
        }
    }
    return (pevent);
}
    29a8:	cd 01       	movw	r24, r26
    29aa:	08 95       	ret

000029ac <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    29ac:	fc 01       	movw	r30, r24
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
        return (OS_ERR_EVENT_TYPE);
    }
#endif
    OS_ENTER_CRITICAL();
    29ae:	0f 92       	push	r0
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	0f 92       	push	r0
    29b4:	f8 94       	cli
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    29b6:	04 80       	ldd	r0, Z+4	; 0x04
    29b8:	f5 81       	ldd	r31, Z+5	; 0x05
    29ba:	e0 2d       	mov	r30, r0
    pq->OSQIn      = pq->OSQStart;
    29bc:	82 81       	ldd	r24, Z+2	; 0x02
    29be:	93 81       	ldd	r25, Z+3	; 0x03
    29c0:	97 83       	std	Z+7, r25	; 0x07
    29c2:	86 83       	std	Z+6, r24	; 0x06
    pq->OSQOut     = pq->OSQStart;
    29c4:	91 87       	std	Z+9, r25	; 0x09
    29c6:	80 87       	std	Z+8, r24	; 0x08
    pq->OSQEntries = 0;
    29c8:	15 86       	std	Z+13, r1	; 0x0d
    29ca:	14 86       	std	Z+12, r1	; 0x0c
    OS_EXIT_CRITICAL();
    29cc:	0f 90       	pop	r0
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	0f 90       	pop	r0
    return (OS_NO_ERR);
}
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	08 95       	ret

000029d6 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *pdata)
{
    29d6:	cf 93       	push	r28
    29d8:	df 93       	push	r29
    29da:	fc 01       	movw	r30, r24
    29dc:	db 01       	movw	r26, r22
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    29de:	80 81       	ld	r24, Z
    29e0:	82 30       	cpi	r24, 0x02	; 2
    29e2:	11 f0       	breq	.+4      	; 0x29e8 <OSQQuery+0x12>
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	31 c0       	rjmp	.+98     	; 0x2a4a <OSQQuery+0x74>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    29e8:	0f 92       	push	r0
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	0f 92       	push	r0
    29ee:	f8 94       	cli
    pdata->OSEventGrp = pevent->OSEventGrp;                /* Copy message queue wait list           */
    29f0:	81 81       	ldd	r24, Z+1	; 0x01
    29f2:	18 96       	adiw	r26, 0x08	; 8
    29f4:	8c 93       	st	X, r24
    29f6:	18 97       	sbiw	r26, 0x08	; 8
    psrc              = &pevent->OSEventTbl[0];
    pdest             = &pdata->OSEventTbl[0];
#if OS_EVENT_TBL_SIZE > 0
    *pdest++          = *psrc++;
    29f8:	86 81       	ldd	r24, Z+6	; 0x06
    29fa:	16 96       	adiw	r26, 0x06	; 6
    29fc:	8c 93       	st	X, r24
    29fe:	16 97       	sbiw	r26, 0x06	; 6
#endif

#if OS_EVENT_TBL_SIZE > 1
    *pdest++          = *psrc++;
    2a00:	87 81       	ldd	r24, Z+7	; 0x07
    2a02:	17 96       	adiw	r26, 0x07	; 7
    2a04:	8c 93       	st	X, r24
    2a06:	17 97       	sbiw	r26, 0x07	; 7
#endif

#if OS_EVENT_TBL_SIZE > 7
    *pdest            = *psrc;
#endif
    pq = (OS_Q *)pevent->OSEventPtr;
    2a08:	c4 81       	ldd	r28, Z+4	; 0x04
    2a0a:	d5 81       	ldd	r29, Z+5	; 0x05
    if (pq->OSQEntries > 0) {
    2a0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a0e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a10:	89 2b       	or	r24, r25
    2a12:	41 f0       	breq	.+16     	; 0x2a24 <OSQQuery+0x4e>
        pdata->OSMsg = *pq->OSQOut;                        /* Get next message to return if available  */
    2a14:	e8 85       	ldd	r30, Y+8	; 0x08
    2a16:	f9 85       	ldd	r31, Y+9	; 0x09
    2a18:	80 81       	ld	r24, Z
    2a1a:	91 81       	ldd	r25, Z+1	; 0x01
    2a1c:	11 96       	adiw	r26, 0x01	; 1
    2a1e:	9c 93       	st	X, r25
    2a20:	8e 93       	st	-X, r24
    2a22:	03 c0       	rjmp	.+6      	; 0x2a2a <OSQQuery+0x54>
    } else {
        pdata->OSMsg = (void *)0;
    2a24:	11 96       	adiw	r26, 0x01	; 1
    2a26:	1c 92       	st	X, r1
    2a28:	1e 92       	st	-X, r1
    }
    pdata->OSNMsgs = pq->OSQEntries;
    2a2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a2c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a2e:	13 96       	adiw	r26, 0x03	; 3
    2a30:	9c 93       	st	X, r25
    2a32:	8e 93       	st	-X, r24
    2a34:	12 97       	sbiw	r26, 0x02	; 2
    pdata->OSQSize = pq->OSQSize;
    2a36:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a38:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a3a:	15 96       	adiw	r26, 0x05	; 5
    2a3c:	9c 93       	st	X, r25
    2a3e:	8e 93       	st	-X, r24
    2a40:	14 97       	sbiw	r26, 0x04	; 4
    OS_EXIT_CRITICAL();
    2a42:	0f 90       	pop	r0
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	0f 90       	pop	r0
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    return (OS_NO_ERR);
}
    2a4a:	df 91       	pop	r29
    2a4c:	cf 91       	pop	r28
    2a4e:	08 95       	ret

00002a50 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    2a50:	fc 01       	movw	r30, r24
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    2a52:	80 81       	ld	r24, Z
    2a54:	83 30       	cpi	r24, 0x03	; 3
    2a56:	19 f0       	breq	.+6      	; 0x2a5e <OSSemAccept+0xe>
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	12 c0       	rjmp	.+36     	; 0x2a82 <OSSemAccept+0x32>
        return (0);
    }
    OS_ENTER_CRITICAL();
    2a5e:	0f 92       	push	r0
    2a60:	0f b6       	in	r0, 0x3f	; 63
    2a62:	0f 92       	push	r0
    2a64:	f8 94       	cli
    cnt = pevent->OSEventCnt;
    2a66:	22 81       	ldd	r18, Z+2	; 0x02
    2a68:	33 81       	ldd	r19, Z+3	; 0x03
    if (cnt > 0) {                                    /* See if resource is available                  */
    2a6a:	21 15       	cp	r18, r1
    2a6c:	31 05       	cpc	r19, r1
    2a6e:	31 f0       	breq	.+12     	; 0x2a7c <OSSemAccept+0x2c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    2a70:	21 50       	subi	r18, 0x01	; 1
    2a72:	30 40       	sbci	r19, 0x00	; 0
    2a74:	33 83       	std	Z+3, r19	; 0x03
    2a76:	22 83       	std	Z+2, r18	; 0x02
    2a78:	2f 5f       	subi	r18, 0xFF	; 255
    2a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    }
    OS_EXIT_CRITICAL();
    2a7c:	0f 90       	pop	r0
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	0f 90       	pop	r0
    return (cnt);                                     /* Return semaphore count                        */
}
    2a82:	c9 01       	movw	r24, r18
    2a84:	08 95       	ret

00002a86 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    2a86:	9c 01       	movw	r18, r24
    OS_CPU_SR  cpu_sr;
#endif    
    OS_EVENT  *pevent;


    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    2a88:	80 91 b5 05 	lds	r24, 0x05B5
    2a8c:	88 23       	and	r24, r24
    2a8e:	19 f0       	breq	.+6      	; 0x2a96 <OSSemCreate+0x10>
    2a90:	e0 e0       	ldi	r30, 0x00	; 0
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	1e c0       	rjmp	.+60     	; 0x2ad2 <OSSemCreate+0x4c>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    }
    OS_ENTER_CRITICAL();
    2a96:	0f 92       	push	r0
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	0f 92       	push	r0
    2a9c:	f8 94       	cli
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    2a9e:	e0 91 b2 05 	lds	r30, 0x05B2
    2aa2:	f0 91 b3 05 	lds	r31, 0x05B3
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    2aa6:	30 97       	sbiw	r30, 0x00	; 0
    2aa8:	31 f0       	breq	.+12     	; 0x2ab6 <OSSemCreate+0x30>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    2aaa:	84 81       	ldd	r24, Z+4	; 0x04
    2aac:	95 81       	ldd	r25, Z+5	; 0x05
    2aae:	90 93 b3 05 	sts	0x05B3, r25
    2ab2:	80 93 b2 05 	sts	0x05B2, r24
    }
    OS_EXIT_CRITICAL();
    2ab6:	0f 90       	pop	r0
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	0f 90       	pop	r0
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    2abc:	30 97       	sbiw	r30, 0x00	; 0
    2abe:	49 f0       	breq	.+18     	; 0x2ad2 <OSSemCreate+0x4c>
        pevent->OSEventType = OS_EVENT_TYPE_SEM;
    2ac0:	83 e0       	ldi	r24, 0x03	; 3
    2ac2:	80 83       	st	Z, r24
        pevent->OSEventCnt  = cnt;                         /* Set semaphore value                      */
    2ac4:	33 83       	std	Z+3, r19	; 0x03
    2ac6:	22 83       	std	Z+2, r18	; 0x02
        pevent->OSEventPtr  = (void *)0;                   /* Unlink from ECB free list                */
    2ac8:	15 82       	std	Z+5, r1	; 0x05
    2aca:	14 82       	std	Z+4, r1	; 0x04
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    INT8U  *ptbl;


    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
    2acc:	11 82       	std	Z+1, r1	; 0x01
    ptbl               = &pevent->OSEventTbl[0];

#if OS_EVENT_TBL_SIZE > 0
    *ptbl++            = 0x00;
    2ace:	16 82       	std	Z+6, r1	; 0x06
#endif

#if OS_EVENT_TBL_SIZE > 1
    *ptbl++            = 0x00;
    2ad0:	17 82       	std	Z+7, r1	; 0x07
        (void)strcpy(pevent->OSEventName, "?");
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    }
    return (pevent);
}
    2ad2:	cf 01       	movw	r24, r30
    2ad4:	08 95       	ret

00002ad6 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *pdata)
{
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	db 01       	movw	r26, r22
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    2ada:	80 81       	ld	r24, Z
    2adc:	83 30       	cpi	r24, 0x03	; 3
    2ade:	11 f0       	breq	.+4      	; 0x2ae4 <OSSemQuery+0xe>
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	08 95       	ret
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    2ae4:	0f 92       	push	r0
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	0f 92       	push	r0
    2aea:	f8 94       	cli
    pdata->OSEventGrp = pevent->OSEventGrp;                /* Copy message mailbox wait list           */
    2aec:	81 81       	ldd	r24, Z+1	; 0x01
    2aee:	14 96       	adiw	r26, 0x04	; 4
    2af0:	8c 93       	st	X, r24
    2af2:	14 97       	sbiw	r26, 0x04	; 4
    psrc              = &pevent->OSEventTbl[0];
    pdest             = &pdata->OSEventTbl[0];
#if OS_EVENT_TBL_SIZE > 0
    *pdest++          = *psrc++;
    2af4:	86 81       	ldd	r24, Z+6	; 0x06
    2af6:	12 96       	adiw	r26, 0x02	; 2
    2af8:	8c 93       	st	X, r24
    2afa:	12 97       	sbiw	r26, 0x02	; 2
#endif

#if OS_EVENT_TBL_SIZE > 1
    *pdest++          = *psrc++;
    2afc:	87 81       	ldd	r24, Z+7	; 0x07
    2afe:	13 96       	adiw	r26, 0x03	; 3
    2b00:	8c 93       	st	X, r24
    2b02:	13 97       	sbiw	r26, 0x03	; 3
#endif

#if OS_EVENT_TBL_SIZE > 7
    *pdest            = *psrc;
#endif
    pdata->OSCnt      = pevent->OSEventCnt;                /* Get semaphore count                      */
    2b04:	82 81       	ldd	r24, Z+2	; 0x02
    2b06:	93 81       	ldd	r25, Z+3	; 0x03
    2b08:	8d 93       	st	X+, r24
    2b0a:	9c 93       	st	X, r25
    OS_EXIT_CRITICAL();
    2b0c:	0f 90       	pop	r0
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	0f 90       	pop	r0
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    return (OS_NO_ERR);
}
    2b14:	08 95       	ret

00002b16 <OSTaskQuery>:
        if (prio != OS_PRIO_SELF) {   
            return (OS_PRIO_INVALID);
        }
    }
#endif
    OS_ENTER_CRITICAL();
    2b16:	0f 92       	push	r0
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	0f 92       	push	r0
    2b1c:	f8 94       	cli
    if (prio == OS_PRIO_SELF) {                            /* See if suspend SELF                      */
    2b1e:	8f 3f       	cpi	r24, 0xFF	; 255
    2b20:	29 f4       	brne	.+10     	; 0x2b2c <OSTaskQuery+0x16>
        prio = OSTCBCur->OSTCBPrio;
    2b22:	e0 91 b6 05 	lds	r30, 0x05B6
    2b26:	f0 91 b7 05 	lds	r31, 0x05B7
    2b2a:	86 85       	ldd	r24, Z+14	; 0x0e
    }
    ptcb = OSTCBPrioTbl[prio];
    2b2c:	e8 2f       	mov	r30, r24
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	ee 0f       	add	r30, r30
    2b32:	ff 1f       	adc	r31, r31
    2b34:	e4 58       	subi	r30, 0x84	; 132
    2b36:	f8 4f       	sbci	r31, 0xF8	; 248
    2b38:	01 90       	ld	r0, Z+
    2b3a:	f0 81       	ld	r31, Z
    2b3c:	e0 2d       	mov	r30, r0
    if (ptcb == (OS_TCB *)0) {                             /* Task to query must exist                 */
    2b3e:	30 97       	sbiw	r30, 0x00	; 0
    2b40:	29 f4       	brne	.+10     	; 0x2b4c <OSTaskQuery+0x36>
        OS_EXIT_CRITICAL();
    2b42:	0f 90       	pop	r0
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	0f 90       	pop	r0
    2b48:	89 e2       	ldi	r24, 0x29	; 41
    2b4a:	08 95       	ret
        return (OS_PRIO_ERR);
    }
    memcpy(pdata, ptcb, sizeof(OS_TCB));                   /* Copy TCB into user storage area          */
    2b4c:	db 01       	movw	r26, r22
    2b4e:	83 e1       	ldi	r24, 0x13	; 19
    2b50:	01 90       	ld	r0, Z+
    2b52:	0d 92       	st	X+, r0
    2b54:	81 50       	subi	r24, 0x01	; 1
    2b56:	e1 f7       	brne	.-8      	; 0x2b50 <OSTaskQuery+0x3a>
    OS_EXIT_CRITICAL();
    2b58:	0f 90       	pop	r0
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	0f 90       	pop	r0
    return (OS_NO_ERR);
}
    2b5e:	08 95       	ret

00002b60 <OS_QInit>:
    INT16U  i;
    OS_Q   *pq1;
    OS_Q   *pq2;


    (void)memset(&OSQTbl[0], 0, sizeof(OSQTbl)); /* Clear the queue table                              */
    2b60:	ef e8       	ldi	r30, 0x8F	; 143
    2b62:	f5 e0       	ldi	r31, 0x05	; 5
    2b64:	8c e1       	ldi	r24, 0x1C	; 28
    2b66:	df 01       	movw	r26, r30
    2b68:	1d 92       	st	X+, r1
    2b6a:	8a 95       	dec	r24
    2b6c:	e9 f7       	brne	.-6      	; 0x2b68 <OS_QInit+0x8>
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {      /* Init. list of free QUEUE control blocks            */
        pq1->OSQPtr = pq2;
    2b6e:	3e 96       	adiw	r30, 0x0e	; 14
    2b70:	f0 93 90 05 	sts	0x0590, r31
    2b74:	e0 93 8f 05 	sts	0x058F, r30
    2b78:	3e 97       	sbiw	r30, 0x0e	; 14
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    2b7a:	10 92 9e 05 	sts	0x059E, r1
    2b7e:	10 92 9d 05 	sts	0x059D, r1
    OSQFreeList = &OSQTbl[0];
    2b82:	f0 93 ae 05 	sts	0x05AE, r31
    2b86:	e0 93 ad 05 	sts	0x05AD, r30
#endif
}
    2b8a:	08 95       	ret

00002b8c <OS_FlagInit>:
    INT8U        i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    (void)memset(&OSFlagTbl[0], 0, sizeof(OSFlagTbl));              /* Clear the flag group table      */
    2b8c:	e1 e7       	ldi	r30, 0x71	; 113
    2b8e:	f5 e0       	ldi	r31, 0x05	; 5
    2b90:	84 e1       	ldi	r24, 0x14	; 20
    2b92:	df 01       	movw	r26, r30
    2b94:	1d 92       	st	X+, r1
    2b96:	8a 95       	dec	r24
    2b98:	e9 f7       	brne	.-6      	; 0x2b94 <OS_FlagInit+0x8>
    2b9a:	cf 01       	movw	r24, r30
    2b9c:	04 96       	adiw	r24, 0x04	; 4
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    2b9e:	10 82       	st	Z, r1
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    2ba0:	92 83       	std	Z+2, r25	; 0x02
    2ba2:	81 83       	std	Z+1, r24	; 0x01
    2ba4:	fc 01       	movw	r30, r24


    (void)memset(&OSFlagTbl[0], 0, sizeof(OSFlagTbl));              /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    2ba6:	b5 e0       	ldi	r27, 0x05	; 5
    2ba8:	81 38       	cpi	r24, 0x81	; 129
    2baa:	9b 07       	cpc	r25, r27
    2bac:	b1 f7       	brne	.-20     	; 0x2b9a <OS_FlagInit+0xe>
        (void)strcpy(pgrp1->OSFlagName, "?");                       /* Unknown name                    */
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    2bae:	10 82       	st	Z, r1
    pgrp1->OSFlagWaitList = (void *)0;
    2bb0:	12 82       	std	Z+2, r1	; 0x02
    2bb2:	11 82       	std	Z+1, r1	; 0x01
#if OS_FLAG_NAME_SIZE > 0
    (void)strcpy(pgrp1->OSFlagName, "?");
#endif
    OSFlagFreeList        = (OS_FLAG_GRP *)&OSFlagTbl[0];
    2bb4:	70 97       	sbiw	r30, 0x10	; 16
    2bb6:	f0 93 7b 07 	sts	0x077B, r31
    2bba:	e0 93 7a 07 	sts	0x077A, r30
#endif
}
    2bbe:	08 95       	ret

00002bc0 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    2bc0:	1f 93       	push	r17
    2bc2:	cf 93       	push	r28
    2bc4:	df 93       	push	r29
    2bc6:	18 2f       	mov	r17, r24
    OS_CPU_SR  cpu_sr;
#endif    
    OS_TCB    *ptcb;


    OS_ENTER_CRITICAL();
    2bc8:	0f 92       	push	r0
    2bca:	0f b6       	in	r0, 0x3f	; 63
    2bcc:	0f 92       	push	r0
    2bce:	f8 94       	cli
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    2bd0:	c0 91 8c 05 	lds	r28, 0x058C
    2bd4:	d0 91 8d 05 	lds	r29, 0x058D
    if (ptcb != (OS_TCB *)0) {
    2bd8:	20 97       	sbiw	r28, 0x00	; 0
    2bda:	09 f4       	brne	.+2      	; 0x2bde <OS_TCBInit+0x1e>
    2bdc:	5a c0       	rjmp	.+180    	; 0x2c92 <OS_TCBInit+0xd2>
        OSTCBFreeList        = ptcb->OSTCBNext;            /* Update pointer to free TCB list          */
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	9b 81       	ldd	r25, Y+3	; 0x03
    2be2:	90 93 8d 05 	sts	0x058D, r25
    2be6:	80 93 8c 05 	sts	0x058C, r24
        OS_EXIT_CRITICAL();
    2bea:	0f 90       	pop	r0
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	0f 90       	pop	r0
        ptcb->OSTCBStkPtr    = ptos;                       /* Load Stack pointer in TCB                */
    2bf0:	79 83       	std	Y+1, r23	; 0x01
    2bf2:	68 83       	st	Y, r22
        ptcb->OSTCBPrio      = (INT8U)prio;                /* Load task priority into TCB              */
    2bf4:	1e 87       	std	Y+14, r17	; 0x0e
        ptcb->OSTCBStat      = OS_STAT_RDY;                /* Task is ready to run                     */
    2bf6:	1d 86       	std	Y+13, r1	; 0x0d
        ptcb->OSTCBDly       = 0;                          /* Task is not delayed                      */
    2bf8:	1c 86       	std	Y+12, r1	; 0x0c
    2bfa:	1b 86       	std	Y+11, r1	; 0x0b

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq    = OS_NO_ERR;
#endif

        ptcb->OSTCBY         = prio >> 3;                  /* Pre-compute X, Y, BitX and BitY          */
    2bfc:	e1 2f       	mov	r30, r17
    2bfe:	e6 95       	lsr	r30
    2c00:	e6 95       	lsr	r30
    2c02:	e6 95       	lsr	r30
    2c04:	e8 8b       	std	Y+16, r30	; 0x10
        ptcb->OSTCBBitY      = OSMapTbl[ptcb->OSTCBY];
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	e0 5a       	subi	r30, 0xA0	; 160
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	80 81       	ld	r24, Z
    2c0e:	8a 8b       	std	Y+18, r24	; 0x12
        ptcb->OSTCBX         = prio & 0x07;
    2c10:	e1 2f       	mov	r30, r17
    2c12:	e7 70       	andi	r30, 0x07	; 7
    2c14:	ef 87       	std	Y+15, r30	; 0x0f
        ptcb->OSTCBBitX      = OSMapTbl[ptcb->OSTCBX];
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	e0 5a       	subi	r30, 0xA0	; 160
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	80 81       	ld	r24, Z
    2c1e:	89 8b       	std	Y+17, r24	; 0x11

#if OS_EVENT_EN > 0
        ptcb->OSTCBEventPtr  = (OS_EVENT *)0;              /* Task is not pending on an event          */
    2c20:	1f 82       	std	Y+7, r1	; 0x07
    2c22:	1e 82       	std	Y+6, r1	; 0x06
#if (OS_VERSION >= 251) && (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    2c24:	19 86       	std	Y+9, r1	; 0x09
    2c26:	18 86       	std	Y+8, r1	; 0x08
#if OS_TASK_NAME_SIZE > 0
        (void)strcpy(ptcb->OSTCBTaskName, "?");            /* Unknown name at task creation            */
#endif

#if OS_VERSION >= 204
        OSTCBInitHook(ptcb);
    2c28:	ce 01       	movw	r24, r28
    2c2a:	0e 94 cc 10 	call	0x2198	; 0x2198 <OSTCBInitHook>
#endif

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    2c2e:	ce 01       	movw	r24, r28
    2c30:	0e 94 c7 10 	call	0x218e	; 0x218e <OSTaskCreateHook>
        
        OS_ENTER_CRITICAL();
    2c34:	0f 92       	push	r0
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	0f 92       	push	r0
    2c3a:	f8 94       	cli
        OSTCBPrioTbl[prio] = ptcb;
    2c3c:	e1 2f       	mov	r30, r17
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	ee 0f       	add	r30, r30
    2c42:	ff 1f       	adc	r31, r31
    2c44:	e4 58       	subi	r30, 0x84	; 132
    2c46:	f8 4f       	sbci	r31, 0xF8	; 248
    2c48:	d1 83       	std	Z+1, r29	; 0x01
    2c4a:	c0 83       	st	Z, r28
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    2c4c:	e0 91 86 05 	lds	r30, 0x0586
    2c50:	f0 91 87 05 	lds	r31, 0x0587
    2c54:	fb 83       	std	Y+3, r31	; 0x03
    2c56:	ea 83       	std	Y+2, r30	; 0x02
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    2c58:	1d 82       	std	Y+5, r1	; 0x05
    2c5a:	1c 82       	std	Y+4, r1	; 0x04
        if (OSTCBList != (OS_TCB *)0) {
    2c5c:	30 97       	sbiw	r30, 0x00	; 0
    2c5e:	11 f0       	breq	.+4      	; 0x2c64 <OS_TCBInit+0xa4>
            OSTCBList->OSTCBPrev = ptcb;
    2c60:	d5 83       	std	Z+5, r29	; 0x05
    2c62:	c4 83       	std	Z+4, r28	; 0x04
        }
        OSTCBList               = ptcb;
    2c64:	d0 93 87 05 	sts	0x0587, r29
    2c68:	c0 93 86 05 	sts	0x0586, r28
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    2c6c:	80 91 af 05 	lds	r24, 0x05AF
    2c70:	9a 89       	ldd	r25, Y+18	; 0x12
    2c72:	89 2b       	or	r24, r25
    2c74:	80 93 af 05 	sts	0x05AF, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    2c78:	e8 89       	ldd	r30, Y+16	; 0x10
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	e0 55       	subi	r30, 0x50	; 80
    2c7e:	fa 4f       	sbci	r31, 0xFA	; 250
    2c80:	80 81       	ld	r24, Z
    2c82:	99 89       	ldd	r25, Y+17	; 0x11
    2c84:	89 2b       	or	r24, r25
    2c86:	80 83       	st	Z, r24
        OS_EXIT_CRITICAL();
    2c88:	0f 90       	pop	r0
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	0f 90       	pop	r0
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	04 c0       	rjmp	.+8      	; 0x2c9a <OS_TCBInit+0xda>
        return (OS_NO_ERR);
    }
    OS_EXIT_CRITICAL();
    2c92:	0f 90       	pop	r0
    2c94:	0f be       	out	0x3f, r0	; 63
    2c96:	0f 90       	pop	r0
    2c98:	86 e4       	ldi	r24, 0x46	; 70
    return (OS_NO_MORE_TCB);
}
    2c9a:	df 91       	pop	r29
    2c9c:	cf 91       	pop	r28
    2c9e:	1f 91       	pop	r17
    2ca0:	08 95       	ret

00002ca2 <OS_TaskIdle>:
#endif    
    
    
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    2ca2:	0f 92       	push	r0
    2ca4:	0f b6       	in	r0, 0x3f	; 63
    2ca6:	0f 92       	push	r0
    2ca8:	f8 94       	cli
        OSIdleCtr++;
    2caa:	80 91 6c 05 	lds	r24, 0x056C
    2cae:	90 91 6d 05 	lds	r25, 0x056D
    2cb2:	a0 91 6e 05 	lds	r26, 0x056E
    2cb6:	b0 91 6f 05 	lds	r27, 0x056F
    2cba:	01 96       	adiw	r24, 0x01	; 1
    2cbc:	a1 1d       	adc	r26, r1
    2cbe:	b1 1d       	adc	r27, r1
    2cc0:	80 93 6c 05 	sts	0x056C, r24
    2cc4:	90 93 6d 05 	sts	0x056D, r25
    2cc8:	a0 93 6e 05 	sts	0x056E, r26
    2ccc:	b0 93 6f 05 	sts	0x056F, r27
        OS_EXIT_CRITICAL();
    2cd0:	0f 90       	pop	r0
    2cd2:	0f be       	out	0x3f, r0	; 63
    2cd4:	0f 90       	pop	r0
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    2cd6:	0e 94 c9 10 	call	0x2192	; 0x2192 <OSTaskIdleHook>
    2cda:	e3 cf       	rjmp	.-58     	; 0x2ca2 <OS_TaskIdle>

00002cdc <OS_Sched>:
    OS_CPU_SR  cpu_sr;
#endif    
    INT8U      y;


    OS_ENTER_CRITICAL();
    2cdc:	0f 92       	push	r0
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	0f 92       	push	r0
    2ce2:	f8 94       	cli
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    2ce4:	80 91 b5 05 	lds	r24, 0x05B5
    2ce8:	88 23       	and	r24, r24
    2cea:	09 f0       	breq	.+2      	; 0x2cee <OS_Sched+0x12>
    2cec:	3f c0       	rjmp	.+126    	; 0x2d6c <OS_Sched+0x90>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    2cee:	80 91 6a 05 	lds	r24, 0x056A
    2cf2:	88 23       	and	r24, r24
    2cf4:	d9 f5       	brne	.+118    	; 0x2d6c <OS_Sched+0x90>
            y             = OSUnMapTbl[OSRdyGrp];      /* Get pointer to HPT ready to run              */
    2cf6:	e0 91 af 05 	lds	r30, 0x05AF
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	e8 59       	subi	r30, 0x98	; 152
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	80 81       	ld	r24, Z
            OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    2d02:	e8 2f       	mov	r30, r24
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	e0 55       	subi	r30, 0x50	; 80
    2d08:	fa 4f       	sbci	r31, 0xFA	; 250
    2d0a:	e0 81       	ld	r30, Z
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	e8 59       	subi	r30, 0x98	; 152
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	98 2f       	mov	r25, r24
    2d14:	99 0f       	add	r25, r25
    2d16:	99 0f       	add	r25, r25
    2d18:	99 0f       	add	r25, r25
    2d1a:	80 81       	ld	r24, Z
    2d1c:	98 0f       	add	r25, r24
    2d1e:	90 93 70 05 	sts	0x0570, r25
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    2d22:	80 91 85 05 	lds	r24, 0x0585
    2d26:	98 17       	cp	r25, r24
    2d28:	09 f1       	breq	.+66     	; 0x2d6c <OS_Sched+0x90>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    2d2a:	e9 2f       	mov	r30, r25
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	ee 0f       	add	r30, r30
    2d30:	ff 1f       	adc	r31, r31
    2d32:	e4 58       	subi	r30, 0x84	; 132
    2d34:	f8 4f       	sbci	r31, 0xF8	; 248
    2d36:	80 81       	ld	r24, Z
    2d38:	91 81       	ldd	r25, Z+1	; 0x01
    2d3a:	90 93 ac 05 	sts	0x05AC, r25
    2d3e:	80 93 ab 05 	sts	0x05AB, r24
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    2d42:	80 91 88 05 	lds	r24, 0x0588
    2d46:	90 91 89 05 	lds	r25, 0x0589
    2d4a:	a0 91 8a 05 	lds	r26, 0x058A
    2d4e:	b0 91 8b 05 	lds	r27, 0x058B
    2d52:	01 96       	adiw	r24, 0x01	; 1
    2d54:	a1 1d       	adc	r26, r1
    2d56:	b1 1d       	adc	r27, r1
    2d58:	80 93 88 05 	sts	0x0588, r24
    2d5c:	90 93 89 05 	sts	0x0589, r25
    2d60:	a0 93 8a 05 	sts	0x058A, r26
    2d64:	b0 93 8b 05 	sts	0x058B, r27
                OS_TASK_SW();                          /* Perform a context switch                     */
    2d68:	0e 94 1d 10 	call	0x203a	; 0x203a <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
    2d6c:	0f 90       	pop	r0
    2d6e:	0f be       	out	0x3f, r0	; 63
    2d70:	0f 90       	pop	r0
}
    2d72:	08 95       	ret

00002d74 <OSTimeDlyResume>:
    OS_CPU_SR  cpu_sr;
#endif    
    OS_TCB    *ptcb;


    if (prio >= OS_LOWEST_PRIO) {
    2d74:	8f 30       	cpi	r24, 0x0F	; 15
    2d76:	10 f0       	brcs	.+4      	; 0x2d7c <OSTimeDlyResume+0x8>
    2d78:	8a e2       	ldi	r24, 0x2A	; 42
    2d7a:	08 95       	ret
        return (OS_PRIO_INVALID);
    }
    OS_ENTER_CRITICAL();
    2d7c:	0f 92       	push	r0
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	0f 92       	push	r0
    2d82:	f8 94       	cli
    ptcb = (OS_TCB *)OSTCBPrioTbl[prio];                   /* Make sure that task exist                */
    2d84:	e8 2f       	mov	r30, r24
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	ee 0f       	add	r30, r30
    2d8a:	ff 1f       	adc	r31, r31
    2d8c:	e4 58       	subi	r30, 0x84	; 132
    2d8e:	f8 4f       	sbci	r31, 0xF8	; 248
    2d90:	a0 81       	ld	r26, Z
    2d92:	b1 81       	ldd	r27, Z+1	; 0x01
    if (ptcb != (OS_TCB *)0) {
    2d94:	10 97       	sbiw	r26, 0x00	; 0
    2d96:	91 f1       	breq	.+100    	; 0x2dfc <OSTimeDlyResume+0x88>
        if (ptcb->OSTCBDly != 0) {                         /* See if task is delayed                   */
    2d98:	1b 96       	adiw	r26, 0x0b	; 11
    2d9a:	8d 91       	ld	r24, X+
    2d9c:	9c 91       	ld	r25, X
    2d9e:	1c 97       	sbiw	r26, 0x0c	; 12
    2da0:	89 2b       	or	r24, r25
    2da2:	39 f1       	breq	.+78     	; 0x2df2 <OSTimeDlyResume+0x7e>
            ptcb->OSTCBDly  = 0;                           /* Clear the time delay                     */
    2da4:	1c 96       	adiw	r26, 0x0c	; 12
    2da6:	1c 92       	st	X, r1
    2da8:	1e 92       	st	-X, r1
    2daa:	1b 97       	sbiw	r26, 0x0b	; 11
            if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* See if task is ready to run  */
    2dac:	1d 96       	adiw	r26, 0x0d	; 13
    2dae:	8c 91       	ld	r24, X
    2db0:	1d 97       	sbiw	r26, 0x0d	; 13
    2db2:	83 fd       	sbrc	r24, 3
    2db4:	19 c0       	rjmp	.+50     	; 0x2de8 <OSTimeDlyResume+0x74>
                OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready to run       */
    2db6:	80 91 af 05 	lds	r24, 0x05AF
    2dba:	52 96       	adiw	r26, 0x12	; 18
    2dbc:	9c 91       	ld	r25, X
    2dbe:	52 97       	sbiw	r26, 0x12	; 18
    2dc0:	89 2b       	or	r24, r25
    2dc2:	80 93 af 05 	sts	0x05AF, r24
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    2dc6:	50 96       	adiw	r26, 0x10	; 16
    2dc8:	ec 91       	ld	r30, X
    2dca:	50 97       	sbiw	r26, 0x10	; 16
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	e0 55       	subi	r30, 0x50	; 80
    2dd0:	fa 4f       	sbci	r31, 0xFA	; 250
    2dd2:	80 81       	ld	r24, Z
    2dd4:	51 96       	adiw	r26, 0x11	; 17
    2dd6:	9c 91       	ld	r25, X
    2dd8:	89 2b       	or	r24, r25
    2dda:	80 83       	st	Z, r24
                OS_EXIT_CRITICAL();
    2ddc:	0f 90       	pop	r0
    2dde:	0f be       	out	0x3f, r0	; 63
    2de0:	0f 90       	pop	r0
                OS_Sched();                                /* See if this is new highest priority      */
    2de2:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <OS_Sched>
    2de6:	03 c0       	rjmp	.+6      	; 0x2dee <OSTimeDlyResume+0x7a>
            } else {
                OS_EXIT_CRITICAL();                        /* Task may be suspended                    */
    2de8:	0f 90       	pop	r0
    2dea:	0f be       	out	0x3f, r0	; 63
    2dec:	0f 90       	pop	r0
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	08 95       	ret
            }
            return (OS_NO_ERR);
        } else {
            OS_EXIT_CRITICAL();
    2df2:	0f 90       	pop	r0
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	0f 90       	pop	r0
    2df8:	80 e5       	ldi	r24, 0x50	; 80
    2dfa:	08 95       	ret
            return (OS_TIME_NOT_DLY);                      /* Indicate that task was not delayed       */
        }
    }
    OS_EXIT_CRITICAL();
    2dfc:	0f 90       	pop	r0
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	0f 90       	pop	r0
    2e02:	8b e0       	ldi	r24, 0x0B	; 11
    return (OS_TASK_NOT_EXIST);                            /* The task does not exist                  */
}
    2e04:	08 95       	ret

00002e06 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    2e06:	9c 01       	movw	r18, r24
    OS_CPU_SR  cpu_sr;
#endif    
    INT8U      y;


    if (ticks > 0) {                             /* 0 means no delay!                                  */
    2e08:	00 97       	sbiw	r24, 0x00	; 0
    2e0a:	49 f1       	breq	.+82     	; 0x2e5e <OSTimeDly+0x58>
        OS_ENTER_CRITICAL();
    2e0c:	0f 92       	push	r0
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	0f 92       	push	r0
    2e12:	f8 94       	cli
		y            =  OSTCBCur->OSTCBY;	     /* Delay current task                                 */
    2e14:	a0 91 b6 05 	lds	r26, 0x05B6
    2e18:	b0 91 b7 05 	lds	r27, 0x05B7
		OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    2e1c:	50 96       	adiw	r26, 0x10	; 16
    2e1e:	ec 91       	ld	r30, X
    2e20:	50 97       	sbiw	r26, 0x10	; 16
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	e0 55       	subi	r30, 0x50	; 80
    2e26:	fa 4f       	sbci	r31, 0xFA	; 250
    2e28:	51 96       	adiw	r26, 0x11	; 17
    2e2a:	8c 91       	ld	r24, X
    2e2c:	51 97       	sbiw	r26, 0x11	; 17
    2e2e:	80 95       	com	r24
    2e30:	90 81       	ld	r25, Z
    2e32:	89 23       	and	r24, r25
    2e34:	80 83       	st	Z, r24
        if (OSRdyTbl[y] == 0) {  
    2e36:	88 23       	and	r24, r24
    2e38:	49 f4       	brne	.+18     	; 0x2e4c <OSTimeDly+0x46>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    2e3a:	52 96       	adiw	r26, 0x12	; 18
    2e3c:	9c 91       	ld	r25, X
    2e3e:	52 97       	sbiw	r26, 0x12	; 18
    2e40:	90 95       	com	r25
    2e42:	80 91 af 05 	lds	r24, 0x05AF
    2e46:	89 23       	and	r24, r25
    2e48:	80 93 af 05 	sts	0x05AF, r24
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    2e4c:	1c 96       	adiw	r26, 0x0c	; 12
    2e4e:	3c 93       	st	X, r19
    2e50:	2e 93       	st	-X, r18
    2e52:	1b 97       	sbiw	r26, 0x0b	; 11
        OS_EXIT_CRITICAL();
    2e54:	0f 90       	pop	r0
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	0f 90       	pop	r0
        OS_Sched();                              /* Find next task to run!                             */
    2e5a:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <OS_Sched>
    2e5e:	08 95       	ret

00002e60 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *pd), void *pdata, OS_STK *ptos, INT8U prio)
{
    2e60:	af 92       	push	r10
    2e62:	bf 92       	push	r11
    2e64:	cf 92       	push	r12
    2e66:	df 92       	push	r13
    2e68:	ef 92       	push	r14
    2e6a:	ff 92       	push	r15
    2e6c:	0f 93       	push	r16
    2e6e:	1f 93       	push	r17
    2e70:	cf 93       	push	r28
    2e72:	df 93       	push	r29
    2e74:	dc 01       	movw	r26, r24
    2e76:	12 2f       	mov	r17, r18
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    2e78:	0f 92       	push	r0
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	0f 92       	push	r0
    2e7e:	f8 94       	cli
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    2e80:	c2 2f       	mov	r28, r18
    2e82:	d0 e0       	ldi	r29, 0x00	; 0
    2e84:	fe 01       	movw	r30, r28
    2e86:	ee 0f       	add	r30, r30
    2e88:	ff 1f       	adc	r31, r31
    2e8a:	e4 58       	subi	r30, 0x84	; 132
    2e8c:	f8 4f       	sbci	r31, 0xF8	; 248
    2e8e:	80 81       	ld	r24, Z
    2e90:	91 81       	ldd	r25, Z+1	; 0x01
    2e92:	89 2b       	or	r24, r25
    2e94:	09 f0       	breq	.+2      	; 0x2e98 <OSTaskCreate+0x38>
    2e96:	3f c0       	rjmp	.+126    	; 0x2f16 <OSTaskCreate+0xb6>
        OSTCBPrioTbl[prio] = (OS_TCB *)1;    /* Reserve the priority to prevent others from doing ...  */
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	91 83       	std	Z+1, r25	; 0x01
    2e9e:	80 83       	st	Z, r24
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
    2ea0:	0f 90       	pop	r0
    2ea2:	0f be       	out	0x3f, r0	; 63
    2ea4:	0f 90       	pop	r0
        psp = (OS_STK *)OSTaskStkInit(task, pdata, ptos, 0);    /* Initialize the task's stack         */
    2ea6:	cd 01       	movw	r24, r26
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <OSTaskStkInit>
    2eb0:	bc 01       	movw	r22, r24
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    2eb2:	81 2f       	mov	r24, r17
    2eb4:	40 e0       	ldi	r20, 0x00	; 0
    2eb6:	50 e0       	ldi	r21, 0x00	; 0
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	ee 24       	eor	r14, r14
    2ebe:	ff 24       	eor	r15, r15
    2ec0:	87 01       	movw	r16, r14
    2ec2:	cc 24       	eor	r12, r12
    2ec4:	dd 24       	eor	r13, r13
    2ec6:	aa 24       	eor	r10, r10
    2ec8:	bb 24       	eor	r11, r11
    2eca:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <OS_TCBInit>
    2ece:	18 2f       	mov	r17, r24
        if (err == OS_NO_ERR) {
    2ed0:	88 23       	and	r24, r24
    2ed2:	99 f4       	brne	.+38     	; 0x2efa <OSTaskCreate+0x9a>
            OS_ENTER_CRITICAL();
    2ed4:	0f 92       	push	r0
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	0f 92       	push	r0
    2eda:	f8 94       	cli
            OSTaskCtr++;                                        /* Increment the #tasks counter        */
    2edc:	80 91 8e 05 	lds	r24, 0x058E
    2ee0:	8f 5f       	subi	r24, 0xFF	; 255
    2ee2:	80 93 8e 05 	sts	0x058E, r24
            OS_EXIT_CRITICAL();
    2ee6:	0f 90       	pop	r0
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	0f 90       	pop	r0
            if (OSRunning == TRUE) {         /* Find highest priority task if multitasking has started */
    2eec:	80 91 6b 05 	lds	r24, 0x056B
    2ef0:	81 30       	cpi	r24, 0x01	; 1
    2ef2:	a9 f4       	brne	.+42     	; 0x2f1e <OSTaskCreate+0xbe>
                OS_Sched();
    2ef4:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <OS_Sched>
    2ef8:	12 c0       	rjmp	.+36     	; 0x2f1e <OSTaskCreate+0xbe>
            }
        } else {
            OS_ENTER_CRITICAL();
    2efa:	0f 92       	push	r0
    2efc:	0f b6       	in	r0, 0x3f	; 63
    2efe:	0f 92       	push	r0
    2f00:	f8 94       	cli
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    2f02:	cc 0f       	add	r28, r28
    2f04:	dd 1f       	adc	r29, r29
    2f06:	c4 58       	subi	r28, 0x84	; 132
    2f08:	d8 4f       	sbci	r29, 0xF8	; 248
    2f0a:	19 82       	std	Y+1, r1	; 0x01
    2f0c:	18 82       	st	Y, r1
            OS_EXIT_CRITICAL();
    2f0e:	0f 90       	pop	r0
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	0f 90       	pop	r0
    2f14:	04 c0       	rjmp	.+8      	; 0x2f1e <OSTaskCreate+0xbe>
        }
        return (err);
    }
    OS_EXIT_CRITICAL();
    2f16:	0f 90       	pop	r0
    2f18:	0f be       	out	0x3f, r0	; 63
    2f1a:	0f 90       	pop	r0
    2f1c:	18 e2       	ldi	r17, 0x28	; 40
    return (OS_PRIO_EXIST);
}
    2f1e:	81 2f       	mov	r24, r17
    2f20:	df 91       	pop	r29
    2f22:	cf 91       	pop	r28
    2f24:	1f 91       	pop	r17
    2f26:	0f 91       	pop	r16
    2f28:	ff 90       	pop	r15
    2f2a:	ef 90       	pop	r14
    2f2c:	df 90       	pop	r13
    2f2e:	cf 90       	pop	r12
    2f30:	bf 90       	pop	r11
    2f32:	af 90       	pop	r10
    2f34:	08 95       	ret

00002f36 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    2f36:	fc 01       	movw	r30, r24
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    2f38:	80 81       	ld	r24, Z
    2f3a:	83 30       	cpi	r24, 0x03	; 3
    2f3c:	11 f0       	breq	.+4      	; 0x2f42 <OSSemPost+0xc>
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	08 95       	ret
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    2f42:	0f 92       	push	r0
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	0f 92       	push	r0
    2f48:	f8 94       	cli
    if (pevent->OSEventGrp != 0x00) {                      /* See if any task waiting for semaphore    */
    2f4a:	81 81       	ldd	r24, Z+1	; 0x01
    2f4c:	88 23       	and	r24, r24
    2f4e:	61 f0       	breq	.+24     	; 0x2f68 <OSSemPost+0x32>
        OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM);   /* Ready highest prio task waiting on event */
    2f50:	cf 01       	movw	r24, r30
    2f52:	60 e0       	ldi	r22, 0x00	; 0
    2f54:	70 e0       	ldi	r23, 0x00	; 0
    2f56:	41 e0       	ldi	r20, 0x01	; 1
    2f58:	0e 94 34 11 	call	0x2268	; 0x2268 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
    2f5c:	0f 90       	pop	r0
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	0f 90       	pop	r0
        OS_Sched();                                        /* Find highest priority task ready to run  */
    2f62:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <OS_Sched>
    2f66:	0c c0       	rjmp	.+24     	; 0x2f80 <OSSemPost+0x4a>
        return (OS_NO_ERR);
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    2f68:	82 81       	ldd	r24, Z+2	; 0x02
    2f6a:	93 81       	ldd	r25, Z+3	; 0x03
    2f6c:	2f ef       	ldi	r18, 0xFF	; 255
    2f6e:	8f 3f       	cpi	r24, 0xFF	; 255
    2f70:	92 07       	cpc	r25, r18
    2f72:	41 f0       	breq	.+16     	; 0x2f84 <OSSemPost+0x4e>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    2f74:	01 96       	adiw	r24, 0x01	; 1
    2f76:	93 83       	std	Z+3, r25	; 0x03
    2f78:	82 83       	std	Z+2, r24	; 0x02
        OS_EXIT_CRITICAL();
    2f7a:	0f 90       	pop	r0
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	0f 90       	pop	r0
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	08 95       	ret
        return (OS_NO_ERR);
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    2f84:	0f 90       	pop	r0
    2f86:	0f be       	out	0x3f, r0	; 63
    2f88:	0f 90       	pop	r0
    2f8a:	82 e3       	ldi	r24, 0x32	; 50
    return (OS_SEM_OVF);
}
    2f8c:	08 95       	ret

00002f8e <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/

void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *err)
{
    2f8e:	0f 93       	push	r16
    2f90:	1f 93       	push	r17
    2f92:	cf 93       	push	r28
    2f94:	df 93       	push	r29
    2f96:	ec 01       	movw	r28, r24
    2f98:	8a 01       	movw	r16, r20
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr;
#endif    


    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    2f9a:	80 91 b5 05 	lds	r24, 0x05B5
    2f9e:	88 23       	and	r24, r24
    2fa0:	11 f0       	breq	.+4      	; 0x2fa6 <OSSemPend+0x18>
        *err = OS_ERR_PEND_ISR;                       /* ... can't PEND from an ISR                    */
    2fa2:	82 e0       	ldi	r24, 0x02	; 2
    2fa4:	80 c0       	rjmp	.+256    	; 0x30a6 <OSSemPend+0x118>
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *err = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    2fa6:	88 81       	ld	r24, Y
    2fa8:	83 30       	cpi	r24, 0x03	; 3
    2faa:	11 f0       	breq	.+4      	; 0x2fb0 <OSSemPend+0x22>
        *err = OS_ERR_EVENT_TYPE;
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	7b c0       	rjmp	.+246    	; 0x30a6 <OSSemPend+0x118>
        return;
    }
    OS_ENTER_CRITICAL();
    2fb0:	0f 92       	push	r0
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	0f 92       	push	r0
    2fb6:	f8 94       	cli
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    2fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fba:	9b 81       	ldd	r25, Y+3	; 0x03
    2fbc:	00 97       	sbiw	r24, 0x00	; 0
    2fbe:	39 f0       	breq	.+14     	; 0x2fce <OSSemPend+0x40>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    2fc0:	01 97       	sbiw	r24, 0x01	; 1
    2fc2:	9b 83       	std	Y+3, r25	; 0x03
    2fc4:	8a 83       	std	Y+2, r24	; 0x02
        OS_EXIT_CRITICAL();
    2fc6:	0f 90       	pop	r0
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	0f 90       	pop	r0
    2fcc:	76 c0       	rjmp	.+236    	; 0x30ba <OSSemPend+0x12c>
        *err = OS_NO_ERR;
        return;
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat |= OS_STAT_SEM;               /* Resource not available, pend on semaphore     */
    2fce:	a0 91 b6 05 	lds	r26, 0x05B6
    2fd2:	b0 91 b7 05 	lds	r27, 0x05B7
    2fd6:	1d 96       	adiw	r26, 0x0d	; 13
    2fd8:	8c 91       	ld	r24, X
    2fda:	1d 97       	sbiw	r26, 0x0d	; 13
    2fdc:	81 60       	ori	r24, 0x01	; 1
    2fde:	1d 96       	adiw	r26, 0x0d	; 13
    2fe0:	8c 93       	st	X, r24
    2fe2:	1d 97       	sbiw	r26, 0x0d	; 13
    OSTCBCur->OSTCBDly   = timeout;                   /* Store pend timeout in TCB                     */
    2fe4:	1c 96       	adiw	r26, 0x0c	; 12
    2fe6:	7c 93       	st	X, r23
    2fe8:	6e 93       	st	-X, r22
    2fea:	1b 97       	sbiw	r26, 0x0b	; 11
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    INT8U  y;


    OSTCBCur->OSTCBEventPtr = pevent;            /* Store pointer to event control block in TCB        */
    2fec:	17 96       	adiw	r26, 0x07	; 7
    2fee:	dc 93       	st	X, r29
    2ff0:	ce 93       	st	-X, r28
    2ff2:	16 97       	sbiw	r26, 0x06	; 6
    y                       = OSTCBCur->OSTCBY;  /* Task no longer ready                               */
    OSRdyTbl[y]            &= ~OSTCBCur->OSTCBBitX;
    2ff4:	50 96       	adiw	r26, 0x10	; 16
    2ff6:	8c 91       	ld	r24, X
    2ff8:	50 97       	sbiw	r26, 0x10	; 16
    2ffa:	28 2f       	mov	r18, r24
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	51 96       	adiw	r26, 0x11	; 17
    3000:	4c 91       	ld	r20, X
    3002:	51 97       	sbiw	r26, 0x11	; 17
    3004:	f9 01       	movw	r30, r18
    3006:	e0 55       	subi	r30, 0x50	; 80
    3008:	fa 4f       	sbci	r31, 0xFA	; 250
    300a:	84 2f       	mov	r24, r20
    300c:	80 95       	com	r24
    300e:	90 81       	ld	r25, Z
    3010:	89 23       	and	r24, r25
    3012:	80 83       	st	Z, r24
    if (OSRdyTbl[y] == 0x00) {                   
    3014:	88 23       	and	r24, r24
    3016:	49 f4       	brne	.+18     	; 0x302a <OSSemPend+0x9c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;        /* Clear event grp bit if this was only task pending  */
    3018:	52 96       	adiw	r26, 0x12	; 18
    301a:	9c 91       	ld	r25, X
    301c:	52 97       	sbiw	r26, 0x12	; 18
    301e:	90 95       	com	r25
    3020:	80 91 af 05 	lds	r24, 0x05AF
    3024:	89 23       	and	r24, r25
    3026:	80 93 af 05 	sts	0x05AF, r24
    }
    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;          /* Put task in waiting list  */
    302a:	fe 01       	movw	r30, r28
    302c:	e2 0f       	add	r30, r18
    302e:	f3 1f       	adc	r31, r19
    3030:	86 81       	ldd	r24, Z+6	; 0x06
    3032:	84 2b       	or	r24, r20
    3034:	86 83       	std	Z+6, r24	; 0x06
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	52 96       	adiw	r26, 0x12	; 18
    303a:	9c 91       	ld	r25, X
    303c:	89 2b       	or	r24, r25
    303e:	89 83       	std	Y+1, r24	; 0x01
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    OS_EXIT_CRITICAL();
    3040:	0f 90       	pop	r0
    3042:	0f be       	out	0x3f, r0	; 63
    3044:	0f 90       	pop	r0
    OS_Sched();                                       /* Find next highest priority task ready         */
    3046:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <OS_Sched>
    OS_ENTER_CRITICAL();
    304a:	0f 92       	push	r0
    304c:	0f b6       	in	r0, 0x3f	; 63
    304e:	0f 92       	push	r0
    3050:	f8 94       	cli
    if (OSTCBCur->OSTCBStat & OS_STAT_SEM) {          /* Must have timed out if still waiting for event*/
    3052:	a0 91 b6 05 	lds	r26, 0x05B6
    3056:	b0 91 b7 05 	lds	r27, 0x05B7
    305a:	1d 96       	adiw	r26, 0x0d	; 13
    305c:	8c 91       	ld	r24, X
    305e:	1d 97       	sbiw	r26, 0x0d	; 13
    3060:	80 ff       	sbrs	r24, 0
    3062:	24 c0       	rjmp	.+72     	; 0x30ac <OSSemPend+0x11e>
{
    INT8U  y;


    y                      = OSTCBCur->OSTCBY;
    pevent->OSEventTbl[y] &= ~OSTCBCur->OSTCBBitX;
    3064:	50 96       	adiw	r26, 0x10	; 16
    3066:	8c 91       	ld	r24, X
    3068:	50 97       	sbiw	r26, 0x10	; 16
    306a:	fe 01       	movw	r30, r28
    306c:	e8 0f       	add	r30, r24
    306e:	f1 1d       	adc	r31, r1
    3070:	51 96       	adiw	r26, 0x11	; 17
    3072:	8c 91       	ld	r24, X
    3074:	51 97       	sbiw	r26, 0x11	; 17
    3076:	80 95       	com	r24
    3078:	96 81       	ldd	r25, Z+6	; 0x06
    307a:	89 23       	and	r24, r25
    307c:	86 83       	std	Z+6, r24	; 0x06
    if (pevent->OSEventTbl[y] == 0x00) {
    307e:	88 23       	and	r24, r24
    3080:	39 f4       	brne	.+14     	; 0x3090 <OSSemPend+0x102>
        pevent->OSEventGrp &= ~OSTCBCur->OSTCBBitY;
    3082:	52 96       	adiw	r26, 0x12	; 18
    3084:	9c 91       	ld	r25, X
    3086:	52 97       	sbiw	r26, 0x12	; 18
    3088:	90 95       	com	r25
    308a:	89 81       	ldd	r24, Y+1	; 0x01
    308c:	89 23       	and	r24, r25
    308e:	89 83       	std	Y+1, r24	; 0x01
    }
    OSTCBCur->OSTCBStat     = OS_STAT_RDY;       /* Set status to ready                                */
    3090:	1d 96       	adiw	r26, 0x0d	; 13
    3092:	1c 92       	st	X, r1
    3094:	1d 97       	sbiw	r26, 0x0d	; 13
    OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;     /* No longer waiting for event                        */
    3096:	17 96       	adiw	r26, 0x07	; 7
    3098:	1c 92       	st	X, r1
    309a:	1e 92       	st	-X, r1
    309c:	16 97       	sbiw	r26, 0x06	; 6
        OS_EventTO(pevent);
        OS_EXIT_CRITICAL();
    309e:	0f 90       	pop	r0
    30a0:	0f be       	out	0x3f, r0	; 63
    30a2:	0f 90       	pop	r0
        *err = OS_TIMEOUT;                            /* Indicate that didn't get event within TO      */
    30a4:	8a e0       	ldi	r24, 0x0A	; 10
    30a6:	f8 01       	movw	r30, r16
    30a8:	80 83       	st	Z, r24
    30aa:	09 c0       	rjmp	.+18     	; 0x30be <OSSemPend+0x130>
        return;
    }
    OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;
    30ac:	17 96       	adiw	r26, 0x07	; 7
    30ae:	1c 92       	st	X, r1
    30b0:	1e 92       	st	-X, r1
    30b2:	16 97       	sbiw	r26, 0x06	; 6
    OS_EXIT_CRITICAL();
    30b4:	0f 90       	pop	r0
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	0f 90       	pop	r0
    *err = OS_NO_ERR;
    30ba:	f8 01       	movw	r30, r16
    30bc:	10 82       	st	Z, r1
}
    30be:	df 91       	pop	r29
    30c0:	cf 91       	pop	r28
    30c2:	1f 91       	pop	r17
    30c4:	0f 91       	pop	r16
    30c6:	08 95       	ret

000030c8 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *msg, INT8U opt)
{
    30c8:	0f 93       	push	r16
    30ca:	1f 93       	push	r17
    30cc:	cf 93       	push	r28
    30ce:	df 93       	push	r29
    30d0:	ec 01       	movw	r28, r24
    30d2:	8b 01       	movw	r16, r22
    }
    if (msg == (void *)0) {                           /* Make sure we are not posting a NULL pointer   */
        return (OS_ERR_POST_NULL_PTR);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    30d4:	88 81       	ld	r24, Y
    30d6:	82 30       	cpi	r24, 0x02	; 2
    30d8:	11 f0       	breq	.+4      	; 0x30de <OSQPostOpt+0x16>
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	76 c0       	rjmp	.+236    	; 0x31ca <OSQPostOpt+0x102>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    30de:	0f 92       	push	r0
    30e0:	0f b6       	in	r0, 0x3f	; 63
    30e2:	0f 92       	push	r0
    30e4:	f8 94       	cli
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	88 23       	and	r24, r24
    30ea:	b1 f0       	breq	.+44     	; 0x3118 <OSQPostOpt+0x50>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    30ec:	40 fd       	sbrc	r20, 0
    30ee:	06 c0       	rjmp	.+12     	; 0x30fc <OSQPostOpt+0x34>
    30f0:	09 c0       	rjmp	.+18     	; 0x3104 <OSQPostOpt+0x3c>
            while (pevent->OSEventGrp != 0x00) {      /* Yes, Post to ALL tasks waiting on queue       */
                OS_EventTaskRdy(pevent, msg, OS_STAT_Q);
    30f2:	ce 01       	movw	r24, r28
    30f4:	b8 01       	movw	r22, r16
    30f6:	44 e0       	ldi	r20, 0x04	; 4
    30f8:	0e 94 34 11 	call	0x2268	; 0x2268 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0x00) {      /* Yes, Post to ALL tasks waiting on queue       */
    30fc:	89 81       	ldd	r24, Y+1	; 0x01
    30fe:	88 23       	and	r24, r24
    3100:	c1 f7       	brne	.-16     	; 0x30f2 <OSQPostOpt+0x2a>
    3102:	04 c0       	rjmp	.+8      	; 0x310c <OSQPostOpt+0x44>
                OS_EventTaskRdy(pevent, msg, OS_STAT_Q);
            }
        } else {
            OS_EventTaskRdy(pevent, msg, OS_STAT_Q);  /* No,  Post to HPT waiting on queue             */
    3104:	ce 01       	movw	r24, r28
    3106:	44 e0       	ldi	r20, 0x04	; 4
    3108:	0e 94 34 11 	call	0x2268	; 0x2268 <OS_EventTaskRdy>
        }
        OS_EXIT_CRITICAL();
    310c:	0f 90       	pop	r0
    310e:	0f be       	out	0x3f, r0	; 63
    3110:	0f 90       	pop	r0
        OS_Sched();                                   /* Find highest priority task ready to run       */
    3112:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <OS_Sched>
    3116:	58 c0       	rjmp	.+176    	; 0x31c8 <OSQPostOpt+0x100>
        return (OS_NO_ERR);
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    3118:	ac 81       	ldd	r26, Y+4	; 0x04
    311a:	bd 81       	ldd	r27, Y+5	; 0x05
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    311c:	1c 96       	adiw	r26, 0x0c	; 12
    311e:	2d 91       	ld	r18, X+
    3120:	3c 91       	ld	r19, X
    3122:	1d 97       	sbiw	r26, 0x0d	; 13
    3124:	1a 96       	adiw	r26, 0x0a	; 10
    3126:	8d 91       	ld	r24, X+
    3128:	9c 91       	ld	r25, X
    312a:	1b 97       	sbiw	r26, 0x0b	; 11
    312c:	28 17       	cp	r18, r24
    312e:	39 07       	cpc	r19, r25
    3130:	28 f0       	brcs	.+10     	; 0x313c <OSQPostOpt+0x74>
        OS_EXIT_CRITICAL();
    3132:	0f 90       	pop	r0
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	0f 90       	pop	r0
    3138:	8e e1       	ldi	r24, 0x1E	; 30
    313a:	47 c0       	rjmp	.+142    	; 0x31ca <OSQPostOpt+0x102>
        return (OS_Q_FULL);
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    313c:	41 ff       	sbrs	r20, 1
    313e:	1f c0       	rjmp	.+62     	; 0x317e <OSQPostOpt+0xb6>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    3140:	18 96       	adiw	r26, 0x08	; 8
    3142:	2d 91       	ld	r18, X+
    3144:	3c 91       	ld	r19, X
    3146:	19 97       	sbiw	r26, 0x09	; 9
    3148:	12 96       	adiw	r26, 0x02	; 2
    314a:	8d 91       	ld	r24, X+
    314c:	9c 91       	ld	r25, X
    314e:	13 97       	sbiw	r26, 0x03	; 3
    3150:	28 17       	cp	r18, r24
    3152:	39 07       	cpc	r19, r25
    3154:	41 f4       	brne	.+16     	; 0x3166 <OSQPostOpt+0x9e>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    3156:	14 96       	adiw	r26, 0x04	; 4
    3158:	8d 91       	ld	r24, X+
    315a:	9c 91       	ld	r25, X
    315c:	15 97       	sbiw	r26, 0x05	; 5
    315e:	19 96       	adiw	r26, 0x09	; 9
    3160:	9c 93       	st	X, r25
    3162:	8e 93       	st	-X, r24
    3164:	18 97       	sbiw	r26, 0x08	; 8
        }
        pq->OSQOut--;
    3166:	18 96       	adiw	r26, 0x08	; 8
    3168:	ed 91       	ld	r30, X+
    316a:	fc 91       	ld	r31, X
    316c:	19 97       	sbiw	r26, 0x09	; 9
    316e:	32 97       	sbiw	r30, 0x02	; 2
    3170:	19 96       	adiw	r26, 0x09	; 9
    3172:	fc 93       	st	X, r31
    3174:	ee 93       	st	-X, r30
    3176:	18 97       	sbiw	r26, 0x08	; 8
        *pq->OSQOut = msg;                            /*      Insert message into queue                */
    3178:	11 83       	std	Z+1, r17	; 0x01
    317a:	00 83       	st	Z, r16
    317c:	19 c0       	rjmp	.+50     	; 0x31b0 <OSQPostOpt+0xe8>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = msg;                           /*      Insert message into queue                */
    317e:	16 96       	adiw	r26, 0x06	; 6
    3180:	ed 91       	ld	r30, X+
    3182:	fc 91       	ld	r31, X
    3184:	17 97       	sbiw	r26, 0x07	; 7
    3186:	61 93       	st	Z+, r22
    3188:	71 93       	st	Z+, r23
    318a:	17 96       	adiw	r26, 0x07	; 7
    318c:	fc 93       	st	X, r31
    318e:	ee 93       	st	-X, r30
    3190:	16 97       	sbiw	r26, 0x06	; 6
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    3192:	14 96       	adiw	r26, 0x04	; 4
    3194:	8d 91       	ld	r24, X+
    3196:	9c 91       	ld	r25, X
    3198:	15 97       	sbiw	r26, 0x05	; 5
    319a:	e8 17       	cp	r30, r24
    319c:	f9 07       	cpc	r31, r25
    319e:	41 f4       	brne	.+16     	; 0x31b0 <OSQPostOpt+0xe8>
            pq->OSQIn = pq->OSQStart;
    31a0:	12 96       	adiw	r26, 0x02	; 2
    31a2:	8d 91       	ld	r24, X+
    31a4:	9c 91       	ld	r25, X
    31a6:	13 97       	sbiw	r26, 0x03	; 3
    31a8:	17 96       	adiw	r26, 0x07	; 7
    31aa:	9c 93       	st	X, r25
    31ac:	8e 93       	st	-X, r24
    31ae:	16 97       	sbiw	r26, 0x06	; 6
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    31b0:	1c 96       	adiw	r26, 0x0c	; 12
    31b2:	8d 91       	ld	r24, X+
    31b4:	9c 91       	ld	r25, X
    31b6:	1d 97       	sbiw	r26, 0x0d	; 13
    31b8:	01 96       	adiw	r24, 0x01	; 1
    31ba:	1d 96       	adiw	r26, 0x0d	; 13
    31bc:	9c 93       	st	X, r25
    31be:	8e 93       	st	-X, r24
    31c0:	1c 97       	sbiw	r26, 0x0c	; 12
    OS_EXIT_CRITICAL();
    31c2:	0f 90       	pop	r0
    31c4:	0f be       	out	0x3f, r0	; 63
    31c6:	0f 90       	pop	r0
    31c8:	80 e0       	ldi	r24, 0x00	; 0
    return (OS_NO_ERR);
}
    31ca:	df 91       	pop	r29
    31cc:	cf 91       	pop	r28
    31ce:	1f 91       	pop	r17
    31d0:	0f 91       	pop	r16
    31d2:	08 95       	ret

000031d4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *msg)
{
    31d4:	fc 01       	movw	r30, r24
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    31d6:	80 81       	ld	r24, Z
    31d8:	82 30       	cpi	r24, 0x02	; 2
    31da:	11 f0       	breq	.+4      	; 0x31e0 <OSQPost+0xc>
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	08 95       	ret
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    31e0:	0f 92       	push	r0
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	0f 92       	push	r0
    31e6:	f8 94       	cli
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    31e8:	81 81       	ldd	r24, Z+1	; 0x01
    31ea:	88 23       	and	r24, r24
    31ec:	59 f0       	breq	.+22     	; 0x3204 <OSQPost+0x30>
        OS_EventTaskRdy(pevent, msg, OS_STAT_Q);      /* Ready highest priority task waiting on event  */
    31ee:	cf 01       	movw	r24, r30
    31f0:	44 e0       	ldi	r20, 0x04	; 4
    31f2:	0e 94 34 11 	call	0x2268	; 0x2268 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
    31f6:	0f 90       	pop	r0
    31f8:	0f be       	out	0x3f, r0	; 63
    31fa:	0f 90       	pop	r0
        OS_Sched();                                   /* Find highest priority task ready to run       */
    31fc:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <OS_Sched>
    3200:	80 e0       	ldi	r24, 0x00	; 0
    3202:	08 95       	ret
        return (OS_NO_ERR);
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    3204:	a4 81       	ldd	r26, Z+4	; 0x04
    3206:	b5 81       	ldd	r27, Z+5	; 0x05
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    3208:	1c 96       	adiw	r26, 0x0c	; 12
    320a:	2d 91       	ld	r18, X+
    320c:	3c 91       	ld	r19, X
    320e:	1d 97       	sbiw	r26, 0x0d	; 13
    3210:	1a 96       	adiw	r26, 0x0a	; 10
    3212:	8d 91       	ld	r24, X+
    3214:	9c 91       	ld	r25, X
    3216:	1b 97       	sbiw	r26, 0x0b	; 11
    3218:	28 17       	cp	r18, r24
    321a:	39 07       	cpc	r19, r25
    321c:	28 f0       	brcs	.+10     	; 0x3228 <OSQPost+0x54>
        OS_EXIT_CRITICAL();
    321e:	0f 90       	pop	r0
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	0f 90       	pop	r0
    3224:	8e e1       	ldi	r24, 0x1E	; 30
    3226:	08 95       	ret
        return (OS_Q_FULL);
    }
    *pq->OSQIn++ = msg;                               /* Insert message into queue                     */
    3228:	16 96       	adiw	r26, 0x06	; 6
    322a:	ed 91       	ld	r30, X+
    322c:	fc 91       	ld	r31, X
    322e:	17 97       	sbiw	r26, 0x07	; 7
    3230:	61 93       	st	Z+, r22
    3232:	71 93       	st	Z+, r23
    3234:	17 96       	adiw	r26, 0x07	; 7
    3236:	fc 93       	st	X, r31
    3238:	ee 93       	st	-X, r30
    323a:	16 97       	sbiw	r26, 0x06	; 6
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    323c:	2f 5f       	subi	r18, 0xFF	; 255
    323e:	3f 4f       	sbci	r19, 0xFF	; 255
    3240:	1d 96       	adiw	r26, 0x0d	; 13
    3242:	3c 93       	st	X, r19
    3244:	2e 93       	st	-X, r18
    3246:	1c 97       	sbiw	r26, 0x0c	; 12
    if (pq->OSQIn == pq->OSQEnd) {                    /* Wrap IN ptr if we are at end of queue         */
    3248:	14 96       	adiw	r26, 0x04	; 4
    324a:	8d 91       	ld	r24, X+
    324c:	9c 91       	ld	r25, X
    324e:	15 97       	sbiw	r26, 0x05	; 5
    3250:	e8 17       	cp	r30, r24
    3252:	f9 07       	cpc	r31, r25
    3254:	41 f4       	brne	.+16     	; 0x3266 <OSQPost+0x92>
        pq->OSQIn = pq->OSQStart;
    3256:	12 96       	adiw	r26, 0x02	; 2
    3258:	8d 91       	ld	r24, X+
    325a:	9c 91       	ld	r25, X
    325c:	13 97       	sbiw	r26, 0x03	; 3
    325e:	17 96       	adiw	r26, 0x07	; 7
    3260:	9c 93       	st	X, r25
    3262:	8e 93       	st	-X, r24
    3264:	16 97       	sbiw	r26, 0x06	; 6
    }
    OS_EXIT_CRITICAL();
    3266:	0f 90       	pop	r0
    3268:	0f be       	out	0x3f, r0	; 63
    326a:	0f 90       	pop	r0
    326c:	80 e0       	ldi	r24, 0x00	; 0
    return (OS_NO_ERR);
}
    326e:	08 95       	ret

00003270 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *err)
{
    3270:	0f 93       	push	r16
    3272:	1f 93       	push	r17
    3274:	cf 93       	push	r28
    3276:	df 93       	push	r29
    3278:	ec 01       	movw	r28, r24
    327a:	8a 01       	movw	r16, r20
#endif
    void      *msg;
    OS_Q      *pq;


    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    327c:	80 91 b5 05 	lds	r24, 0x05B5
    3280:	88 23       	and	r24, r24
    3282:	11 f0       	breq	.+4      	; 0x3288 <OSQPend+0x18>
        *err = OS_ERR_PEND_ISR;                  /* ... can't PEND from an ISR                         */
    3284:	82 e0       	ldi	r24, 0x02	; 2
    3286:	9a c0       	rjmp	.+308    	; 0x33bc <OSQPend+0x14c>
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
        *err = OS_ERR_EVENT_TYPE;
        return ((void *)0);
    }
#endif
    OS_ENTER_CRITICAL();
    3288:	0f 92       	push	r0
    328a:	0f b6       	in	r0, 0x3f	; 63
    328c:	0f 92       	push	r0
    328e:	f8 94       	cli
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    3290:	ac 81       	ldd	r26, Y+4	; 0x04
    3292:	bd 81       	ldd	r27, Y+5	; 0x05
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    3294:	1c 96       	adiw	r26, 0x0c	; 12
    3296:	8d 91       	ld	r24, X+
    3298:	9c 91       	ld	r25, X
    329a:	1d 97       	sbiw	r26, 0x0d	; 13
    329c:	00 97       	sbiw	r24, 0x00	; 0
    329e:	11 f1       	breq	.+68     	; 0x32e4 <OSQPend+0x74>
        msg = *pq->OSQOut++;                     /* Yes, extract oldest message from the queue         */
    32a0:	18 96       	adiw	r26, 0x08	; 8
    32a2:	ed 91       	ld	r30, X+
    32a4:	fc 91       	ld	r31, X
    32a6:	19 97       	sbiw	r26, 0x09	; 9
    32a8:	21 91       	ld	r18, Z+
    32aa:	31 91       	ld	r19, Z+
    32ac:	19 96       	adiw	r26, 0x09	; 9
    32ae:	fc 93       	st	X, r31
    32b0:	ee 93       	st	-X, r30
    32b2:	18 97       	sbiw	r26, 0x08	; 8
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    32b4:	01 97       	sbiw	r24, 0x01	; 1
    32b6:	1d 96       	adiw	r26, 0x0d	; 13
    32b8:	9c 93       	st	X, r25
    32ba:	8e 93       	st	-X, r24
    32bc:	1c 97       	sbiw	r26, 0x0c	; 12
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    32be:	14 96       	adiw	r26, 0x04	; 4
    32c0:	8d 91       	ld	r24, X+
    32c2:	9c 91       	ld	r25, X
    32c4:	15 97       	sbiw	r26, 0x05	; 5
    32c6:	e8 17       	cp	r30, r24
    32c8:	f9 07       	cpc	r31, r25
    32ca:	41 f4       	brne	.+16     	; 0x32dc <OSQPend+0x6c>
            pq->OSQOut = pq->OSQStart;
    32cc:	12 96       	adiw	r26, 0x02	; 2
    32ce:	8d 91       	ld	r24, X+
    32d0:	9c 91       	ld	r25, X
    32d2:	13 97       	sbiw	r26, 0x03	; 3
    32d4:	19 96       	adiw	r26, 0x09	; 9
    32d6:	9c 93       	st	X, r25
    32d8:	8e 93       	st	-X, r24
    32da:	18 97       	sbiw	r26, 0x08	; 8
        }
        OS_EXIT_CRITICAL();
    32dc:	0f 90       	pop	r0
    32de:	0f be       	out	0x3f, r0	; 63
    32e0:	0f 90       	pop	r0
    32e2:	83 c0       	rjmp	.+262    	; 0x33ea <OSQPend+0x17a>
        *err = OS_NO_ERR;
        return (msg);                            /* Return message received                            */
    }
    OSTCBCur->OSTCBStat |= OS_STAT_Q;            /* Task will have to pend for a message to be posted  */
    32e4:	a0 91 b6 05 	lds	r26, 0x05B6
    32e8:	b0 91 b7 05 	lds	r27, 0x05B7
    32ec:	1d 96       	adiw	r26, 0x0d	; 13
    32ee:	8c 91       	ld	r24, X
    32f0:	1d 97       	sbiw	r26, 0x0d	; 13
    32f2:	84 60       	ori	r24, 0x04	; 4
    32f4:	1d 96       	adiw	r26, 0x0d	; 13
    32f6:	8c 93       	st	X, r24
    32f8:	1d 97       	sbiw	r26, 0x0d	; 13
    OSTCBCur->OSTCBDly   = timeout;              /* Load timeout into TCB                              */
    32fa:	1c 96       	adiw	r26, 0x0c	; 12
    32fc:	7c 93       	st	X, r23
    32fe:	6e 93       	st	-X, r22
    3300:	1b 97       	sbiw	r26, 0x0b	; 11
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    INT8U  y;


    OSTCBCur->OSTCBEventPtr = pevent;            /* Store pointer to event control block in TCB        */
    3302:	17 96       	adiw	r26, 0x07	; 7
    3304:	dc 93       	st	X, r29
    3306:	ce 93       	st	-X, r28
    3308:	16 97       	sbiw	r26, 0x06	; 6
    y                       = OSTCBCur->OSTCBY;  /* Task no longer ready                               */
    OSRdyTbl[y]            &= ~OSTCBCur->OSTCBBitX;
    330a:	50 96       	adiw	r26, 0x10	; 16
    330c:	8c 91       	ld	r24, X
    330e:	50 97       	sbiw	r26, 0x10	; 16
    3310:	28 2f       	mov	r18, r24
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	51 96       	adiw	r26, 0x11	; 17
    3316:	4c 91       	ld	r20, X
    3318:	51 97       	sbiw	r26, 0x11	; 17
    331a:	f9 01       	movw	r30, r18
    331c:	e0 55       	subi	r30, 0x50	; 80
    331e:	fa 4f       	sbci	r31, 0xFA	; 250
    3320:	84 2f       	mov	r24, r20
    3322:	80 95       	com	r24
    3324:	90 81       	ld	r25, Z
    3326:	89 23       	and	r24, r25
    3328:	80 83       	st	Z, r24
    if (OSRdyTbl[y] == 0x00) {                   
    332a:	88 23       	and	r24, r24
    332c:	49 f4       	brne	.+18     	; 0x3340 <OSQPend+0xd0>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;        /* Clear event grp bit if this was only task pending  */
    332e:	52 96       	adiw	r26, 0x12	; 18
    3330:	9c 91       	ld	r25, X
    3332:	52 97       	sbiw	r26, 0x12	; 18
    3334:	90 95       	com	r25
    3336:	80 91 af 05 	lds	r24, 0x05AF
    333a:	89 23       	and	r24, r25
    333c:	80 93 af 05 	sts	0x05AF, r24
    }
    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;          /* Put task in waiting list  */
    3340:	fe 01       	movw	r30, r28
    3342:	e2 0f       	add	r30, r18
    3344:	f3 1f       	adc	r31, r19
    3346:	86 81       	ldd	r24, Z+6	; 0x06
    3348:	84 2b       	or	r24, r20
    334a:	86 83       	std	Z+6, r24	; 0x06
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	52 96       	adiw	r26, 0x12	; 18
    3350:	9c 91       	ld	r25, X
    3352:	89 2b       	or	r24, r25
    3354:	89 83       	std	Y+1, r24	; 0x01
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    OS_EXIT_CRITICAL();
    3356:	0f 90       	pop	r0
    3358:	0f be       	out	0x3f, r0	; 63
    335a:	0f 90       	pop	r0
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    335c:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <OS_Sched>
    OS_ENTER_CRITICAL();
    3360:	0f 92       	push	r0
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	0f 92       	push	r0
    3366:	f8 94       	cli
    if (OSTCBCur->OSTCBStat & OS_STAT_Q) {       /* Was task readied because of a timeout?             */
    3368:	a0 91 b6 05 	lds	r26, 0x05B6
    336c:	b0 91 b7 05 	lds	r27, 0x05B7
    3370:	1d 96       	adiw	r26, 0x0d	; 13
    3372:	8c 91       	ld	r24, X
    3374:	1d 97       	sbiw	r26, 0x0d	; 13
    3376:	82 ff       	sbrs	r24, 2
    3378:	26 c0       	rjmp	.+76     	; 0x33c6 <OSQPend+0x156>
{
    INT8U  y;


    y                      = OSTCBCur->OSTCBY;
    pevent->OSEventTbl[y] &= ~OSTCBCur->OSTCBBitX;
    337a:	50 96       	adiw	r26, 0x10	; 16
    337c:	8c 91       	ld	r24, X
    337e:	50 97       	sbiw	r26, 0x10	; 16
    3380:	fe 01       	movw	r30, r28
    3382:	e8 0f       	add	r30, r24
    3384:	f1 1d       	adc	r31, r1
    3386:	51 96       	adiw	r26, 0x11	; 17
    3388:	8c 91       	ld	r24, X
    338a:	51 97       	sbiw	r26, 0x11	; 17
    338c:	80 95       	com	r24
    338e:	96 81       	ldd	r25, Z+6	; 0x06
    3390:	89 23       	and	r24, r25
    3392:	86 83       	std	Z+6, r24	; 0x06
    if (pevent->OSEventTbl[y] == 0x00) {
    3394:	88 23       	and	r24, r24
    3396:	39 f4       	brne	.+14     	; 0x33a6 <OSQPend+0x136>
        pevent->OSEventGrp &= ~OSTCBCur->OSTCBBitY;
    3398:	52 96       	adiw	r26, 0x12	; 18
    339a:	9c 91       	ld	r25, X
    339c:	52 97       	sbiw	r26, 0x12	; 18
    339e:	90 95       	com	r25
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	89 23       	and	r24, r25
    33a4:	89 83       	std	Y+1, r24	; 0x01
    }
    OSTCBCur->OSTCBStat     = OS_STAT_RDY;       /* Set status to ready                                */
    33a6:	1d 96       	adiw	r26, 0x0d	; 13
    33a8:	1c 92       	st	X, r1
    33aa:	1d 97       	sbiw	r26, 0x0d	; 13
    OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;     /* No longer waiting for event                        */
    33ac:	17 96       	adiw	r26, 0x07	; 7
    33ae:	1c 92       	st	X, r1
    33b0:	1e 92       	st	-X, r1
    33b2:	16 97       	sbiw	r26, 0x06	; 6
        OS_EventTO(pevent);                      /* Yes                                                */
        OS_EXIT_CRITICAL();
    33b4:	0f 90       	pop	r0
    33b6:	0f be       	out	0x3f, r0	; 63
    33b8:	0f 90       	pop	r0
        *err = OS_TIMEOUT;                       /*     Indicate a timeout occured                     */
    33ba:	8a e0       	ldi	r24, 0x0A	; 10
    33bc:	f8 01       	movw	r30, r16
    33be:	80 83       	st	Z, r24
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	14 c0       	rjmp	.+40     	; 0x33ee <OSQPend+0x17e>
        return ((void *)0);                      /*     No message received                            */
    }
    msg                     = OSTCBCur->OSTCBMsg;/* No, Extract message from TCB (Put there by QPost)  */
    33c6:	18 96       	adiw	r26, 0x08	; 8
    33c8:	2d 91       	ld	r18, X+
    33ca:	3c 91       	ld	r19, X
    33cc:	19 97       	sbiw	r26, 0x09	; 9
    OSTCBCur->OSTCBMsg      = (void *)0;
    33ce:	19 96       	adiw	r26, 0x09	; 9
    33d0:	1c 92       	st	X, r1
    33d2:	1e 92       	st	-X, r1
    33d4:	18 97       	sbiw	r26, 0x08	; 8
    OSTCBCur->OSTCBStat     = OS_STAT_RDY;
    33d6:	1d 96       	adiw	r26, 0x0d	; 13
    33d8:	1c 92       	st	X, r1
    33da:	1d 97       	sbiw	r26, 0x0d	; 13
    OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;     /*     No longer waiting for event                    */
    33dc:	17 96       	adiw	r26, 0x07	; 7
    33de:	1c 92       	st	X, r1
    33e0:	1e 92       	st	-X, r1
    33e2:	16 97       	sbiw	r26, 0x06	; 6
    OS_EXIT_CRITICAL();
    33e4:	0f 90       	pop	r0
    33e6:	0f be       	out	0x3f, r0	; 63
    33e8:	0f 90       	pop	r0
    *err                    = OS_NO_ERR;
    33ea:	f8 01       	movw	r30, r16
    33ec:	10 82       	st	Z, r1
    return (msg);                                /*     Return message received                        */
}
    33ee:	c9 01       	movw	r24, r18
    33f0:	df 91       	pop	r29
    33f2:	cf 91       	pop	r28
    33f4:	1f 91       	pop	r17
    33f6:	0f 91       	pop	r16
    33f8:	08 95       	ret

000033fa <OSMutexPost>:
*              OS_ERR_NOT_MUTEX_OWNER  The task that did the post is NOT the owner of the MUTEX.
*********************************************************************************************************
*/

INT8U  OSMutexPost (OS_EVENT *pevent)
{
    33fa:	cf 93       	push	r28
    33fc:	df 93       	push	r29
    33fe:	ec 01       	movw	r28, r24
#endif    
    INT8U      pip;                                   /* Priority inheritance priority                 */
    INT8U      prio;


    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    3400:	80 91 b5 05 	lds	r24, 0x05B5
    3404:	88 23       	and	r24, r24
    3406:	11 f0       	breq	.+4      	; 0x340c <OSMutexPost+0x12>
    3408:	85 e0       	ldi	r24, 0x05	; 5
    340a:	9f c0       	rjmp	.+318    	; 0x354a <OSMutexPost+0x150>
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
    340c:	88 81       	ld	r24, Y
    340e:	84 30       	cpi	r24, 0x04	; 4
    3410:	11 f0       	breq	.+4      	; 0x3416 <OSMutexPost+0x1c>
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	9a c0       	rjmp	.+308    	; 0x354a <OSMutexPost+0x150>
        return (OS_ERR_EVENT_TYPE);
    }                                                 
    OS_ENTER_CRITICAL();
    3416:	0f 92       	push	r0
    3418:	0f b6       	in	r0, 0x3f	; 63
    341a:	0f 92       	push	r0
    341c:	f8 94       	cli
    pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
    341e:	3a 81       	ldd	r19, Y+2	; 0x02
    3420:	4b 81       	ldd	r20, Y+3	; 0x03
    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
    3422:	a0 91 b6 05 	lds	r26, 0x05B6
    3426:	b0 91 b7 05 	lds	r27, 0x05B7
    342a:	8c 81       	ldd	r24, Y+4	; 0x04
    342c:	9d 81       	ldd	r25, Y+5	; 0x05
    342e:	a8 17       	cp	r26, r24
    3430:	b9 07       	cpc	r27, r25
    3432:	29 f0       	breq	.+10     	; 0x343e <OSMutexPost+0x44>
        OS_EXIT_CRITICAL();
    3434:	0f 90       	pop	r0
    3436:	0f be       	out	0x3f, r0	; 63
    3438:	0f 90       	pop	r0
    343a:	88 e7       	ldi	r24, 0x78	; 120
    343c:	86 c0       	rjmp	.+268    	; 0x354a <OSMutexPost+0x150>
        return (OS_ERR_NOT_MUTEX_OWNER);
    }
    if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
    343e:	1e 96       	adiw	r26, 0x0e	; 14
    3440:	8c 91       	ld	r24, X
    3442:	1e 97       	sbiw	r26, 0x0e	; 14
    3444:	84 17       	cp	r24, r20
    3446:	09 f0       	breq	.+2      	; 0x344a <OSMutexPost+0x50>
    3448:	4b c0       	rjmp	.+150    	; 0x34e0 <OSMutexPost+0xe6>
                                                      /* Yes, Return to original priority              */
                                                      /*      Remove owner from ready list at 'pip'    */
        if ((OSRdyTbl[OSTCBCur->OSTCBY] &= ~OSTCBCur->OSTCBBitX) == 0) {
    344a:	50 96       	adiw	r26, 0x10	; 16
    344c:	ec 91       	ld	r30, X
    344e:	50 97       	sbiw	r26, 0x10	; 16
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	e0 55       	subi	r30, 0x50	; 80
    3454:	fa 4f       	sbci	r31, 0xFA	; 250
    3456:	51 96       	adiw	r26, 0x11	; 17
    3458:	8c 91       	ld	r24, X
    345a:	51 97       	sbiw	r26, 0x11	; 17
    345c:	80 95       	com	r24
    345e:	90 81       	ld	r25, Z
    3460:	89 23       	and	r24, r25
    3462:	80 83       	st	Z, r24
    3464:	88 23       	and	r24, r24
    3466:	49 f4       	brne	.+18     	; 0x347a <OSMutexPost+0x80>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    3468:	52 96       	adiw	r26, 0x12	; 18
    346a:	9c 91       	ld	r25, X
    346c:	52 97       	sbiw	r26, 0x12	; 18
    346e:	90 95       	com	r25
    3470:	80 91 af 05 	lds	r24, 0x05AF
    3474:	89 23       	and	r24, r25
    3476:	80 93 af 05 	sts	0x05AF, r24
        }
        OSTCBCur->OSTCBPrio         = prio;
    347a:	1e 96       	adiw	r26, 0x0e	; 14
    347c:	3c 93       	st	X, r19
    347e:	1e 97       	sbiw	r26, 0x0e	; 14
        OSTCBCur->OSTCBY            = prio >> 3;
    3480:	e3 2f       	mov	r30, r19
    3482:	e6 95       	lsr	r30
    3484:	e6 95       	lsr	r30
    3486:	e6 95       	lsr	r30
    3488:	50 96       	adiw	r26, 0x10	; 16
    348a:	ec 93       	st	X, r30
    348c:	50 97       	sbiw	r26, 0x10	; 16
        OSTCBCur->OSTCBBitY         = OSMapTbl[OSTCBCur->OSTCBY];
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	e0 5a       	subi	r30, 0xA0	; 160
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	20 81       	ld	r18, Z
    3496:	52 96       	adiw	r26, 0x12	; 18
    3498:	2c 93       	st	X, r18
    349a:	52 97       	sbiw	r26, 0x12	; 18
        OSTCBCur->OSTCBX            = prio & 0x07;
    349c:	e3 2f       	mov	r30, r19
    349e:	e7 70       	andi	r30, 0x07	; 7
    34a0:	1f 96       	adiw	r26, 0x0f	; 15
    34a2:	ec 93       	st	X, r30
    34a4:	1f 97       	sbiw	r26, 0x0f	; 15
        OSTCBCur->OSTCBBitX         = OSMapTbl[OSTCBCur->OSTCBX];
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	e0 5a       	subi	r30, 0xA0	; 160
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	90 81       	ld	r25, Z
    34ae:	51 96       	adiw	r26, 0x11	; 17
    34b0:	9c 93       	st	X, r25
    34b2:	51 97       	sbiw	r26, 0x11	; 17
        OSRdyGrp                   |= OSTCBCur->OSTCBBitY;
    34b4:	80 91 af 05 	lds	r24, 0x05AF
    34b8:	82 2b       	or	r24, r18
    34ba:	80 93 af 05 	sts	0x05AF, r24
        OSRdyTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    34be:	50 96       	adiw	r26, 0x10	; 16
    34c0:	ec 91       	ld	r30, X
    34c2:	50 97       	sbiw	r26, 0x10	; 16
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	e0 55       	subi	r30, 0x50	; 80
    34c8:	fa 4f       	sbci	r31, 0xFA	; 250
    34ca:	80 81       	ld	r24, Z
    34cc:	98 2b       	or	r25, r24
    34ce:	90 83       	st	Z, r25
        OSTCBPrioTbl[prio]          = (OS_TCB *)OSTCBCur;
    34d0:	e3 2f       	mov	r30, r19
    34d2:	f0 e0       	ldi	r31, 0x00	; 0
    34d4:	ee 0f       	add	r30, r30
    34d6:	ff 1f       	adc	r31, r31
    34d8:	e4 58       	subi	r30, 0x84	; 132
    34da:	f8 4f       	sbci	r31, 0xF8	; 248
    34dc:	b1 83       	std	Z+1, r27	; 0x01
    34de:	a0 83       	st	Z, r26
    }
    OSTCBPrioTbl[pip] = (OS_TCB *)1;                  /* Reserve table entry                           */
    34e0:	e4 2f       	mov	r30, r20
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	ee 0f       	add	r30, r30
    34e6:	ff 1f       	adc	r31, r31
    34e8:	e4 58       	subi	r30, 0x84	; 132
    34ea:	f8 4f       	sbci	r31, 0xF8	; 248
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	91 83       	std	Z+1, r25	; 0x01
    34f2:	80 83       	st	Z, r24
    if (pevent->OSEventGrp != 0x00) {                 /* Any task waiting for the mutex?               */
    34f4:	89 81       	ldd	r24, Y+1	; 0x01
    34f6:	88 23       	and	r24, r24
    34f8:	e9 f0       	breq	.+58     	; 0x3534 <OSMutexPost+0x13a>
                                                      /* Yes, Make HPT waiting for mutex ready         */
        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX);
    34fa:	ce 01       	movw	r24, r28
    34fc:	60 e0       	ldi	r22, 0x00	; 0
    34fe:	70 e0       	ldi	r23, 0x00	; 0
    3500:	40 e1       	ldi	r20, 0x10	; 16
    3502:	0e 94 34 11 	call	0x2268	; 0x2268 <OS_EventTaskRdy>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
        pevent->OSEventCnt |= prio;
    3506:	e8 2f       	mov	r30, r24
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	8a 81       	ldd	r24, Y+2	; 0x02
    350c:	9b 81       	ldd	r25, Y+3	; 0x03
    350e:	80 70       	andi	r24, 0x00	; 0
    3510:	8e 2b       	or	r24, r30
    3512:	9f 2b       	or	r25, r31
    3514:	9b 83       	std	Y+3, r25	; 0x03
    3516:	8a 83       	std	Y+2, r24	; 0x02
        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to mutex owner's OS_TCB             */
    3518:	ee 0f       	add	r30, r30
    351a:	ff 1f       	adc	r31, r31
    351c:	e4 58       	subi	r30, 0x84	; 132
    351e:	f8 4f       	sbci	r31, 0xF8	; 248
    3520:	80 81       	ld	r24, Z
    3522:	91 81       	ldd	r25, Z+1	; 0x01
    3524:	9d 83       	std	Y+5, r25	; 0x05
    3526:	8c 83       	std	Y+4, r24	; 0x04
        OS_EXIT_CRITICAL();
    3528:	0f 90       	pop	r0
    352a:	0f be       	out	0x3f, r0	; 63
    352c:	0f 90       	pop	r0
        OS_Sched();                                   /*      Find highest priority task ready to run  */
    352e:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <OS_Sched>
    3532:	0a c0       	rjmp	.+20     	; 0x3548 <OSMutexPost+0x14e>
        return (OS_NO_ERR);
    }
    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
    3534:	8a 81       	ldd	r24, Y+2	; 0x02
    3536:	9b 81       	ldd	r25, Y+3	; 0x03
    3538:	8f 6f       	ori	r24, 0xFF	; 255
    353a:	9b 83       	std	Y+3, r25	; 0x03
    353c:	8a 83       	std	Y+2, r24	; 0x02
    pevent->OSEventPtr  = (void *)0;
    353e:	1d 82       	std	Y+5, r1	; 0x05
    3540:	1c 82       	std	Y+4, r1	; 0x04
    OS_EXIT_CRITICAL();
    3542:	0f 90       	pop	r0
    3544:	0f be       	out	0x3f, r0	; 63
    3546:	0f 90       	pop	r0
    3548:	80 e0       	ldi	r24, 0x00	; 0
    return (OS_NO_ERR);
}
    354a:	df 91       	pop	r29
    354c:	cf 91       	pop	r28
    354e:	08 95       	ret

00003550 <OSMutexPend>:
* Note(s)    : 1) The task that owns the Mutex MUST NOT pend on any other event while it owns the mutex.
*              2) You MUST NOT change the priority of the task that owns the mutex
*********************************************************************************************************
*/
void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *err)
{
    3550:	ef 92       	push	r14
    3552:	ff 92       	push	r15
    3554:	0f 93       	push	r16
    3556:	1f 93       	push	r17
    3558:	cf 93       	push	r28
    355a:	df 93       	push	r29
    355c:	8c 01       	movw	r16, r24
    355e:	7a 01       	movw	r14, r20
    BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    OS_TCB    *ptcb;
    OS_EVENT  *pevent2;


    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    3560:	80 91 b5 05 	lds	r24, 0x05B5
    3564:	88 23       	and	r24, r24
    3566:	11 f0       	breq	.+4      	; 0x356c <OSMutexPend+0x1c>
        *err = OS_ERR_PEND_ISR;                            /* ... can't PEND from an ISR               */
    3568:	82 e0       	ldi	r24, 0x02	; 2
    356a:	30 c1       	rjmp	.+608    	; 0x37cc <OSMutexPend+0x27c>
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *err = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
    356c:	f8 01       	movw	r30, r16
    356e:	80 81       	ld	r24, Z
    3570:	84 30       	cpi	r24, 0x04	; 4
    3572:	11 f0       	breq	.+4      	; 0x3578 <OSMutexPend+0x28>
        *err = OS_ERR_EVENT_TYPE;
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	2a c1       	rjmp	.+596    	; 0x37cc <OSMutexPend+0x27c>
        return;
    }
    OS_ENTER_CRITICAL();								   /* Is Mutex available?                      */
    3578:	0f 92       	push	r0
    357a:	0f b6       	in	r0, 0x3f	; 63
    357c:	0f 92       	push	r0
    357e:	f8 94       	cli
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
    3580:	f8 01       	movw	r30, r16
    3582:	82 81       	ldd	r24, Z+2	; 0x02
    3584:	93 81       	ldd	r25, Z+3	; 0x03
    3586:	28 2f       	mov	r18, r24
    3588:	8f 3f       	cpi	r24, 0xFF	; 255
    358a:	c1 f4       	brne	.+48     	; 0x35bc <OSMutexPend+0x6c>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
    358c:	80 70       	andi	r24, 0x00	; 0
    358e:	93 83       	std	Z+3, r25	; 0x03
    3590:	82 83       	std	Z+2, r24	; 0x02
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
    3592:	e0 91 b6 05 	lds	r30, 0x05B6
    3596:	f0 91 b7 05 	lds	r31, 0x05B7
    359a:	26 85       	ldd	r18, Z+14	; 0x0e
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	28 2b       	or	r18, r24
    35a0:	39 2b       	or	r19, r25
    35a2:	d8 01       	movw	r26, r16
    35a4:	13 96       	adiw	r26, 0x03	; 3
    35a6:	3c 93       	st	X, r19
    35a8:	2e 93       	st	-X, r18
    35aa:	12 97       	sbiw	r26, 0x02	; 2
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
    35ac:	15 96       	adiw	r26, 0x05	; 5
    35ae:	fc 93       	st	X, r31
    35b0:	ee 93       	st	-X, r30
    35b2:	14 97       	sbiw	r26, 0x04	; 4
        OS_EXIT_CRITICAL();
    35b4:	0f 90       	pop	r0
    35b6:	0f be       	out	0x3f, r0	; 63
    35b8:	0f 90       	pop	r0
    35ba:	12 c1       	rjmp	.+548    	; 0x37e0 <OSMutexPend+0x290>
        *err  = OS_NO_ERR;
        return;
    }
    pip   = (INT8U)(pevent->OSEventCnt >> 8);                     /* No, Get PIP from mutex            */
    35bc:	59 2f       	mov	r21, r25
    mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /*     Get priority of mutex owner   */
    ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
    35be:	f8 01       	movw	r30, r16
    35c0:	a4 81       	ldd	r26, Z+4	; 0x04
    35c2:	b5 81       	ldd	r27, Z+5	; 0x05
    if (ptcb->OSTCBPrio != pip && mprio > OSTCBCur->OSTCBPrio) {  /*     Need to promote prio of owner?*/
    35c4:	1e 96       	adiw	r26, 0x0e	; 14
    35c6:	8c 91       	ld	r24, X
    35c8:	1e 97       	sbiw	r26, 0x0e	; 14
    35ca:	89 17       	cp	r24, r25
    35cc:	09 f4       	brne	.+2      	; 0x35d0 <OSMutexPend+0x80>
    35ce:	8d c0       	rjmp	.+282    	; 0x36ea <OSMutexPend+0x19a>
    35d0:	e0 91 b6 05 	lds	r30, 0x05B6
    35d4:	f0 91 b7 05 	lds	r31, 0x05B7
    35d8:	86 85       	ldd	r24, Z+14	; 0x0e
    35da:	82 17       	cp	r24, r18
    35dc:	08 f0       	brcs	.+2      	; 0x35e0 <OSMutexPend+0x90>
    35de:	85 c0       	rjmp	.+266    	; 0x36ea <OSMutexPend+0x19a>
        if ((OSRdyTbl[ptcb->OSTCBY] & ptcb->OSTCBBitX) != 0x00) { /*     See if mutex owner is ready   */
    35e0:	50 96       	adiw	r26, 0x10	; 16
    35e2:	8c 91       	ld	r24, X
    35e4:	50 97       	sbiw	r26, 0x10	; 16
    35e6:	28 2f       	mov	r18, r24
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	f9 01       	movw	r30, r18
    35ec:	e0 55       	subi	r30, 0x50	; 80
    35ee:	fa 4f       	sbci	r31, 0xFA	; 250
    35f0:	40 81       	ld	r20, Z
    35f2:	51 96       	adiw	r26, 0x11	; 17
    35f4:	9c 91       	ld	r25, X
    35f6:	51 97       	sbiw	r26, 0x11	; 17
    35f8:	84 2f       	mov	r24, r20
    35fa:	89 23       	and	r24, r25
    35fc:	89 f0       	breq	.+34     	; 0x3620 <OSMutexPend+0xd0>
                                                                  /*     Yes, Remove owner from Rdy ...*/
                                                                  /*          ... list at current prio */
            if ((OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0x00) {
    35fe:	89 2f       	mov	r24, r25
    3600:	80 95       	com	r24
    3602:	84 23       	and	r24, r20
    3604:	80 83       	st	Z, r24
    3606:	88 23       	and	r24, r24
    3608:	49 f4       	brne	.+18     	; 0x361c <OSMutexPend+0xcc>
                OSRdyGrp &= ~ptcb->OSTCBBitY;
    360a:	52 96       	adiw	r26, 0x12	; 18
    360c:	9c 91       	ld	r25, X
    360e:	52 97       	sbiw	r26, 0x12	; 18
    3610:	90 95       	com	r25
    3612:	80 91 af 05 	lds	r24, 0x05AF
    3616:	89 23       	and	r24, r25
    3618:	80 93 af 05 	sts	0x05AF, r24
    361c:	91 e0       	ldi	r25, 0x01	; 1
    361e:	18 c0       	rjmp	.+48     	; 0x3650 <OSMutexPend+0x100>
            }
            rdy = TRUE;
        } else {
            pevent2 = ptcb->OSTCBEventPtr;
    3620:	16 96       	adiw	r26, 0x06	; 6
    3622:	cd 91       	ld	r28, X+
    3624:	dc 91       	ld	r29, X
    3626:	17 97       	sbiw	r26, 0x07	; 7
            if (pevent2 != (OS_EVENT *)0) {                       /* Remove from event wait list       */
    3628:	20 97       	sbiw	r28, 0x00	; 0
    362a:	89 f0       	breq	.+34     	; 0x364e <OSMutexPend+0xfe>
                if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
    362c:	fe 01       	movw	r30, r28
    362e:	e2 0f       	add	r30, r18
    3630:	f3 1f       	adc	r31, r19
    3632:	89 2f       	mov	r24, r25
    3634:	80 95       	com	r24
    3636:	96 81       	ldd	r25, Z+6	; 0x06
    3638:	89 23       	and	r24, r25
    363a:	86 83       	std	Z+6, r24	; 0x06
    363c:	88 23       	and	r24, r24
    363e:	39 f4       	brne	.+14     	; 0x364e <OSMutexPend+0xfe>
                    pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
    3640:	52 96       	adiw	r26, 0x12	; 18
    3642:	9c 91       	ld	r25, X
    3644:	52 97       	sbiw	r26, 0x12	; 18
    3646:	90 95       	com	r25
    3648:	89 81       	ldd	r24, Y+1	; 0x01
    364a:	89 23       	and	r24, r25
    364c:	89 83       	std	Y+1, r24	; 0x01
    364e:	90 e0       	ldi	r25, 0x00	; 0
                }
            }
            rdy = FALSE;                                   /* No                                       */
        }
        ptcb->OSTCBPrio = pip;                             /* Change owner task prio to PIP            */
    3650:	1e 96       	adiw	r26, 0x0e	; 14
    3652:	5c 93       	st	X, r21
    3654:	1e 97       	sbiw	r26, 0x0e	; 14
        ptcb->OSTCBY    = ptcb->OSTCBPrio >> 3;
    3656:	e5 2f       	mov	r30, r21
    3658:	e6 95       	lsr	r30
    365a:	e6 95       	lsr	r30
    365c:	e6 95       	lsr	r30
    365e:	50 96       	adiw	r26, 0x10	; 16
    3660:	ec 93       	st	X, r30
    3662:	50 97       	sbiw	r26, 0x10	; 16
        ptcb->OSTCBBitY = OSMapTbl[ptcb->OSTCBY];
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	e0 5a       	subi	r30, 0xA0	; 160
    3668:	ff 4f       	sbci	r31, 0xFF	; 255
    366a:	20 81       	ld	r18, Z
    366c:	52 96       	adiw	r26, 0x12	; 18
    366e:	2c 93       	st	X, r18
    3670:	52 97       	sbiw	r26, 0x12	; 18
        ptcb->OSTCBX    = ptcb->OSTCBPrio & 0x07;
    3672:	e5 2f       	mov	r30, r21
    3674:	e7 70       	andi	r30, 0x07	; 7
    3676:	1f 96       	adiw	r26, 0x0f	; 15
    3678:	ec 93       	st	X, r30
    367a:	1f 97       	sbiw	r26, 0x0f	; 15
        ptcb->OSTCBBitX = OSMapTbl[ptcb->OSTCBX];
    367c:	f0 e0       	ldi	r31, 0x00	; 0
    367e:	e0 5a       	subi	r30, 0xA0	; 160
    3680:	ff 4f       	sbci	r31, 0xFF	; 255
    3682:	80 81       	ld	r24, Z
    3684:	51 96       	adiw	r26, 0x11	; 17
    3686:	8c 93       	st	X, r24
    3688:	51 97       	sbiw	r26, 0x11	; 17
        if (rdy == TRUE) {                                 /* If task was ready at owner's priority ...*/
    368a:	91 30       	cpi	r25, 0x01	; 1
    368c:	91 f4       	brne	.+36     	; 0x36b2 <OSMutexPend+0x162>
            OSRdyGrp               |= ptcb->OSTCBBitY;     /* ... make it ready at new priority.       */
    368e:	80 91 af 05 	lds	r24, 0x05AF
    3692:	82 2b       	or	r24, r18
    3694:	80 93 af 05 	sts	0x05AF, r24
            OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    3698:	50 96       	adiw	r26, 0x10	; 16
    369a:	ec 91       	ld	r30, X
    369c:	50 97       	sbiw	r26, 0x10	; 16
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	e0 55       	subi	r30, 0x50	; 80
    36a2:	fa 4f       	sbci	r31, 0xFA	; 250
    36a4:	80 81       	ld	r24, Z
    36a6:	51 96       	adiw	r26, 0x11	; 17
    36a8:	9c 91       	ld	r25, X
    36aa:	51 97       	sbiw	r26, 0x11	; 17
    36ac:	89 2b       	or	r24, r25
    36ae:	80 83       	st	Z, r24
    36b0:	14 c0       	rjmp	.+40     	; 0x36da <OSMutexPend+0x18a>
        } else {
            pevent2 = ptcb->OSTCBEventPtr;
    36b2:	16 96       	adiw	r26, 0x06	; 6
    36b4:	ed 91       	ld	r30, X+
    36b6:	fc 91       	ld	r31, X
    36b8:	17 97       	sbiw	r26, 0x07	; 7
            if (pevent2 != (OS_EVENT *)0) {                /* Remove from event wait list              */
    36ba:	30 97       	sbiw	r30, 0x00	; 0
    36bc:	71 f0       	breq	.+28     	; 0x36da <OSMutexPend+0x18a>
                pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
    36be:	81 81       	ldd	r24, Z+1	; 0x01
    36c0:	82 2b       	or	r24, r18
    36c2:	81 83       	std	Z+1, r24	; 0x01
                pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    36c4:	50 96       	adiw	r26, 0x10	; 16
    36c6:	8c 91       	ld	r24, X
    36c8:	50 97       	sbiw	r26, 0x10	; 16
    36ca:	e8 0f       	add	r30, r24
    36cc:	f1 1d       	adc	r31, r1
    36ce:	86 81       	ldd	r24, Z+6	; 0x06
    36d0:	51 96       	adiw	r26, 0x11	; 17
    36d2:	9c 91       	ld	r25, X
    36d4:	51 97       	sbiw	r26, 0x11	; 17
    36d6:	89 2b       	or	r24, r25
    36d8:	86 83       	std	Z+6, r24	; 0x06
            }
        }
        OSTCBPrioTbl[pip] = (OS_TCB *)ptcb;
    36da:	e5 2f       	mov	r30, r21
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	ee 0f       	add	r30, r30
    36e0:	ff 1f       	adc	r31, r31
    36e2:	e4 58       	subi	r30, 0x84	; 132
    36e4:	f8 4f       	sbci	r31, 0xF8	; 248
    36e6:	b1 83       	std	Z+1, r27	; 0x01
    36e8:	a0 83       	st	Z, r26
    }
    OSTCBCur->OSTCBStat |= OS_STAT_MUTEX;             /* Mutex not available, pend current task        */
    36ea:	a0 91 b6 05 	lds	r26, 0x05B6
    36ee:	b0 91 b7 05 	lds	r27, 0x05B7
    36f2:	1d 96       	adiw	r26, 0x0d	; 13
    36f4:	8c 91       	ld	r24, X
    36f6:	1d 97       	sbiw	r26, 0x0d	; 13
    36f8:	80 61       	ori	r24, 0x10	; 16
    36fa:	1d 96       	adiw	r26, 0x0d	; 13
    36fc:	8c 93       	st	X, r24
    36fe:	1d 97       	sbiw	r26, 0x0d	; 13
    OSTCBCur->OSTCBDly   = timeout;                   /* Store timeout in current task's TCB           */
    3700:	1c 96       	adiw	r26, 0x0c	; 12
    3702:	7c 93       	st	X, r23
    3704:	6e 93       	st	-X, r22
    3706:	1b 97       	sbiw	r26, 0x0b	; 11
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    INT8U  y;


    OSTCBCur->OSTCBEventPtr = pevent;            /* Store pointer to event control block in TCB        */
    3708:	17 96       	adiw	r26, 0x07	; 7
    370a:	1c 93       	st	X, r17
    370c:	0e 93       	st	-X, r16
    370e:	16 97       	sbiw	r26, 0x06	; 6
    y                       = OSTCBCur->OSTCBY;  /* Task no longer ready                               */
    OSRdyTbl[y]            &= ~OSTCBCur->OSTCBBitX;
    3710:	50 96       	adiw	r26, 0x10	; 16
    3712:	ec 91       	ld	r30, X
    3714:	50 97       	sbiw	r26, 0x10	; 16
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	e0 55       	subi	r30, 0x50	; 80
    371a:	fa 4f       	sbci	r31, 0xFA	; 250
    371c:	51 96       	adiw	r26, 0x11	; 17
    371e:	8c 91       	ld	r24, X
    3720:	51 97       	sbiw	r26, 0x11	; 17
    3722:	80 95       	com	r24
    3724:	90 81       	ld	r25, Z
    3726:	89 23       	and	r24, r25
    3728:	80 83       	st	Z, r24
    if (OSRdyTbl[y] == 0x00) {                   
    372a:	88 23       	and	r24, r24
    372c:	49 f4       	brne	.+18     	; 0x3740 <OSMutexPend+0x1f0>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;        /* Clear event grp bit if this was only task pending  */
    372e:	52 96       	adiw	r26, 0x12	; 18
    3730:	9c 91       	ld	r25, X
    3732:	52 97       	sbiw	r26, 0x12	; 18
    3734:	90 95       	com	r25
    3736:	80 91 af 05 	lds	r24, 0x05AF
    373a:	89 23       	and	r24, r25
    373c:	80 93 af 05 	sts	0x05AF, r24
    }
    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;          /* Put task in waiting list  */
    3740:	50 96       	adiw	r26, 0x10	; 16
    3742:	8c 91       	ld	r24, X
    3744:	50 97       	sbiw	r26, 0x10	; 16
    3746:	f8 01       	movw	r30, r16
    3748:	e8 0f       	add	r30, r24
    374a:	f1 1d       	adc	r31, r1
    374c:	86 81       	ldd	r24, Z+6	; 0x06
    374e:	51 96       	adiw	r26, 0x11	; 17
    3750:	9c 91       	ld	r25, X
    3752:	51 97       	sbiw	r26, 0x11	; 17
    3754:	89 2b       	or	r24, r25
    3756:	86 83       	std	Z+6, r24	; 0x06
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    3758:	f8 01       	movw	r30, r16
    375a:	81 81       	ldd	r24, Z+1	; 0x01
    375c:	52 96       	adiw	r26, 0x12	; 18
    375e:	9c 91       	ld	r25, X
    3760:	89 2b       	or	r24, r25
    3762:	81 83       	std	Z+1, r24	; 0x01
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    OS_EXIT_CRITICAL();
    3764:	0f 90       	pop	r0
    3766:	0f be       	out	0x3f, r0	; 63
    3768:	0f 90       	pop	r0
    OS_Sched();                                        /* Find next highest priority task ready         */
    376a:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <OS_Sched>
    OS_ENTER_CRITICAL();
    376e:	0f 92       	push	r0
    3770:	0f b6       	in	r0, 0x3f	; 63
    3772:	0f 92       	push	r0
    3774:	f8 94       	cli
    if (OSTCBCur->OSTCBStat & OS_STAT_MUTEX) {        /* Must have timed out if still waiting for event*/
    3776:	a0 91 b6 05 	lds	r26, 0x05B6
    377a:	b0 91 b7 05 	lds	r27, 0x05B7
    377e:	1d 96       	adiw	r26, 0x0d	; 13
    3780:	8c 91       	ld	r24, X
    3782:	1d 97       	sbiw	r26, 0x0d	; 13
    3784:	84 ff       	sbrs	r24, 4
    3786:	25 c0       	rjmp	.+74     	; 0x37d2 <OSMutexPend+0x282>
{
    INT8U  y;


    y                      = OSTCBCur->OSTCBY;
    pevent->OSEventTbl[y] &= ~OSTCBCur->OSTCBBitX;
    3788:	50 96       	adiw	r26, 0x10	; 16
    378a:	8c 91       	ld	r24, X
    378c:	50 97       	sbiw	r26, 0x10	; 16
    378e:	f8 01       	movw	r30, r16
    3790:	e8 0f       	add	r30, r24
    3792:	f1 1d       	adc	r31, r1
    3794:	51 96       	adiw	r26, 0x11	; 17
    3796:	8c 91       	ld	r24, X
    3798:	51 97       	sbiw	r26, 0x11	; 17
    379a:	80 95       	com	r24
    379c:	96 81       	ldd	r25, Z+6	; 0x06
    379e:	89 23       	and	r24, r25
    37a0:	86 83       	std	Z+6, r24	; 0x06
    if (pevent->OSEventTbl[y] == 0x00) {
    37a2:	88 23       	and	r24, r24
    37a4:	41 f4       	brne	.+16     	; 0x37b6 <OSMutexPend+0x266>
        pevent->OSEventGrp &= ~OSTCBCur->OSTCBBitY;
    37a6:	52 96       	adiw	r26, 0x12	; 18
    37a8:	9c 91       	ld	r25, X
    37aa:	52 97       	sbiw	r26, 0x12	; 18
    37ac:	90 95       	com	r25
    37ae:	f8 01       	movw	r30, r16
    37b0:	81 81       	ldd	r24, Z+1	; 0x01
    37b2:	89 23       	and	r24, r25
    37b4:	81 83       	std	Z+1, r24	; 0x01
    }
    OSTCBCur->OSTCBStat     = OS_STAT_RDY;       /* Set status to ready                                */
    37b6:	1d 96       	adiw	r26, 0x0d	; 13
    37b8:	1c 92       	st	X, r1
    37ba:	1d 97       	sbiw	r26, 0x0d	; 13
    OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;     /* No longer waiting for event                        */
    37bc:	17 96       	adiw	r26, 0x07	; 7
    37be:	1c 92       	st	X, r1
    37c0:	1e 92       	st	-X, r1
    37c2:	16 97       	sbiw	r26, 0x06	; 6
        OS_EventTO(pevent);
        OS_EXIT_CRITICAL();
    37c4:	0f 90       	pop	r0
    37c6:	0f be       	out	0x3f, r0	; 63
    37c8:	0f 90       	pop	r0
        *err = OS_TIMEOUT;                            /* Indicate that we didn't get mutex within TO   */
    37ca:	8a e0       	ldi	r24, 0x0A	; 10
    37cc:	d7 01       	movw	r26, r14
    37ce:	8c 93       	st	X, r24
    37d0:	09 c0       	rjmp	.+18     	; 0x37e4 <OSMutexPend+0x294>
        return;
    }
    OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;
    37d2:	17 96       	adiw	r26, 0x07	; 7
    37d4:	1c 92       	st	X, r1
    37d6:	1e 92       	st	-X, r1
    37d8:	16 97       	sbiw	r26, 0x06	; 6
    OS_EXIT_CRITICAL();
    37da:	0f 90       	pop	r0
    37dc:	0f be       	out	0x3f, r0	; 63
    37de:	0f 90       	pop	r0
    *err = OS_NO_ERR;
    37e0:	f7 01       	movw	r30, r14
    37e2:	10 82       	st	Z, r1
}
    37e4:	df 91       	pop	r29
    37e6:	cf 91       	pop	r28
    37e8:	1f 91       	pop	r17
    37ea:	0f 91       	pop	r16
    37ec:	ff 90       	pop	r15
    37ee:	ef 90       	pop	r14
    37f0:	08 95       	ret

000037f2 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *msg, INT8U opt)
{
    37f2:	0f 93       	push	r16
    37f4:	1f 93       	push	r17
    37f6:	cf 93       	push	r28
    37f8:	df 93       	push	r29
    37fa:	ec 01       	movw	r28, r24
    37fc:	8b 01       	movw	r16, r22
    }
    if (msg == (void *)0) {                           /* Make sure we are not posting a NULL pointer   */
        return (OS_ERR_POST_NULL_PTR);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    37fe:	88 81       	ld	r24, Y
    3800:	81 30       	cpi	r24, 0x01	; 1
    3802:	11 f0       	breq	.+4      	; 0x3808 <OSMboxPostOpt+0x16>
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	2c c0       	rjmp	.+88     	; 0x3860 <OSMboxPostOpt+0x6e>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    3808:	0f 92       	push	r0
    380a:	0f b6       	in	r0, 0x3f	; 63
    380c:	0f 92       	push	r0
    380e:	f8 94       	cli
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on mailbox            */
    3810:	89 81       	ldd	r24, Y+1	; 0x01
    3812:	88 23       	and	r24, r24
    3814:	b1 f0       	breq	.+44     	; 0x3842 <OSMboxPostOpt+0x50>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    3816:	40 fd       	sbrc	r20, 0
    3818:	06 c0       	rjmp	.+12     	; 0x3826 <OSMboxPostOpt+0x34>
    381a:	09 c0       	rjmp	.+18     	; 0x382e <OSMboxPostOpt+0x3c>
            while (pevent->OSEventGrp != 0x00) {      /* Yes, Post to ALL tasks waiting on mailbox     */           
                OS_EventTaskRdy(pevent, msg, OS_STAT_MBOX);    
    381c:	ce 01       	movw	r24, r28
    381e:	b8 01       	movw	r22, r16
    3820:	42 e0       	ldi	r20, 0x02	; 2
    3822:	0e 94 34 11 	call	0x2268	; 0x2268 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0x00) {      /* Yes, Post to ALL tasks waiting on mailbox     */           
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	88 23       	and	r24, r24
    382a:	c1 f7       	brne	.-16     	; 0x381c <OSMboxPostOpt+0x2a>
    382c:	04 c0       	rjmp	.+8      	; 0x3836 <OSMboxPostOpt+0x44>
                OS_EventTaskRdy(pevent, msg, OS_STAT_MBOX);    
            }
        } else {
            OS_EventTaskRdy(pevent, msg, OS_STAT_MBOX);    /* No,  Post to HPT waiting on mbox         */
    382e:	ce 01       	movw	r24, r28
    3830:	42 e0       	ldi	r20, 0x02	; 2
    3832:	0e 94 34 11 	call	0x2268	; 0x2268 <OS_EventTaskRdy>
        }
        OS_EXIT_CRITICAL();
    3836:	0f 90       	pop	r0
    3838:	0f be       	out	0x3f, r0	; 63
    383a:	0f 90       	pop	r0
        OS_Sched();                                        /* Find highest priority task ready to run  */
    383c:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <OS_Sched>
    3840:	0e c0       	rjmp	.+28     	; 0x385e <OSMboxPostOpt+0x6c>
        return (OS_NO_ERR);
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
    3842:	8c 81       	ldd	r24, Y+4	; 0x04
    3844:	9d 81       	ldd	r25, Y+5	; 0x05
    3846:	89 2b       	or	r24, r25
    3848:	29 f0       	breq	.+10     	; 0x3854 <OSMboxPostOpt+0x62>
        OS_EXIT_CRITICAL();
    384a:	0f 90       	pop	r0
    384c:	0f be       	out	0x3f, r0	; 63
    384e:	0f 90       	pop	r0
    3850:	84 e1       	ldi	r24, 0x14	; 20
    3852:	06 c0       	rjmp	.+12     	; 0x3860 <OSMboxPostOpt+0x6e>
        return (OS_MBOX_FULL);
    }
    pevent->OSEventPtr = msg;                         /* Place message in mailbox                      */
    3854:	7d 83       	std	Y+5, r23	; 0x05
    3856:	6c 83       	std	Y+4, r22	; 0x04
    OS_EXIT_CRITICAL();
    3858:	0f 90       	pop	r0
    385a:	0f be       	out	0x3f, r0	; 63
    385c:	0f 90       	pop	r0
    385e:	80 e0       	ldi	r24, 0x00	; 0
    return (OS_NO_ERR);
}
    3860:	df 91       	pop	r29
    3862:	cf 91       	pop	r28
    3864:	1f 91       	pop	r17
    3866:	0f 91       	pop	r16
    3868:	08 95       	ret

0000386a <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *msg)
{
    386a:	fc 01       	movw	r30, r24
    }
    if (msg == (void *)0) {                           /* Make sure we are not posting a NULL pointer   */
        return (OS_ERR_POST_NULL_PTR);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    386c:	80 81       	ld	r24, Z
    386e:	81 30       	cpi	r24, 0x01	; 1
    3870:	11 f0       	breq	.+4      	; 0x3876 <OSMboxPost+0xc>
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	08 95       	ret
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    3876:	0f 92       	push	r0
    3878:	0f b6       	in	r0, 0x3f	; 63
    387a:	0f 92       	push	r0
    387c:	f8 94       	cli
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on mailbox            */
    387e:	81 81       	ldd	r24, Z+1	; 0x01
    3880:	88 23       	and	r24, r24
    3882:	59 f0       	breq	.+22     	; 0x389a <OSMboxPost+0x30>
        OS_EventTaskRdy(pevent, msg, OS_STAT_MBOX);   /* Ready highest priority task waiting on event  */
    3884:	cf 01       	movw	r24, r30
    3886:	42 e0       	ldi	r20, 0x02	; 2
    3888:	0e 94 34 11 	call	0x2268	; 0x2268 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
    388c:	0f 90       	pop	r0
    388e:	0f be       	out	0x3f, r0	; 63
    3890:	0f 90       	pop	r0
        OS_Sched();                                   /* Find highest priority task ready to run       */
    3892:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <OS_Sched>
    3896:	80 e0       	ldi	r24, 0x00	; 0
    3898:	08 95       	ret
        return (OS_NO_ERR);
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
    389a:	84 81       	ldd	r24, Z+4	; 0x04
    389c:	95 81       	ldd	r25, Z+5	; 0x05
    389e:	89 2b       	or	r24, r25
    38a0:	29 f0       	breq	.+10     	; 0x38ac <OSMboxPost+0x42>
        OS_EXIT_CRITICAL();
    38a2:	0f 90       	pop	r0
    38a4:	0f be       	out	0x3f, r0	; 63
    38a6:	0f 90       	pop	r0
    38a8:	84 e1       	ldi	r24, 0x14	; 20
    38aa:	08 95       	ret
        return (OS_MBOX_FULL);
    }
    pevent->OSEventPtr = msg;                         /* Place message in mailbox                      */
    38ac:	75 83       	std	Z+5, r23	; 0x05
    38ae:	64 83       	std	Z+4, r22	; 0x04
    OS_EXIT_CRITICAL();
    38b0:	0f 90       	pop	r0
    38b2:	0f be       	out	0x3f, r0	; 63
    38b4:	0f 90       	pop	r0
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    return (OS_NO_ERR);
}
    38b8:	08 95       	ret

000038ba <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/

void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *err)
{
    38ba:	0f 93       	push	r16
    38bc:	1f 93       	push	r17
    38be:	cf 93       	push	r28
    38c0:	df 93       	push	r29
    38c2:	ec 01       	movw	r28, r24
    38c4:	8a 01       	movw	r16, r20
    OS_CPU_SR  cpu_sr;
#endif    
    void      *msg;


    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    38c6:	80 91 b5 05 	lds	r24, 0x05B5
    38ca:	88 23       	and	r24, r24
    38cc:	11 f0       	breq	.+4      	; 0x38d2 <OSMboxPend+0x18>
        *err = OS_ERR_PEND_ISR;                       /* ... can't PEND from an ISR                    */
    38ce:	82 e0       	ldi	r24, 0x02	; 2
    38d0:	04 c0       	rjmp	.+8      	; 0x38da <OSMboxPend+0x20>
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *err = OS_ERR_PEVENT_NULL;
        return ((void *)0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    38d2:	88 81       	ld	r24, Y
    38d4:	81 30       	cpi	r24, 0x01	; 1
    38d6:	31 f0       	breq	.+12     	; 0x38e4 <OSMboxPend+0x2a>
        *err = OS_ERR_EVENT_TYPE;
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	f8 01       	movw	r30, r16
    38dc:	80 83       	st	Z, r24
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	90 c0       	rjmp	.+288    	; 0x3a04 <OSMboxPend+0x14a>
        return ((void *)0);
    }
    OS_ENTER_CRITICAL();
    38e4:	0f 92       	push	r0
    38e6:	0f b6       	in	r0, 0x3f	; 63
    38e8:	0f 92       	push	r0
    38ea:	f8 94       	cli
    msg = pevent->OSEventPtr;
    38ec:	2c 81       	ldd	r18, Y+4	; 0x04
    38ee:	3d 81       	ldd	r19, Y+5	; 0x05
    if (msg != (void *)0) {                           /* See if there is already a message             */
    38f0:	21 15       	cp	r18, r1
    38f2:	31 05       	cpc	r19, r1
    38f4:	31 f0       	breq	.+12     	; 0x3902 <OSMboxPend+0x48>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
    38f6:	1d 82       	std	Y+5, r1	; 0x05
    38f8:	1c 82       	std	Y+4, r1	; 0x04
        OS_EXIT_CRITICAL();
    38fa:	0f 90       	pop	r0
    38fc:	0f be       	out	0x3f, r0	; 63
    38fe:	0f 90       	pop	r0
    3900:	5b c0       	rjmp	.+182    	; 0x39b8 <OSMboxPend+0xfe>
        *err = OS_NO_ERR;
        return (msg);                                 /* Return the message received (or NULL)         */
    }
    OSTCBCur->OSTCBStat |= OS_STAT_MBOX;              /* Message not available, task will pend         */
    3902:	a0 91 b6 05 	lds	r26, 0x05B6
    3906:	b0 91 b7 05 	lds	r27, 0x05B7
    390a:	1d 96       	adiw	r26, 0x0d	; 13
    390c:	8c 91       	ld	r24, X
    390e:	1d 97       	sbiw	r26, 0x0d	; 13
    3910:	82 60       	ori	r24, 0x02	; 2
    3912:	1d 96       	adiw	r26, 0x0d	; 13
    3914:	8c 93       	st	X, r24
    3916:	1d 97       	sbiw	r26, 0x0d	; 13
    OSTCBCur->OSTCBDly   = timeout;                   /* Load timeout in TCB                           */
    3918:	1c 96       	adiw	r26, 0x0c	; 12
    391a:	7c 93       	st	X, r23
    391c:	6e 93       	st	-X, r22
    391e:	1b 97       	sbiw	r26, 0x0b	; 11
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    INT8U  y;


    OSTCBCur->OSTCBEventPtr = pevent;            /* Store pointer to event control block in TCB        */
    3920:	17 96       	adiw	r26, 0x07	; 7
    3922:	dc 93       	st	X, r29
    3924:	ce 93       	st	-X, r28
    3926:	16 97       	sbiw	r26, 0x06	; 6
    y                       = OSTCBCur->OSTCBY;  /* Task no longer ready                               */
    OSRdyTbl[y]            &= ~OSTCBCur->OSTCBBitX;
    3928:	50 96       	adiw	r26, 0x10	; 16
    392a:	8c 91       	ld	r24, X
    392c:	50 97       	sbiw	r26, 0x10	; 16
    392e:	28 2f       	mov	r18, r24
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	51 96       	adiw	r26, 0x11	; 17
    3934:	4c 91       	ld	r20, X
    3936:	51 97       	sbiw	r26, 0x11	; 17
    3938:	f9 01       	movw	r30, r18
    393a:	e0 55       	subi	r30, 0x50	; 80
    393c:	fa 4f       	sbci	r31, 0xFA	; 250
    393e:	84 2f       	mov	r24, r20
    3940:	80 95       	com	r24
    3942:	90 81       	ld	r25, Z
    3944:	89 23       	and	r24, r25
    3946:	80 83       	st	Z, r24
    if (OSRdyTbl[y] == 0x00) {                   
    3948:	88 23       	and	r24, r24
    394a:	49 f4       	brne	.+18     	; 0x395e <OSMboxPend+0xa4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;        /* Clear event grp bit if this was only task pending  */
    394c:	52 96       	adiw	r26, 0x12	; 18
    394e:	9c 91       	ld	r25, X
    3950:	52 97       	sbiw	r26, 0x12	; 18
    3952:	90 95       	com	r25
    3954:	80 91 af 05 	lds	r24, 0x05AF
    3958:	89 23       	and	r24, r25
    395a:	80 93 af 05 	sts	0x05AF, r24
    }
    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;          /* Put task in waiting list  */
    395e:	fe 01       	movw	r30, r28
    3960:	e2 0f       	add	r30, r18
    3962:	f3 1f       	adc	r31, r19
    3964:	86 81       	ldd	r24, Z+6	; 0x06
    3966:	84 2b       	or	r24, r20
    3968:	86 83       	std	Z+6, r24	; 0x06
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    396a:	89 81       	ldd	r24, Y+1	; 0x01
    396c:	52 96       	adiw	r26, 0x12	; 18
    396e:	9c 91       	ld	r25, X
    3970:	89 2b       	or	r24, r25
    3972:	89 83       	std	Y+1, r24	; 0x01
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    OS_EXIT_CRITICAL();
    3974:	0f 90       	pop	r0
    3976:	0f be       	out	0x3f, r0	; 63
    3978:	0f 90       	pop	r0
    OS_Sched();                                       /* Find next highest priority task ready to run  */
    397a:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <OS_Sched>
    OS_ENTER_CRITICAL();
    397e:	0f 92       	push	r0
    3980:	0f b6       	in	r0, 0x3f	; 63
    3982:	0f 92       	push	r0
    3984:	f8 94       	cli
    msg = OSTCBCur->OSTCBMsg;
    3986:	a0 91 b6 05 	lds	r26, 0x05B6
    398a:	b0 91 b7 05 	lds	r27, 0x05B7
    398e:	18 96       	adiw	r26, 0x08	; 8
    3990:	2d 91       	ld	r18, X+
    3992:	3c 91       	ld	r19, X
    3994:	19 97       	sbiw	r26, 0x09	; 9
    if (msg != (void *)0) {                           /* See if we were given the message              */
    3996:	21 15       	cp	r18, r1
    3998:	31 05       	cpc	r19, r1
    399a:	89 f0       	breq	.+34     	; 0x39be <OSMboxPend+0x104>
        OSTCBCur->OSTCBMsg      = (void *)0;          /* Yes, clear message received                   */
    399c:	19 96       	adiw	r26, 0x09	; 9
    399e:	1c 92       	st	X, r1
    39a0:	1e 92       	st	-X, r1
    39a2:	18 97       	sbiw	r26, 0x08	; 8
        OSTCBCur->OSTCBStat     = OS_STAT_RDY;
    39a4:	1d 96       	adiw	r26, 0x0d	; 13
    39a6:	1c 92       	st	X, r1
    39a8:	1d 97       	sbiw	r26, 0x0d	; 13
        OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;      /* No longer waiting for event                   */
    39aa:	17 96       	adiw	r26, 0x07	; 7
    39ac:	1c 92       	st	X, r1
    39ae:	1e 92       	st	-X, r1
    39b0:	16 97       	sbiw	r26, 0x06	; 6
        OS_EXIT_CRITICAL();
    39b2:	0f 90       	pop	r0
    39b4:	0f be       	out	0x3f, r0	; 63
    39b6:	0f 90       	pop	r0
        *err                    = OS_NO_ERR;
    39b8:	f8 01       	movw	r30, r16
    39ba:	10 82       	st	Z, r1
    39bc:	23 c0       	rjmp	.+70     	; 0x3a04 <OSMboxPend+0x14a>
{
    INT8U  y;


    y                      = OSTCBCur->OSTCBY;
    pevent->OSEventTbl[y] &= ~OSTCBCur->OSTCBBitX;
    39be:	50 96       	adiw	r26, 0x10	; 16
    39c0:	8c 91       	ld	r24, X
    39c2:	50 97       	sbiw	r26, 0x10	; 16
    39c4:	fe 01       	movw	r30, r28
    39c6:	e8 0f       	add	r30, r24
    39c8:	f1 1d       	adc	r31, r1
    39ca:	51 96       	adiw	r26, 0x11	; 17
    39cc:	8c 91       	ld	r24, X
    39ce:	51 97       	sbiw	r26, 0x11	; 17
    39d0:	80 95       	com	r24
    39d2:	96 81       	ldd	r25, Z+6	; 0x06
    39d4:	89 23       	and	r24, r25
    39d6:	86 83       	std	Z+6, r24	; 0x06
    if (pevent->OSEventTbl[y] == 0x00) {
    39d8:	88 23       	and	r24, r24
    39da:	39 f4       	brne	.+14     	; 0x39ea <OSMboxPend+0x130>
        pevent->OSEventGrp &= ~OSTCBCur->OSTCBBitY;
    39dc:	52 96       	adiw	r26, 0x12	; 18
    39de:	9c 91       	ld	r25, X
    39e0:	52 97       	sbiw	r26, 0x12	; 18
    39e2:	90 95       	com	r25
    39e4:	89 81       	ldd	r24, Y+1	; 0x01
    39e6:	89 23       	and	r24, r25
    39e8:	89 83       	std	Y+1, r24	; 0x01
    }
    OSTCBCur->OSTCBStat     = OS_STAT_RDY;       /* Set status to ready                                */
    39ea:	1d 96       	adiw	r26, 0x0d	; 13
    39ec:	1c 92       	st	X, r1
    39ee:	1d 97       	sbiw	r26, 0x0d	; 13
    OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;     /* No longer waiting for event                        */
    39f0:	17 96       	adiw	r26, 0x07	; 7
    39f2:	1c 92       	st	X, r1
    39f4:	1e 92       	st	-X, r1
    39f6:	16 97       	sbiw	r26, 0x06	; 6
        return (msg);                                 /* Return the message received                   */
    }
    OS_EventTO(pevent);                               /* Timed out, Make task ready                    */
    OS_EXIT_CRITICAL();
    39f8:	0f 90       	pop	r0
    39fa:	0f be       	out	0x3f, r0	; 63
    39fc:	0f 90       	pop	r0
    *err = OS_TIMEOUT;                                /* Indicate that a timeout occured               */
    39fe:	8a e0       	ldi	r24, 0x0A	; 10
    3a00:	f8 01       	movw	r30, r16
    3a02:	80 83       	st	Z, r24
    return ((void *)0);                               /* Return a NULL message                         */
}
    3a04:	c9 01       	movw	r24, r18
    3a06:	df 91       	pop	r29
    3a08:	cf 91       	pop	r28
    3a0a:	1f 91       	pop	r17
    3a0c:	0f 91       	pop	r16
    3a0e:	08 95       	ret

00003a10 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *err)
{
    3a10:	cf 92       	push	r12
    3a12:	df 92       	push	r13
    3a14:	ef 92       	push	r14
    3a16:	ff 92       	push	r15
    3a18:	0f 93       	push	r16
    3a1a:	1f 93       	push	r17
    3a1c:	df 93       	push	r29
    3a1e:	cf 93       	push	r28
    3a20:	0f 92       	push	r0
    3a22:	cd b7       	in	r28, 0x3d	; 61
    3a24:	de b7       	in	r29, 0x3e	; 62
    3a26:	8c 01       	movw	r16, r24
    3a28:	79 01       	movw	r14, r18
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
        *err = OS_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    3a2a:	fc 01       	movw	r30, r24
    3a2c:	80 81       	ld	r24, Z
    3a2e:	85 30       	cpi	r24, 0x05	; 5
    3a30:	11 f0       	breq	.+4      	; 0x3a36 <OSFlagPost+0x26>
        *err = OS_ERR_EVENT_TYPE;
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	1b c0       	rjmp	.+54     	; 0x3a6c <OSFlagPost+0x5c>
        return ((OS_FLAGS)0);
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    3a36:	0f 92       	push	r0
    3a38:	0f b6       	in	r0, 0x3f	; 63
    3a3a:	0f 92       	push	r0
    3a3c:	f8 94       	cli
    switch (opt) {
    3a3e:	44 23       	and	r20, r20
    3a40:	19 f0       	breq	.+6      	; 0x3a48 <OSFlagPost+0x38>
    3a42:	41 30       	cpi	r20, 0x01	; 1
    3a44:	79 f4       	brne	.+30     	; 0x3a64 <OSFlagPost+0x54>
    3a46:	05 c0       	rjmp	.+10     	; 0x3a52 <OSFlagPost+0x42>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    3a48:	60 95       	com	r22
    3a4a:	f8 01       	movw	r30, r16
    3a4c:	83 81       	ldd	r24, Z+3	; 0x03
    3a4e:	86 23       	and	r24, r22
    3a50:	03 c0       	rjmp	.+6      	; 0x3a58 <OSFlagPost+0x48>
             break;

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    3a52:	f8 01       	movw	r30, r16
    3a54:	83 81       	ldd	r24, Z+3	; 0x03
    3a56:	86 2b       	or	r24, r22
    3a58:	83 83       	std	Z+3, r24	; 0x03
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *err = OS_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = FALSE;                                   /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    3a5a:	f8 01       	movw	r30, r16
    3a5c:	c1 80       	ldd	r12, Z+1	; 0x01
    3a5e:	d2 80       	ldd	r13, Z+2	; 0x02
    3a60:	19 82       	std	Y+1, r1	; 0x01
    3a62:	3f c0       	rjmp	.+126    	; 0x3ae2 <OSFlagPost+0xd2>
        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
             break;

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
    3a64:	0f 90       	pop	r0
    3a66:	0f be       	out	0x3f, r0	; 63
    3a68:	0f 90       	pop	r0
             *err = OS_FLAG_INVALID_OPT;
    3a6a:	89 e9       	ldi	r24, 0x99	; 153
    3a6c:	f7 01       	movw	r30, r14
    3a6e:	80 83       	st	Z, r24
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	4d c0       	rjmp	.+154    	; 0x3b0e <OSFlagPost+0xfe>
             return ((OS_FLAGS)0);
    }
    sched = FALSE;                                   /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
        switch (pnode->OSFlagNodeWaitType) {
    3a74:	f6 01       	movw	r30, r12
    3a76:	81 85       	ldd	r24, Z+9	; 0x09
    3a78:	81 30       	cpi	r24, 0x01	; 1
    3a7a:	d1 f0       	breq	.+52     	; 0x3ab0 <OSFlagPost+0xa0>
    3a7c:	81 30       	cpi	r24, 0x01	; 1
    3a7e:	78 f0       	brcs	.+30     	; 0x3a9e <OSFlagPost+0x8e>
    3a80:	82 30       	cpi	r24, 0x02	; 2
    3a82:	19 f0       	breq	.+6      	; 0x3a8a <OSFlagPost+0x7a>
    3a84:	83 30       	cpi	r24, 0x03	; 3
    3a86:	09 f5       	brne	.+66     	; 0x3aca <OSFlagPost+0xba>
    3a88:	05 c0       	rjmp	.+10     	; 0x3a94 <OSFlagPost+0x84>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
    3a8a:	f6 01       	movw	r30, r12
    3a8c:	80 85       	ldd	r24, Z+8	; 0x08
    3a8e:	f8 01       	movw	r30, r16
    3a90:	63 81       	ldd	r22, Z+3	; 0x03
    3a92:	0a c0       	rjmp	.+20     	; 0x3aa8 <OSFlagPost+0x98>
                     }
                 }
                 break;

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
    3a94:	f6 01       	movw	r30, r12
    3a96:	60 85       	ldd	r22, Z+8	; 0x08
    3a98:	f8 01       	movw	r30, r16
    3a9a:	83 81       	ldd	r24, Z+3	; 0x03
    3a9c:	0e c0       	rjmp	.+28     	; 0x3aba <OSFlagPost+0xaa>
                 }
                 break;

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = ~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
    3a9e:	f6 01       	movw	r30, r12
    3aa0:	80 85       	ldd	r24, Z+8	; 0x08
    3aa2:	f8 01       	movw	r30, r16
    3aa4:	63 81       	ldd	r22, Z+3	; 0x03
    3aa6:	60 95       	com	r22
    3aa8:	68 23       	and	r22, r24
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    3aaa:	68 17       	cp	r22, r24
    3aac:	a9 f4       	brne	.+42     	; 0x3ad8 <OSFlagPost+0xc8>
    3aae:	07 c0       	rjmp	.+14     	; 0x3abe <OSFlagPost+0xae>
                     }
                 }
                 break;

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = ~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
    3ab0:	f8 01       	movw	r30, r16
    3ab2:	63 81       	ldd	r22, Z+3	; 0x03
    3ab4:	60 95       	com	r22
    3ab6:	f6 01       	movw	r30, r12
    3ab8:	80 85       	ldd	r24, Z+8	; 0x08
    3aba:	68 23       	and	r22, r24
                 if (flags_rdy != (OS_FLAGS)0) {
    3abc:	69 f0       	breq	.+26     	; 0x3ad8 <OSFlagPost+0xc8>
				     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    3abe:	c6 01       	movw	r24, r12
    3ac0:	0e 94 a7 12 	call	0x254e	; 0x254e <OS_FlagTaskRdy>
                     if (rdy == TRUE) {                       
    3ac4:	81 30       	cpi	r24, 0x01	; 1
    3ac6:	41 f4       	brne	.+16     	; 0x3ad8 <OSFlagPost+0xc8>
    3ac8:	05 c0       	rjmp	.+10     	; 0x3ad4 <OSFlagPost+0xc4>
                     }
                 }
                 break;
#endif
            default:
                 OS_EXIT_CRITICAL();
    3aca:	0f 90       	pop	r0
    3acc:	0f be       	out	0x3f, r0	; 63
    3ace:	0f 90       	pop	r0
                 *err = OS_FLAG_ERR_WAIT_TYPE;
    3ad0:	87 e9       	ldi	r24, 0x97	; 151
    3ad2:	cc cf       	rjmp	.-104    	; 0x3a6c <OSFlagPost+0x5c>
                 return ((OS_FLAGS)0);
    3ad4:	f1 e0       	ldi	r31, 0x01	; 1
    3ad6:	f9 83       	std	Y+1, r31	; 0x01
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    3ad8:	f6 01       	movw	r30, r12
    3ada:	80 81       	ld	r24, Z
    3adc:	91 81       	ldd	r25, Z+1	; 0x01
    3ade:	9c 01       	movw	r18, r24
    3ae0:	69 01       	movw	r12, r18
             *err = OS_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = FALSE;                                   /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    3ae2:	c1 14       	cp	r12, r1
    3ae4:	d1 04       	cpc	r13, r1
    3ae6:	31 f6       	brne	.-116    	; 0x3a74 <OSFlagPost+0x64>
                 *err = OS_FLAG_ERR_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    3ae8:	0f 90       	pop	r0
    3aea:	0f be       	out	0x3f, r0	; 63
    3aec:	0f 90       	pop	r0
    if (sched == TRUE) {
    3aee:	f9 81       	ldd	r31, Y+1	; 0x01
    3af0:	f1 30       	cpi	r31, 0x01	; 1
    3af2:	11 f4       	brne	.+4      	; 0x3af8 <OSFlagPost+0xe8>
        OS_Sched();
    3af4:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <OS_Sched>
    }
    OS_ENTER_CRITICAL();
    3af8:	0f 92       	push	r0
    3afa:	0f b6       	in	r0, 0x3f	; 63
    3afc:	0f 92       	push	r0
    3afe:	f8 94       	cli
    flags_cur = pgrp->OSFlagFlags;
    3b00:	f8 01       	movw	r30, r16
    3b02:	83 81       	ldd	r24, Z+3	; 0x03
    OS_EXIT_CRITICAL();
    3b04:	0f 90       	pop	r0
    3b06:	0f be       	out	0x3f, r0	; 63
    3b08:	0f 90       	pop	r0
    *err      = OS_NO_ERR;
    3b0a:	f7 01       	movw	r30, r14
    3b0c:	10 82       	st	Z, r1
    return (flags_cur);
}
    3b0e:	0f 90       	pop	r0
    3b10:	cf 91       	pop	r28
    3b12:	df 91       	pop	r29
    3b14:	1f 91       	pop	r17
    3b16:	0f 91       	pop	r16
    3b18:	ff 90       	pop	r15
    3b1a:	ef 90       	pop	r14
    3b1c:	df 90       	pop	r13
    3b1e:	cf 90       	pop	r12
    3b20:	08 95       	ret

00003b22 <OSFlagPend>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *err)
{
    3b22:	df 92       	push	r13
    3b24:	ef 92       	push	r14
    3b26:	ff 92       	push	r15
    3b28:	0f 93       	push	r16
    3b2a:	1f 93       	push	r17
    3b2c:	df 93       	push	r29
    3b2e:	cf 93       	push	r28
    3b30:	cd b7       	in	r28, 0x3d	; 61
    3b32:	de b7       	in	r29, 0x3e	; 62
    3b34:	2b 97       	sbiw	r28, 0x0b	; 11
    3b36:	0f b6       	in	r0, 0x3f	; 63
    3b38:	f8 94       	cli
    3b3a:	de bf       	out	0x3e, r29	; 62
    3b3c:	0f be       	out	0x3f, r0	; 63
    3b3e:	cd bf       	out	0x3d, r28	; 61
    3b40:	7c 01       	movw	r14, r24
    3b42:	d4 2e       	mov	r13, r20
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       consume;


    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    3b44:	80 91 b5 05 	lds	r24, 0x05B5
    3b48:	88 23       	and	r24, r24
    3b4a:	11 f0       	breq	.+4      	; 0x3b50 <OSFlagPend+0x2e>
        *err = OS_ERR_PEND_ISR;                            /* ... can't PEND from an ISR               */
    3b4c:	82 e0       	ldi	r24, 0x02	; 2
    3b4e:	05 c0       	rjmp	.+10     	; 0x3b5a <OSFlagPend+0x38>
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *err = OS_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    3b50:	f7 01       	movw	r30, r14
    3b52:	80 81       	ld	r24, Z
    3b54:	85 30       	cpi	r24, 0x05	; 5
    3b56:	29 f0       	breq	.+10     	; 0x3b62 <OSFlagPend+0x40>
        *err = OS_ERR_EVENT_TYPE;
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	d8 01       	movw	r26, r16
    3b5c:	8c 93       	st	X, r24
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	e3 c1       	rjmp	.+966    	; 0x3f28 <OSFlagPend+0x406>
        return ((OS_FLAGS)0);
    }
    if (wait_type & OS_FLAG_CONSUME) {                     /* See if we need to consume the flags      */
    3b62:	47 fd       	sbrc	r20, 7
    3b64:	02 c0       	rjmp	.+4      	; 0x3b6a <OSFlagPend+0x48>
    3b66:	1b 86       	std	Y+11, r1	; 0x0b
    3b68:	04 c0       	rjmp	.+8      	; 0x3b72 <OSFlagPend+0x50>
        wait_type &= ~OS_FLAG_CONSUME;
    3b6a:	bf e7       	ldi	r27, 0x7F	; 127
    3b6c:	db 22       	and	r13, r27
    3b6e:	e1 e0       	ldi	r30, 0x01	; 1
    3b70:	eb 87       	std	Y+11, r30	; 0x0b
        consume    = TRUE;
    } else {
        consume    = FALSE;
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    3b72:	0f 92       	push	r0
    3b74:	0f b6       	in	r0, 0x3f	; 63
    3b76:	0f 92       	push	r0
    3b78:	f8 94       	cli
    switch (wait_type) {
    3b7a:	f1 e0       	ldi	r31, 0x01	; 1
    3b7c:	df 16       	cp	r13, r31
    3b7e:	09 f4       	brne	.+2      	; 0x3b82 <OSFlagPend+0x60>
    3b80:	1c c1       	rjmp	.+568    	; 0x3dba <OSFlagPend+0x298>
    3b82:	df 16       	cp	r13, r31
    3b84:	08 f4       	brcc	.+2      	; 0x3b88 <OSFlagPend+0x66>
    3b86:	be c0       	rjmp	.+380    	; 0x3d04 <OSFlagPend+0x1e2>
    3b88:	82 e0       	ldi	r24, 0x02	; 2
    3b8a:	d8 16       	cp	r13, r24
    3b8c:	29 f0       	breq	.+10     	; 0x3b98 <OSFlagPend+0x76>
    3b8e:	a3 e0       	ldi	r26, 0x03	; 3
    3b90:	da 16       	cp	r13, r26
    3b92:	09 f0       	breq	.+2      	; 0x3b96 <OSFlagPend+0x74>
    3b94:	6c c1       	rjmp	.+728    	; 0x3e6e <OSFlagPend+0x34c>
    3b96:	5c c0       	rjmp	.+184    	; 0x3c50 <OSFlagPend+0x12e>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = pgrp->OSFlagFlags & flags;        /* Extract only the bits we want            */
    3b98:	f7 01       	movw	r30, r14
    3b9a:	93 81       	ldd	r25, Z+3	; 0x03
    3b9c:	86 2f       	mov	r24, r22
    3b9e:	89 23       	and	r24, r25
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    3ba0:	86 17       	cp	r24, r22
    3ba2:	81 f4       	brne	.+32     	; 0x3bc4 <OSFlagPend+0xa2>
                 if (consume == TRUE) {                    /* See if we need to consume the flags      */
    3ba4:	fb 85       	ldd	r31, Y+11	; 0x0b
    3ba6:	f1 30       	cpi	r31, 0x01	; 1
    3ba8:	29 f4       	brne	.+10     	; 0x3bb4 <OSFlagPend+0x92>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    3baa:	60 95       	com	r22
    3bac:	96 23       	and	r25, r22
    3bae:	d7 01       	movw	r26, r14
    3bb0:	13 96       	adiw	r26, 0x03	; 3
    3bb2:	9c 93       	st	X, r25
                 }
                 flags_cur = pgrp->OSFlagFlags;            /* Will return the state of the group       */
    3bb4:	f7 01       	movw	r30, r14
    3bb6:	83 81       	ldd	r24, Z+3	; 0x03
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
    3bb8:	0f 90       	pop	r0
    3bba:	0f be       	out	0x3f, r0	; 63
    3bbc:	0f 90       	pop	r0
                 *err      = OS_NO_ERR;
    3bbe:	d8 01       	movw	r26, r16
    3bc0:	1c 92       	st	X, r1
    3bc2:	b2 c1       	rjmp	.+868    	; 0x3f28 <OSFlagPend+0x406>
{
    OS_FLAG_NODE  *pnode_next;
	INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    3bc4:	e0 91 b6 05 	lds	r30, 0x05B6
    3bc8:	f0 91 b7 05 	lds	r31, 0x05B7
    3bcc:	85 85       	ldd	r24, Z+13	; 0x0d
    3bce:	80 62       	ori	r24, 0x20	; 32
    3bd0:	85 87       	std	Z+13, r24	; 0x0d
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    3bd2:	e0 91 b6 05 	lds	r30, 0x05B6
    3bd6:	f0 91 b7 05 	lds	r31, 0x05B7
    3bda:	34 87       	std	Z+12, r19	; 0x0c
    3bdc:	23 87       	std	Z+11, r18	; 0x0b
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    3bde:	69 87       	std	Y+9, r22	; 0x09
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    3be0:	da 86       	std	Y+10, r13	; 0x0a
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    3be2:	fe 83       	std	Y+6, r31	; 0x06
    3be4:	ed 83       	std	Y+5, r30	; 0x05
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    3be6:	d7 01       	movw	r26, r14
    3be8:	11 96       	adiw	r26, 0x01	; 1
    3bea:	ed 91       	ld	r30, X+
    3bec:	fc 91       	ld	r31, X
    3bee:	12 97       	sbiw	r26, 0x02	; 2
    3bf0:	fa 83       	std	Y+2, r31	; 0x02
    3bf2:	e9 83       	std	Y+1, r30	; 0x01
    pnode->OSFlagNodePrev     = (void *)0;
    3bf4:	1c 82       	std	Y+4, r1	; 0x04
    3bf6:	1b 82       	std	Y+3, r1	; 0x03
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    3bf8:	f8 86       	std	Y+8, r15	; 0x08
    3bfa:	ef 82       	std	Y+7, r14	; 0x07
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    3bfc:	30 97       	sbiw	r30, 0x00	; 0
    3bfe:	21 f0       	breq	.+8      	; 0x3c08 <OSFlagPend+0xe6>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    3c00:	ce 01       	movw	r24, r28
    3c02:	01 96       	adiw	r24, 0x01	; 1
    3c04:	93 83       	std	Z+3, r25	; 0x03
    3c06:	82 83       	std	Z+2, r24	; 0x02
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    3c08:	ce 01       	movw	r24, r28
    3c0a:	01 96       	adiw	r24, 0x01	; 1
    3c0c:	f7 01       	movw	r30, r14
    3c0e:	92 83       	std	Z+2, r25	; 0x02
    3c10:	81 83       	std	Z+1, r24	; 0x01
                                                      
    y            =  OSTCBCur->OSTCBY;		 	      /* Suspend current task until flag(s) received   */
    3c12:	a0 91 b6 05 	lds	r26, 0x05B6
    3c16:	b0 91 b7 05 	lds	r27, 0x05B7
	OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    3c1a:	50 96       	adiw	r26, 0x10	; 16
    3c1c:	ec 91       	ld	r30, X
    3c1e:	50 97       	sbiw	r26, 0x10	; 16
    3c20:	f0 e0       	ldi	r31, 0x00	; 0
    3c22:	e0 55       	subi	r30, 0x50	; 80
    3c24:	fa 4f       	sbci	r31, 0xFA	; 250
    3c26:	51 96       	adiw	r26, 0x11	; 17
    3c28:	8c 91       	ld	r24, X
    3c2a:	51 97       	sbiw	r26, 0x11	; 17
    3c2c:	80 95       	com	r24
    3c2e:	90 81       	ld	r25, Z
    3c30:	89 23       	and	r24, r25
    3c32:	80 83       	st	Z, r24
    if (OSRdyTbl[y] == 0x00) {
    3c34:	88 23       	and	r24, r24
    3c36:	41 f4       	brne	.+16     	; 0x3c48 <OSFlagPend+0x126>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    3c38:	52 96       	adiw	r26, 0x12	; 18
    3c3a:	9c 91       	ld	r25, X
    3c3c:	90 95       	com	r25
    3c3e:	80 91 af 05 	lds	r24, 0x05AF
    3c42:	89 23       	and	r24, r25
    3c44:	80 93 af 05 	sts	0x05AF, r24
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *err      = OS_NO_ERR;
                 return (flags_cur);
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
                 OS_EXIT_CRITICAL();
    3c48:	0f 90       	pop	r0
    3c4a:	0f be       	out	0x3f, r0	; 63
    3c4c:	0f 90       	pop	r0
    3c4e:	14 c1       	rjmp	.+552    	; 0x3e78 <OSFlagPend+0x356>
             }
             break;

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = pgrp->OSFlagFlags & flags;        /* Extract only the bits we want            */
    3c50:	d7 01       	movw	r26, r14
    3c52:	13 96       	adiw	r26, 0x03	; 3
    3c54:	9c 91       	ld	r25, X
    3c56:	86 2f       	mov	r24, r22
    3c58:	89 23       	and	r24, r25
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    3c5a:	71 f0       	breq	.+28     	; 0x3c78 <OSFlagPend+0x156>
                 if (consume == TRUE) {                    /* See if we need to consume the flags      */
    3c5c:	bb 85       	ldd	r27, Y+11	; 0x0b
    3c5e:	b1 30       	cpi	r27, 0x01	; 1
    3c60:	21 f4       	brne	.+8      	; 0x3c6a <OSFlagPend+0x148>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    3c62:	80 95       	com	r24
    3c64:	89 23       	and	r24, r25
    3c66:	f7 01       	movw	r30, r14
    3c68:	83 83       	std	Z+3, r24	; 0x03
                 }
                 flags_cur = pgrp->OSFlagFlags;            /* Will return the state of the group       */
    3c6a:	d7 01       	movw	r26, r14
    3c6c:	13 96       	adiw	r26, 0x03	; 3
    3c6e:	8c 91       	ld	r24, X
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
    3c70:	0f 90       	pop	r0
    3c72:	0f be       	out	0x3f, r0	; 63
    3c74:	0f 90       	pop	r0
    3c76:	56 c1       	rjmp	.+684    	; 0x3f24 <OSFlagPend+0x402>
{
    OS_FLAG_NODE  *pnode_next;
	INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    3c78:	e0 91 b6 05 	lds	r30, 0x05B6
    3c7c:	f0 91 b7 05 	lds	r31, 0x05B7
    3c80:	85 85       	ldd	r24, Z+13	; 0x0d
    3c82:	80 62       	ori	r24, 0x20	; 32
    3c84:	85 87       	std	Z+13, r24	; 0x0d
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    3c86:	e0 91 b6 05 	lds	r30, 0x05B6
    3c8a:	f0 91 b7 05 	lds	r31, 0x05B7
    3c8e:	34 87       	std	Z+12, r19	; 0x0c
    3c90:	23 87       	std	Z+11, r18	; 0x0b
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    3c92:	69 87       	std	Y+9, r22	; 0x09
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    3c94:	da 86       	std	Y+10, r13	; 0x0a
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    3c96:	fe 83       	std	Y+6, r31	; 0x06
    3c98:	ed 83       	std	Y+5, r30	; 0x05
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    3c9a:	d7 01       	movw	r26, r14
    3c9c:	11 96       	adiw	r26, 0x01	; 1
    3c9e:	ed 91       	ld	r30, X+
    3ca0:	fc 91       	ld	r31, X
    3ca2:	12 97       	sbiw	r26, 0x02	; 2
    3ca4:	fa 83       	std	Y+2, r31	; 0x02
    3ca6:	e9 83       	std	Y+1, r30	; 0x01
    pnode->OSFlagNodePrev     = (void *)0;
    3ca8:	1c 82       	std	Y+4, r1	; 0x04
    3caa:	1b 82       	std	Y+3, r1	; 0x03
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    3cac:	f8 86       	std	Y+8, r15	; 0x08
    3cae:	ef 82       	std	Y+7, r14	; 0x07
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    3cb0:	30 97       	sbiw	r30, 0x00	; 0
    3cb2:	21 f0       	breq	.+8      	; 0x3cbc <OSFlagPend+0x19a>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    3cb4:	ce 01       	movw	r24, r28
    3cb6:	01 96       	adiw	r24, 0x01	; 1
    3cb8:	93 83       	std	Z+3, r25	; 0x03
    3cba:	82 83       	std	Z+2, r24	; 0x02
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    3cbc:	ce 01       	movw	r24, r28
    3cbe:	01 96       	adiw	r24, 0x01	; 1
    3cc0:	f7 01       	movw	r30, r14
    3cc2:	92 83       	std	Z+2, r25	; 0x02
    3cc4:	81 83       	std	Z+1, r24	; 0x01
                                                      
    y            =  OSTCBCur->OSTCBY;		 	      /* Suspend current task until flag(s) received   */
    3cc6:	a0 91 b6 05 	lds	r26, 0x05B6
    3cca:	b0 91 b7 05 	lds	r27, 0x05B7
	OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    3cce:	50 96       	adiw	r26, 0x10	; 16
    3cd0:	ec 91       	ld	r30, X
    3cd2:	50 97       	sbiw	r26, 0x10	; 16
    3cd4:	f0 e0       	ldi	r31, 0x00	; 0
    3cd6:	e0 55       	subi	r30, 0x50	; 80
    3cd8:	fa 4f       	sbci	r31, 0xFA	; 250
    3cda:	51 96       	adiw	r26, 0x11	; 17
    3cdc:	8c 91       	ld	r24, X
    3cde:	51 97       	sbiw	r26, 0x11	; 17
    3ce0:	80 95       	com	r24
    3ce2:	90 81       	ld	r25, Z
    3ce4:	89 23       	and	r24, r25
    3ce6:	80 83       	st	Z, r24
    if (OSRdyTbl[y] == 0x00) {
    3ce8:	88 23       	and	r24, r24
    3cea:	41 f4       	brne	.+16     	; 0x3cfc <OSFlagPend+0x1da>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    3cec:	52 96       	adiw	r26, 0x12	; 18
    3cee:	9c 91       	ld	r25, X
    3cf0:	90 95       	com	r25
    3cf2:	80 91 af 05 	lds	r24, 0x05AF
    3cf6:	89 23       	and	r24, r25
    3cf8:	80 93 af 05 	sts	0x05AF, r24
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *err      = OS_NO_ERR;
                 return (flags_cur);
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
                 OS_EXIT_CRITICAL();
    3cfc:	0f 90       	pop	r0
    3cfe:	0f be       	out	0x3f, r0	; 63
    3d00:	0f 90       	pop	r0
    3d02:	ba c0       	rjmp	.+372    	; 0x3e78 <OSFlagPend+0x356>
             }
             break;

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = ~pgrp->OSFlagFlags & flags;       /* Extract only the bits we want            */
    3d04:	d7 01       	movw	r26, r14
    3d06:	13 96       	adiw	r26, 0x03	; 3
    3d08:	9c 91       	ld	r25, X
    3d0a:	89 2f       	mov	r24, r25
    3d0c:	80 95       	com	r24
    3d0e:	86 23       	and	r24, r22
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    3d10:	86 17       	cp	r24, r22
    3d12:	69 f4       	brne	.+26     	; 0x3d2e <OSFlagPend+0x20c>
                 if (consume == TRUE) {                    /* See if we need to consume the flags      */
    3d14:	bb 85       	ldd	r27, Y+11	; 0x0b
    3d16:	b1 30       	cpi	r27, 0x01	; 1
    3d18:	19 f4       	brne	.+6      	; 0x3d20 <OSFlagPend+0x1fe>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    3d1a:	96 2b       	or	r25, r22
    3d1c:	f7 01       	movw	r30, r14
    3d1e:	93 83       	std	Z+3, r25	; 0x03
                 }
                 flags_cur = pgrp->OSFlagFlags;            /* Will return the state of the group       */
    3d20:	d7 01       	movw	r26, r14
    3d22:	13 96       	adiw	r26, 0x03	; 3
    3d24:	8c 91       	ld	r24, X
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
    3d26:	0f 90       	pop	r0
    3d28:	0f be       	out	0x3f, r0	; 63
    3d2a:	0f 90       	pop	r0
    3d2c:	fb c0       	rjmp	.+502    	; 0x3f24 <OSFlagPend+0x402>
{
    OS_FLAG_NODE  *pnode_next;
	INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    3d2e:	e0 91 b6 05 	lds	r30, 0x05B6
    3d32:	f0 91 b7 05 	lds	r31, 0x05B7
    3d36:	85 85       	ldd	r24, Z+13	; 0x0d
    3d38:	80 62       	ori	r24, 0x20	; 32
    3d3a:	85 87       	std	Z+13, r24	; 0x0d
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    3d3c:	e0 91 b6 05 	lds	r30, 0x05B6
    3d40:	f0 91 b7 05 	lds	r31, 0x05B7
    3d44:	34 87       	std	Z+12, r19	; 0x0c
    3d46:	23 87       	std	Z+11, r18	; 0x0b
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    3d48:	69 87       	std	Y+9, r22	; 0x09
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    3d4a:	1a 86       	std	Y+10, r1	; 0x0a
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    3d4c:	fe 83       	std	Y+6, r31	; 0x06
    3d4e:	ed 83       	std	Y+5, r30	; 0x05
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    3d50:	d7 01       	movw	r26, r14
    3d52:	11 96       	adiw	r26, 0x01	; 1
    3d54:	ed 91       	ld	r30, X+
    3d56:	fc 91       	ld	r31, X
    3d58:	12 97       	sbiw	r26, 0x02	; 2
    3d5a:	fa 83       	std	Y+2, r31	; 0x02
    3d5c:	e9 83       	std	Y+1, r30	; 0x01
    pnode->OSFlagNodePrev     = (void *)0;
    3d5e:	1c 82       	std	Y+4, r1	; 0x04
    3d60:	1b 82       	std	Y+3, r1	; 0x03
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    3d62:	f8 86       	std	Y+8, r15	; 0x08
    3d64:	ef 82       	std	Y+7, r14	; 0x07
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    3d66:	30 97       	sbiw	r30, 0x00	; 0
    3d68:	21 f0       	breq	.+8      	; 0x3d72 <OSFlagPend+0x250>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    3d6a:	ce 01       	movw	r24, r28
    3d6c:	01 96       	adiw	r24, 0x01	; 1
    3d6e:	93 83       	std	Z+3, r25	; 0x03
    3d70:	82 83       	std	Z+2, r24	; 0x02
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    3d72:	ce 01       	movw	r24, r28
    3d74:	01 96       	adiw	r24, 0x01	; 1
    3d76:	f7 01       	movw	r30, r14
    3d78:	92 83       	std	Z+2, r25	; 0x02
    3d7a:	81 83       	std	Z+1, r24	; 0x01
                                                      
    y            =  OSTCBCur->OSTCBY;		 	      /* Suspend current task until flag(s) received   */
    3d7c:	a0 91 b6 05 	lds	r26, 0x05B6
    3d80:	b0 91 b7 05 	lds	r27, 0x05B7
	OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    3d84:	50 96       	adiw	r26, 0x10	; 16
    3d86:	ec 91       	ld	r30, X
    3d88:	50 97       	sbiw	r26, 0x10	; 16
    3d8a:	f0 e0       	ldi	r31, 0x00	; 0
    3d8c:	e0 55       	subi	r30, 0x50	; 80
    3d8e:	fa 4f       	sbci	r31, 0xFA	; 250
    3d90:	51 96       	adiw	r26, 0x11	; 17
    3d92:	8c 91       	ld	r24, X
    3d94:	51 97       	sbiw	r26, 0x11	; 17
    3d96:	80 95       	com	r24
    3d98:	90 81       	ld	r25, Z
    3d9a:	89 23       	and	r24, r25
    3d9c:	80 83       	st	Z, r24
    if (OSRdyTbl[y] == 0x00) {
    3d9e:	88 23       	and	r24, r24
    3da0:	41 f4       	brne	.+16     	; 0x3db2 <OSFlagPend+0x290>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    3da2:	52 96       	adiw	r26, 0x12	; 18
    3da4:	9c 91       	ld	r25, X
    3da6:	90 95       	com	r25
    3da8:	80 91 af 05 	lds	r24, 0x05AF
    3dac:	89 23       	and	r24, r25
    3dae:	80 93 af 05 	sts	0x05AF, r24
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *err      = OS_NO_ERR;
                 return (flags_cur);
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
                 OS_EXIT_CRITICAL();
    3db2:	0f 90       	pop	r0
    3db4:	0f be       	out	0x3f, r0	; 63
    3db6:	0f 90       	pop	r0
    3db8:	5f c0       	rjmp	.+190    	; 0x3e78 <OSFlagPend+0x356>
             }
             break;

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = ~pgrp->OSFlagFlags & flags;       /* Extract only the bits we want            */
    3dba:	d7 01       	movw	r26, r14
    3dbc:	13 96       	adiw	r26, 0x03	; 3
    3dbe:	9c 91       	ld	r25, X
    3dc0:	89 2f       	mov	r24, r25
    3dc2:	80 95       	com	r24
    3dc4:	86 23       	and	r24, r22
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    3dc6:	69 f0       	breq	.+26     	; 0x3de2 <OSFlagPend+0x2c0>
                 if (consume == TRUE) {                    /* See if we need to consume the flags      */
    3dc8:	bb 85       	ldd	r27, Y+11	; 0x0b
    3dca:	b1 30       	cpi	r27, 0x01	; 1
    3dcc:	19 f4       	brne	.+6      	; 0x3dd4 <OSFlagPend+0x2b2>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    3dce:	89 2b       	or	r24, r25
    3dd0:	f7 01       	movw	r30, r14
    3dd2:	83 83       	std	Z+3, r24	; 0x03
                 }
                 flags_cur = pgrp->OSFlagFlags;            /* Will return the state of the group       */
    3dd4:	d7 01       	movw	r26, r14
    3dd6:	13 96       	adiw	r26, 0x03	; 3
    3dd8:	8c 91       	ld	r24, X
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
    3dda:	0f 90       	pop	r0
    3ddc:	0f be       	out	0x3f, r0	; 63
    3dde:	0f 90       	pop	r0
    3de0:	a1 c0       	rjmp	.+322    	; 0x3f24 <OSFlagPend+0x402>
{
    OS_FLAG_NODE  *pnode_next;
	INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    3de2:	e0 91 b6 05 	lds	r30, 0x05B6
    3de6:	f0 91 b7 05 	lds	r31, 0x05B7
    3dea:	85 85       	ldd	r24, Z+13	; 0x0d
    3dec:	80 62       	ori	r24, 0x20	; 32
    3dee:	85 87       	std	Z+13, r24	; 0x0d
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    3df0:	e0 91 b6 05 	lds	r30, 0x05B6
    3df4:	f0 91 b7 05 	lds	r31, 0x05B7
    3df8:	34 87       	std	Z+12, r19	; 0x0c
    3dfa:	23 87       	std	Z+11, r18	; 0x0b
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    3dfc:	69 87       	std	Y+9, r22	; 0x09
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    3dfe:	da 86       	std	Y+10, r13	; 0x0a
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    3e00:	fe 83       	std	Y+6, r31	; 0x06
    3e02:	ed 83       	std	Y+5, r30	; 0x05
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    3e04:	d7 01       	movw	r26, r14
    3e06:	11 96       	adiw	r26, 0x01	; 1
    3e08:	ed 91       	ld	r30, X+
    3e0a:	fc 91       	ld	r31, X
    3e0c:	12 97       	sbiw	r26, 0x02	; 2
    3e0e:	fa 83       	std	Y+2, r31	; 0x02
    3e10:	e9 83       	std	Y+1, r30	; 0x01
    pnode->OSFlagNodePrev     = (void *)0;
    3e12:	1c 82       	std	Y+4, r1	; 0x04
    3e14:	1b 82       	std	Y+3, r1	; 0x03
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    3e16:	f8 86       	std	Y+8, r15	; 0x08
    3e18:	ef 82       	std	Y+7, r14	; 0x07
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    3e1a:	30 97       	sbiw	r30, 0x00	; 0
    3e1c:	21 f0       	breq	.+8      	; 0x3e26 <OSFlagPend+0x304>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    3e1e:	ce 01       	movw	r24, r28
    3e20:	01 96       	adiw	r24, 0x01	; 1
    3e22:	93 83       	std	Z+3, r25	; 0x03
    3e24:	82 83       	std	Z+2, r24	; 0x02
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    3e26:	ce 01       	movw	r24, r28
    3e28:	01 96       	adiw	r24, 0x01	; 1
    3e2a:	f7 01       	movw	r30, r14
    3e2c:	92 83       	std	Z+2, r25	; 0x02
    3e2e:	81 83       	std	Z+1, r24	; 0x01
                                                      
    y            =  OSTCBCur->OSTCBY;		 	      /* Suspend current task until flag(s) received   */
    3e30:	a0 91 b6 05 	lds	r26, 0x05B6
    3e34:	b0 91 b7 05 	lds	r27, 0x05B7
	OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    3e38:	50 96       	adiw	r26, 0x10	; 16
    3e3a:	ec 91       	ld	r30, X
    3e3c:	50 97       	sbiw	r26, 0x10	; 16
    3e3e:	f0 e0       	ldi	r31, 0x00	; 0
    3e40:	e0 55       	subi	r30, 0x50	; 80
    3e42:	fa 4f       	sbci	r31, 0xFA	; 250
    3e44:	51 96       	adiw	r26, 0x11	; 17
    3e46:	8c 91       	ld	r24, X
    3e48:	51 97       	sbiw	r26, 0x11	; 17
    3e4a:	80 95       	com	r24
    3e4c:	90 81       	ld	r25, Z
    3e4e:	89 23       	and	r24, r25
    3e50:	80 83       	st	Z, r24
    if (OSRdyTbl[y] == 0x00) {
    3e52:	88 23       	and	r24, r24
    3e54:	41 f4       	brne	.+16     	; 0x3e66 <OSFlagPend+0x344>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    3e56:	52 96       	adiw	r26, 0x12	; 18
    3e58:	9c 91       	ld	r25, X
    3e5a:	90 95       	com	r25
    3e5c:	80 91 af 05 	lds	r24, 0x05AF
    3e60:	89 23       	and	r24, r25
    3e62:	80 93 af 05 	sts	0x05AF, r24
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *err      = OS_NO_ERR;
                 return (flags_cur);
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
                 OS_EXIT_CRITICAL();
    3e66:	0f 90       	pop	r0
    3e68:	0f be       	out	0x3f, r0	; 63
    3e6a:	0f 90       	pop	r0
    3e6c:	05 c0       	rjmp	.+10     	; 0x3e78 <OSFlagPend+0x356>
             }
             break;
#endif

        default:
             OS_EXIT_CRITICAL();
    3e6e:	0f 90       	pop	r0
    3e70:	0f be       	out	0x3f, r0	; 63
    3e72:	0f 90       	pop	r0
             flags_cur = (OS_FLAGS)0;
             *err      = OS_FLAG_ERR_WAIT_TYPE;
    3e74:	87 e9       	ldi	r24, 0x97	; 151
    3e76:	71 ce       	rjmp	.-798    	; 0x3b5a <OSFlagPend+0x38>
             return (flags_cur);
    }
    OS_Sched();                                            /* Find next HPT ready to run               */
    3e78:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <OS_Sched>
    OS_ENTER_CRITICAL();
    3e7c:	0f 92       	push	r0
    3e7e:	0f b6       	in	r0, 0x3f	; 63
    3e80:	0f 92       	push	r0
    3e82:	f8 94       	cli
    if (OSTCBCur->OSTCBStat & OS_STAT_FLAG) {              /* Have we timed-out?                       */
    3e84:	e0 91 b6 05 	lds	r30, 0x05B6
    3e88:	f0 91 b7 05 	lds	r31, 0x05B7
    3e8c:	85 85       	ldd	r24, Z+13	; 0x0d
    3e8e:	85 ff       	sbrs	r24, 5
    3e90:	25 c0       	rjmp	.+74     	; 0x3edc <OSFlagPend+0x3ba>
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    3e92:	eb 81       	ldd	r30, Y+3	; 0x03
    3e94:	fc 81       	ldd	r31, Y+4	; 0x04
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    3e96:	a9 81       	ldd	r26, Y+1	; 0x01
    3e98:	ba 81       	ldd	r27, Y+2	; 0x02
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    3e9a:	30 97       	sbiw	r30, 0x00	; 0
    3e9c:	59 f4       	brne	.+22     	; 0x3eb4 <OSFlagPend+0x392>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    3e9e:	ef 81       	ldd	r30, Y+7	; 0x07
    3ea0:	f8 85       	ldd	r31, Y+8	; 0x08
    3ea2:	b2 83       	std	Z+2, r27	; 0x02
    3ea4:	a1 83       	std	Z+1, r26	; 0x01
        if (pnode_next != (OS_FLAG_NODE *)0) {
    3ea6:	10 97       	sbiw	r26, 0x00	; 0
    3ea8:	69 f0       	breq	.+26     	; 0x3ec4 <OSFlagPend+0x3a2>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    3eaa:	13 96       	adiw	r26, 0x03	; 3
    3eac:	1c 92       	st	X, r1
    3eae:	1e 92       	st	-X, r1
    3eb0:	12 97       	sbiw	r26, 0x02	; 2
    3eb2:	08 c0       	rjmp	.+16     	; 0x3ec4 <OSFlagPend+0x3a2>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    3eb4:	b1 83       	std	Z+1, r27	; 0x01
    3eb6:	a0 83       	st	Z, r26
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    3eb8:	10 97       	sbiw	r26, 0x00	; 0
    3eba:	21 f0       	breq	.+8      	; 0x3ec4 <OSFlagPend+0x3a2>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    3ebc:	13 96       	adiw	r26, 0x03	; 3
    3ebe:	fc 93       	st	X, r31
    3ec0:	ee 93       	st	-X, r30
    3ec2:	12 97       	sbiw	r26, 0x02	; 2
    }
    OS_Sched();                                            /* Find next HPT ready to run               */
    OS_ENTER_CRITICAL();
    if (OSTCBCur->OSTCBStat & OS_STAT_FLAG) {              /* Have we timed-out?                       */
        OS_FlagUnlink(&node);
        OSTCBCur->OSTCBStat = OS_STAT_RDY;                 /* Yes, make task ready-to-run              */
    3ec4:	e0 91 b6 05 	lds	r30, 0x05B6
    3ec8:	f0 91 b7 05 	lds	r31, 0x05B7
    3ecc:	15 86       	std	Z+13, r1	; 0x0d
        OS_EXIT_CRITICAL();
    3ece:	0f 90       	pop	r0
    3ed0:	0f be       	out	0x3f, r0	; 63
    3ed2:	0f 90       	pop	r0
        flags_cur           = (OS_FLAGS)0;
        *err                = OS_TIMEOUT;                  /* Indicate that we timed-out waiting       */
    3ed4:	8a e0       	ldi	r24, 0x0A	; 10
    3ed6:	f8 01       	movw	r30, r16
    3ed8:	80 83       	st	Z, r24
    3eda:	41 ce       	rjmp	.-894    	; 0x3b5e <OSFlagPend+0x3c>
    } else {
        if (consume == TRUE) {                             /* See if we need to consume the flags      */
    3edc:	2b 85       	ldd	r18, Y+11	; 0x0b
    3ede:	21 30       	cpi	r18, 0x01	; 1
    3ee0:	d9 f4       	brne	.+54     	; 0x3f18 <OSFlagPend+0x3f6>
            switch (wait_type) {
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
    3ee4:	8d 15       	cp	r24, r13
    3ee6:	50 f4       	brcc	.+20     	; 0x3efc <OSFlagPend+0x3da>
    3ee8:	a3 e0       	ldi	r26, 0x03	; 3
    3eea:	ad 15       	cp	r26, r13
    3eec:	80 f0       	brcs	.+32     	; 0x3f0e <OSFlagPend+0x3ec>
                case OS_FLAG_WAIT_SET_ALL:
                case OS_FLAG_WAIT_SET_ANY:                 /* Clear ONLY the flags we got              */
                     pgrp->OSFlagFlags &= ~OSTCBCur->OSTCBFlagsRdy;
    3eee:	92 85       	ldd	r25, Z+10	; 0x0a
    3ef0:	90 95       	com	r25
    3ef2:	f7 01       	movw	r30, r14
    3ef4:	83 81       	ldd	r24, Z+3	; 0x03
    3ef6:	89 23       	and	r24, r25
    3ef8:	83 83       	std	Z+3, r24	; 0x03
    3efa:	0e c0       	rjmp	.+28     	; 0x3f18 <OSFlagPend+0x3f6>
                     break;

#if OS_FLAG_WAIT_CLR_EN > 0
                case OS_FLAG_WAIT_CLR_ALL:
                case OS_FLAG_WAIT_CLR_ANY:                 /* Set   ONLY the flags we got              */
                     pgrp->OSFlagFlags |= OSTCBCur->OSTCBFlagsRdy;
    3efc:	d7 01       	movw	r26, r14
    3efe:	13 96       	adiw	r26, 0x03	; 3
    3f00:	8c 91       	ld	r24, X
    3f02:	13 97       	sbiw	r26, 0x03	; 3
    3f04:	92 85       	ldd	r25, Z+10	; 0x0a
    3f06:	89 2b       	or	r24, r25
    3f08:	13 96       	adiw	r26, 0x03	; 3
    3f0a:	8c 93       	st	X, r24
    3f0c:	05 c0       	rjmp	.+10     	; 0x3f18 <OSFlagPend+0x3f6>
                     break;
#endif
                default:
                     OS_EXIT_CRITICAL();
    3f0e:	0f 90       	pop	r0
    3f10:	0f be       	out	0x3f, r0	; 63
    3f12:	0f 90       	pop	r0
                     *err = OS_FLAG_ERR_WAIT_TYPE;
    3f14:	87 e9       	ldi	r24, 0x97	; 151
    3f16:	df cf       	rjmp	.-66     	; 0x3ed6 <OSFlagPend+0x3b4>
                     return ((OS_FLAGS)0);
            }
        }
        flags_cur = pgrp->OSFlagFlags;
    3f18:	d7 01       	movw	r26, r14
    3f1a:	13 96       	adiw	r26, 0x03	; 3
    3f1c:	8c 91       	ld	r24, X
        OS_EXIT_CRITICAL();
    3f1e:	0f 90       	pop	r0
    3f20:	0f be       	out	0x3f, r0	; 63
    3f22:	0f 90       	pop	r0
        *err      = OS_NO_ERR;                             /* Event(s) must have occurred              */
    3f24:	f8 01       	movw	r30, r16
    3f26:	10 82       	st	Z, r1
    }
    return (flags_cur);
}
    3f28:	2b 96       	adiw	r28, 0x0b	; 11
    3f2a:	0f b6       	in	r0, 0x3f	; 63
    3f2c:	f8 94       	cli
    3f2e:	de bf       	out	0x3e, r29	; 62
    3f30:	0f be       	out	0x3f, r0	; 63
    3f32:	cd bf       	out	0x3d, r28	; 61
    3f34:	cf 91       	pop	r28
    3f36:	df 91       	pop	r29
    3f38:	1f 91       	pop	r17
    3f3a:	0f 91       	pop	r16
    3f3c:	ff 90       	pop	r15
    3f3e:	ef 90       	pop	r14
    3f40:	df 90       	pop	r13
    3f42:	08 95       	ret

00003f44 <OSTimeTick>:
    OS_TCB    *ptcb;
    BOOLEAN    step;


#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    3f44:	0e 94 cd 10 	call	0x219a	; 0x219a <OSTimeTickHook>
#if OS_TIME_GET_SET_EN > 0   
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    OSTime++;
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == TRUE) {    
    3f48:	80 91 6b 05 	lds	r24, 0x056B
    3f4c:	81 30       	cpi	r24, 0x01	; 1
    3f4e:	09 f0       	breq	.+2      	; 0x3f52 <OSTimeTick+0xe>
    3f50:	42 c0       	rjmp	.+132    	; 0x3fd6 <OSTimeTick+0x92>
        }
#else
        step = TRUE;
#endif
        if (step == TRUE) {
            ptcb = OSTCBList;                              /* Point at first TCB in TCB list               */
    3f52:	a0 91 86 05 	lds	r26, 0x0586
    3f56:	b0 91 87 05 	lds	r27, 0x0587
    3f5a:	20 91 af 05 	lds	r18, 0x05AF
                    if (--ptcb->OSTCBDly == 0) {           /* Decrement nbr of ticks to end of delay       */
                        if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) { /* Is task suspended?    */
                            OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task R-to-R (timed out)*/
                            OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
                        } else {                           /* Yes, Leave 1 tick to prevent loosing the ... */
                            ptcb->OSTCBDly = 1;            /* ... task when the suspension is removed.     */
    3f5e:	41 e0       	ldi	r20, 0x01	; 1
    3f60:	50 e0       	ldi	r21, 0x00	; 0
    3f62:	32 c0       	rjmp	.+100    	; 0x3fc8 <OSTimeTick+0x84>
        step = TRUE;
#endif
        if (step == TRUE) {
            ptcb = OSTCBList;                              /* Point at first TCB in TCB list               */
            while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {      /* Go through all TCBs in TCB list              */
                OS_ENTER_CRITICAL();
    3f64:	0f 92       	push	r0
    3f66:	0f b6       	in	r0, 0x3f	; 63
    3f68:	0f 92       	push	r0
    3f6a:	f8 94       	cli
                if (ptcb->OSTCBDly != 0) {                 /* Delayed or waiting for event with TO         */
    3f6c:	1b 96       	adiw	r26, 0x0b	; 11
    3f6e:	8d 91       	ld	r24, X+
    3f70:	9c 91       	ld	r25, X
    3f72:	1c 97       	sbiw	r26, 0x0c	; 12
    3f74:	00 97       	sbiw	r24, 0x00	; 0
    3f76:	09 f1       	breq	.+66     	; 0x3fba <OSTimeTick+0x76>
                    if (--ptcb->OSTCBDly == 0) {           /* Decrement nbr of ticks to end of delay       */
    3f78:	01 97       	sbiw	r24, 0x01	; 1
    3f7a:	1c 96       	adiw	r26, 0x0c	; 12
    3f7c:	9c 93       	st	X, r25
    3f7e:	8e 93       	st	-X, r24
    3f80:	1b 97       	sbiw	r26, 0x0b	; 11
    3f82:	89 2b       	or	r24, r25
    3f84:	d1 f4       	brne	.+52     	; 0x3fba <OSTimeTick+0x76>
                        if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) { /* Is task suspended?    */
    3f86:	1d 96       	adiw	r26, 0x0d	; 13
    3f88:	8c 91       	ld	r24, X
    3f8a:	1d 97       	sbiw	r26, 0x0d	; 13
    3f8c:	83 fd       	sbrc	r24, 3
    3f8e:	11 c0       	rjmp	.+34     	; 0x3fb2 <OSTimeTick+0x6e>
                            OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task R-to-R (timed out)*/
    3f90:	52 96       	adiw	r26, 0x12	; 18
    3f92:	8c 91       	ld	r24, X
    3f94:	52 97       	sbiw	r26, 0x12	; 18
    3f96:	28 2b       	or	r18, r24
                            OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    3f98:	50 96       	adiw	r26, 0x10	; 16
    3f9a:	ec 91       	ld	r30, X
    3f9c:	50 97       	sbiw	r26, 0x10	; 16
    3f9e:	f0 e0       	ldi	r31, 0x00	; 0
    3fa0:	e0 55       	subi	r30, 0x50	; 80
    3fa2:	fa 4f       	sbci	r31, 0xFA	; 250
    3fa4:	80 81       	ld	r24, Z
    3fa6:	51 96       	adiw	r26, 0x11	; 17
    3fa8:	9c 91       	ld	r25, X
    3faa:	51 97       	sbiw	r26, 0x11	; 17
    3fac:	89 2b       	or	r24, r25
    3fae:	80 83       	st	Z, r24
    3fb0:	04 c0       	rjmp	.+8      	; 0x3fba <OSTimeTick+0x76>
                        } else {                           /* Yes, Leave 1 tick to prevent loosing the ... */
                            ptcb->OSTCBDly = 1;            /* ... task when the suspension is removed.     */
    3fb2:	1c 96       	adiw	r26, 0x0c	; 12
    3fb4:	5c 93       	st	X, r21
    3fb6:	4e 93       	st	-X, r20
    3fb8:	1b 97       	sbiw	r26, 0x0b	; 11
                        }
                    }
                }
                ptcb = ptcb->OSTCBNext;                    /* Point at next TCB in TCB list                */
    3fba:	12 96       	adiw	r26, 0x02	; 2
    3fbc:	0d 90       	ld	r0, X+
    3fbe:	bc 91       	ld	r27, X
    3fc0:	a0 2d       	mov	r26, r0
                OS_EXIT_CRITICAL();
    3fc2:	0f 90       	pop	r0
    3fc4:	0f be       	out	0x3f, r0	; 63
    3fc6:	0f 90       	pop	r0
#else
        step = TRUE;
#endif
        if (step == TRUE) {
            ptcb = OSTCBList;                              /* Point at first TCB in TCB list               */
            while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {      /* Go through all TCBs in TCB list              */
    3fc8:	1e 96       	adiw	r26, 0x0e	; 14
    3fca:	8c 91       	ld	r24, X
    3fcc:	1e 97       	sbiw	r26, 0x0e	; 14
    3fce:	8f 30       	cpi	r24, 0x0F	; 15
    3fd0:	49 f6       	brne	.-110    	; 0x3f64 <OSTimeTick+0x20>
    3fd2:	20 93 af 05 	sts	0x05AF, r18
    3fd6:	08 95       	ret

00003fd8 <OSStart>:
{
    INT8U y;
    INT8U x;


    if (OSRunning == FALSE) {
    3fd8:	80 91 6b 05 	lds	r24, 0x056B
    3fdc:	88 23       	and	r24, r24
    3fde:	41 f5       	brne	.+80     	; 0x4030 <OSStart+0x58>
        y             = OSUnMapTbl[OSRdyGrp];        /* Find highest priority's task priority number   */
    3fe0:	e0 91 af 05 	lds	r30, 0x05AF
    3fe4:	f0 e0       	ldi	r31, 0x00	; 0
    3fe6:	e8 59       	subi	r30, 0x98	; 152
    3fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fea:	a0 81       	ld	r26, Z
        x             = OSUnMapTbl[OSRdyTbl[y]];
        OSPrioHighRdy = (INT8U)((y << 3) + x);
    3fec:	ea 2f       	mov	r30, r26
    3fee:	f0 e0       	ldi	r31, 0x00	; 0
    3ff0:	e0 55       	subi	r30, 0x50	; 80
    3ff2:	fa 4f       	sbci	r31, 0xFA	; 250
    3ff4:	e0 81       	ld	r30, Z
    3ff6:	f0 e0       	ldi	r31, 0x00	; 0
    3ff8:	e8 59       	subi	r30, 0x98	; 152
    3ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffc:	aa 0f       	add	r26, r26
    3ffe:	aa 0f       	add	r26, r26
    4000:	aa 0f       	add	r26, r26
    4002:	80 81       	ld	r24, Z
    4004:	a8 0f       	add	r26, r24
    4006:	a0 93 70 05 	sts	0x0570, r26
        OSPrioCur     = OSPrioHighRdy;
    400a:	a0 93 85 05 	sts	0x0585, r26
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    400e:	b0 e0       	ldi	r27, 0x00	; 0
    4010:	aa 0f       	add	r26, r26
    4012:	bb 1f       	adc	r27, r27
    4014:	a4 58       	subi	r26, 0x84	; 132
    4016:	b8 4f       	sbci	r27, 0xF8	; 248
    4018:	8d 91       	ld	r24, X+
    401a:	9c 91       	ld	r25, X
    401c:	90 93 ac 05 	sts	0x05AC, r25
    4020:	80 93 ab 05 	sts	0x05AB, r24
        OSTCBCur      = OSTCBHighRdy;
    4024:	90 93 b7 05 	sts	0x05B7, r25
    4028:	80 93 b6 05 	sts	0x05B6, r24
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    402c:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <OSStartHighRdy>
    4030:	08 95       	ret

00004032 <OSIntExit>:
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr;
#endif
    
    
    if (OSRunning == TRUE) {
    4032:	80 91 6b 05 	lds	r24, 0x056B
    4036:	81 30       	cpi	r24, 0x01	; 1
    4038:	09 f0       	breq	.+2      	; 0x403c <OSIntExit+0xa>
    403a:	54 c0       	rjmp	.+168    	; 0x40e4 <OSIntExit+0xb2>
        OS_ENTER_CRITICAL();
    403c:	0f 92       	push	r0
    403e:	0f b6       	in	r0, 0x3f	; 63
    4040:	0f 92       	push	r0
    4042:	f8 94       	cli
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    4044:	80 91 b5 05 	lds	r24, 0x05B5
    4048:	88 23       	and	r24, r24
    404a:	19 f0       	breq	.+6      	; 0x4052 <OSIntExit+0x20>
            OSIntNesting--;
    404c:	81 50       	subi	r24, 0x01	; 1
    404e:	80 93 b5 05 	sts	0x05B5, r24
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    4052:	80 91 b5 05 	lds	r24, 0x05B5
    4056:	88 23       	and	r24, r24
    4058:	09 f0       	breq	.+2      	; 0x405c <OSIntExit+0x2a>
    405a:	41 c0       	rjmp	.+130    	; 0x40de <OSIntExit+0xac>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    405c:	80 91 6a 05 	lds	r24, 0x056A
    4060:	88 23       	and	r24, r24
    4062:	e9 f5       	brne	.+122    	; 0x40de <OSIntExit+0xac>
                OSIntExitY    = OSUnMapTbl[OSRdyGrp];          
    4064:	e0 91 af 05 	lds	r30, 0x05AF
    4068:	f0 e0       	ldi	r31, 0x00	; 0
    406a:	e8 59       	subi	r30, 0x98	; 152
    406c:	ff 4f       	sbci	r31, 0xFF	; 255
    406e:	80 81       	ld	r24, Z
    4070:	80 93 b4 05 	sts	0x05B4, r24
                OSPrioHighRdy = (INT8U)((OSIntExitY << 3) + OSUnMapTbl[OSRdyTbl[OSIntExitY]]);
    4074:	e8 2f       	mov	r30, r24
    4076:	f0 e0       	ldi	r31, 0x00	; 0
    4078:	e0 55       	subi	r30, 0x50	; 80
    407a:	fa 4f       	sbci	r31, 0xFA	; 250
    407c:	e0 81       	ld	r30, Z
    407e:	f0 e0       	ldi	r31, 0x00	; 0
    4080:	e8 59       	subi	r30, 0x98	; 152
    4082:	ff 4f       	sbci	r31, 0xFF	; 255
    4084:	98 2f       	mov	r25, r24
    4086:	99 0f       	add	r25, r25
    4088:	99 0f       	add	r25, r25
    408a:	99 0f       	add	r25, r25
    408c:	80 81       	ld	r24, Z
    408e:	98 0f       	add	r25, r24
    4090:	90 93 70 05 	sts	0x0570, r25
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    4094:	80 91 85 05 	lds	r24, 0x0585
    4098:	98 17       	cp	r25, r24
    409a:	09 f1       	breq	.+66     	; 0x40de <OSIntExit+0xac>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    409c:	e9 2f       	mov	r30, r25
    409e:	f0 e0       	ldi	r31, 0x00	; 0
    40a0:	ee 0f       	add	r30, r30
    40a2:	ff 1f       	adc	r31, r31
    40a4:	e4 58       	subi	r30, 0x84	; 132
    40a6:	f8 4f       	sbci	r31, 0xF8	; 248
    40a8:	80 81       	ld	r24, Z
    40aa:	91 81       	ldd	r25, Z+1	; 0x01
    40ac:	90 93 ac 05 	sts	0x05AC, r25
    40b0:	80 93 ab 05 	sts	0x05AB, r24
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    40b4:	80 91 88 05 	lds	r24, 0x0588
    40b8:	90 91 89 05 	lds	r25, 0x0589
    40bc:	a0 91 8a 05 	lds	r26, 0x058A
    40c0:	b0 91 8b 05 	lds	r27, 0x058B
    40c4:	01 96       	adiw	r24, 0x01	; 1
    40c6:	a1 1d       	adc	r26, r1
    40c8:	b1 1d       	adc	r27, r1
    40ca:	80 93 88 05 	sts	0x0588, r24
    40ce:	90 93 89 05 	sts	0x0589, r25
    40d2:	a0 93 8a 05 	sts	0x058A, r26
    40d6:	b0 93 8b 05 	sts	0x058B, r27
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    40da:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <OSIntCtxSw>
                }
            }
        }
        OS_EXIT_CRITICAL();
    40de:	0f 90       	pop	r0
    40e0:	0f be       	out	0x3f, r0	; 63
    40e2:	0f 90       	pop	r0
    40e4:	08 95       	ret

000040e6 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    40e6:	cf 93       	push	r28
    40e8:	df 93       	push	r29
#if OS_VERSION >= 204
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    40ea:	0e 94 c5 10 	call	0x218a	; 0x218a <OSInitHookBegin>
{
#if OS_TIME_GET_SET_EN > 0   
    OSTime        = 0L;                                          /* Clear the 32-bit system clock            */
#endif

    OSIntNesting  = 0;                                           /* Clear the interrupt nesting counter      */
    40ee:	10 92 b5 05 	sts	0x05B5, r1
    OSLockNesting = 0;                                           /* Clear the scheduling lock counter        */
    40f2:	10 92 6a 05 	sts	0x056A, r1

    OSTaskCtr     = 0;                                           /* Clear the number of tasks                */
    40f6:	10 92 8e 05 	sts	0x058E, r1

    OSRunning     = FALSE;                                       /* Indicate that multitasking not started   */
    40fa:	10 92 6b 05 	sts	0x056B, r1
    
    OSCtxSwCtr    = 0;                                           /* Clear the context switch counter         */
    40fe:	10 92 88 05 	sts	0x0588, r1
    4102:	10 92 89 05 	sts	0x0589, r1
    4106:	10 92 8a 05 	sts	0x058A, r1
    410a:	10 92 8b 05 	sts	0x058B, r1
    OSIdleCtr     = 0L;                                          /* Clear the 32-bit idle counter            */
    410e:	10 92 6c 05 	sts	0x056C, r1
    4112:	10 92 6d 05 	sts	0x056D, r1
    4116:	10 92 6e 05 	sts	0x056E, r1
    411a:	10 92 6f 05 	sts	0x056F, r1
{
    INT16U   i;
    INT8U   *prdytbl;


    OSRdyGrp      = 0x00;                                        /* Clear the ready list                     */
    411e:	10 92 af 05 	sts	0x05AF, r1
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
        *prdytbl++ = 0x00;
    4122:	10 92 b0 05 	sts	0x05B0, r1
    4126:	10 92 b1 05 	sts	0x05B1, r1
    }

    OSPrioCur     = 0;
    412a:	10 92 85 05 	sts	0x0585, r1
    OSPrioHighRdy = 0;
    412e:	10 92 70 05 	sts	0x0570, r1

    OSTCBHighRdy  = (OS_TCB *)0;                                 
    4132:	10 92 ac 05 	sts	0x05AC, r1
    4136:	10 92 ab 05 	sts	0x05AB, r1
    OSTCBCur      = (OS_TCB *)0;
    413a:	10 92 b7 05 	sts	0x05B7, r1
    413e:	10 92 b6 05 	sts	0x05B6, r1
{
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;

    (void)memset(&OSTCBTbl[0],     0, sizeof(OSTCBTbl));         /* Clear all the TCBs                  */
    4142:	ac eb       	ldi	r26, 0xBC	; 188
    4144:	b6 e0       	ldi	r27, 0x06	; 6
    4146:	8e eb       	ldi	r24, 0xBE	; 190
    4148:	ed 01       	movw	r28, r26
    414a:	19 92       	st	Y+, r1
    414c:	8a 95       	dec	r24
    414e:	e9 f7       	brne	.-6      	; 0x414a <OSInit+0x64>
    (void)memset(&OSTCBPrioTbl[0], 0, sizeof(OSTCBPrioTbl));     /* Clear the priority table            */
    4150:	80 e2       	ldi	r24, 0x20	; 32
    4152:	ec e7       	ldi	r30, 0x7C	; 124
    4154:	f7 e0       	ldi	r31, 0x07	; 7
    4156:	ef 01       	movw	r28, r30
    4158:	19 92       	st	Y+, r1
    415a:	8a 95       	dec	r24
    415c:	e9 f7       	brne	.-6      	; 0x4158 <OSInit+0x72>
    415e:	53 96       	adiw	r26, 0x13	; 19
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];

    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs             */
        ptcb1->OSTCBNext = ptcb2;
    4160:	fd 01       	movw	r30, r26
    4162:	71 97       	sbiw	r30, 0x11	; 17
    4164:	b1 83       	std	Z+1, r27	; 0x01
    4166:	a0 83       	st	Z, r26
#if OS_TASK_NAME_SIZE > 0
        (void)strcpy(ptcb1->OSTCBTaskName, "?");                 /* Unknown name                        */
#endif
        ptcb1++;
        ptcb2++;
    4168:	53 96       	adiw	r26, 0x13	; 19
    (void)memset(&OSTCBTbl[0],     0, sizeof(OSTCBTbl));         /* Clear all the TCBs                  */
    (void)memset(&OSTCBPrioTbl[0], 0, sizeof(OSTCBPrioTbl));     /* Clear the priority table            */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];

    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs             */
    416a:	e7 e0       	ldi	r30, 0x07	; 7
    416c:	aa 37       	cpi	r26, 0x7A	; 122
    416e:	be 07       	cpc	r27, r30
    4170:	b9 f7       	brne	.-18     	; 0x4160 <OSInit+0x7a>
        (void)strcpy(ptcb1->OSTCBTaskName, "?");                 /* Unknown name                        */
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                         */
    4172:	10 92 6a 07 	sts	0x076A, r1
    4176:	10 92 69 07 	sts	0x0769, r1
#if OS_TASK_NAME_SIZE > 0
    (void)strcpy(ptcb1->OSTCBTaskName, "?");
#endif
    OSTCBList     = (OS_TCB *)0;                                 /* TCB lists initializations           */
    417a:	10 92 87 05 	sts	0x0587, r1
    417e:	10 92 86 05 	sts	0x0586, r1
    OSTCBFreeList = &OSTCBTbl[0];
    4182:	8c eb       	ldi	r24, 0xBC	; 188
    4184:	96 e0       	ldi	r25, 0x06	; 6
    4186:	90 93 8d 05 	sts	0x058D, r25
    418a:	80 93 8c 05 	sts	0x058C, r24
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    (void)memset(&OSEventTbl[0], 0, sizeof(OSEventTbl));         /* Clear the event table                    */
    418e:	ec e1       	ldi	r30, 0x1C	; 28
    4190:	f6 e0       	ldi	r31, 0x06	; 6
    4192:	80 ea       	ldi	r24, 0xA0	; 160
    4194:	df 01       	movw	r26, r30
    4196:	1d 92       	st	X+, r1
    4198:	8a 95       	dec	r24
    419a:	e9 f7       	brne	.-6      	; 0x4196 <OSInit+0xb0>
    419c:	cf 01       	movw	r24, r30
    419e:	08 96       	adiw	r24, 0x08	; 8
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {                  /* Init. list of free EVENT control blocks  */
        pevent1->OSEventType = OS_EVENT_TYPE_UNUSED;
    41a0:	10 82       	st	Z, r1
        pevent1->OSEventPtr  = pevent2;
    41a2:	95 83       	std	Z+5, r25	; 0x05
    41a4:	84 83       	std	Z+4, r24	; 0x04
    41a6:	fc 01       	movw	r30, r24


    (void)memset(&OSEventTbl[0], 0, sizeof(OSEventTbl));         /* Clear the event table                    */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {                  /* Init. list of free EVENT control blocks  */
    41a8:	b6 e0       	ldi	r27, 0x06	; 6
    41aa:	84 3b       	cpi	r24, 0xB4	; 180
    41ac:	9b 07       	cpc	r25, r27
    41ae:	b1 f7       	brne	.-20     	; 0x419c <OSInit+0xb6>
        (void)strcpy(pevent1->OSEventName, "?");                 /* Unknown name                             */
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType         = OS_EVENT_TYPE_UNUSED;
    41b0:	10 82       	st	Z, r1
    pevent1->OSEventPtr          = (OS_EVENT *)0;
    41b2:	15 82       	std	Z+5, r1	; 0x05
    41b4:	14 82       	std	Z+4, r1	; 0x04
#if OS_EVENT_NAME_SIZE > 0
    (void)strcpy(pevent1->OSEventName, "?");
#endif
    OSEventFreeList              = &OSEventTbl[0];
    41b6:	8c e1       	ldi	r24, 0x1C	; 28
    41b8:	96 e0       	ldi	r25, 0x06	; 6
    41ba:	90 93 b3 05 	sts	0x05B3, r25
    41be:	80 93 b2 05 	sts	0x05B2, r24
    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */

#if (OS_VERSION >= 251) && (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    41c2:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <OS_FlagInit>
#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    41c6:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <OS_QInit>
                          (void *)0,                                 /* No TCB extension                     */
                          OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + clear stack  */
    #endif
#else
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreate(OS_TaskIdle,
    41ca:	81 e5       	ldi	r24, 0x51	; 81
    41cc:	96 e1       	ldi	r25, 0x16	; 22
    41ce:	60 e0       	ldi	r22, 0x00	; 0
    41d0:	70 e0       	ldi	r23, 0x00	; 0
    41d2:	4b e1       	ldi	r20, 0x1B	; 27
    41d4:	56 e0       	ldi	r21, 0x06	; 6
    41d6:	2f e0       	ldi	r18, 0x0F	; 15
    41d8:	0e 94 30 17 	call	0x2e60	; 0x2e60 <OSTaskCreate>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
#endif

#if OS_VERSION >= 204
    OSInitHookEnd();                                             /* Call port specific init. code            */
    41dc:	0e 94 c6 10 	call	0x218c	; 0x218c <OSInitHookEnd>
#endif
}
    41e0:	df 91       	pop	r29
    41e2:	cf 91       	pop	r28
    41e4:	08 95       	ret

000041e6 <_fpadd_parts>:
    41e6:	a0 e0       	ldi	r26, 0x00	; 0
    41e8:	b0 e0       	ldi	r27, 0x00	; 0
    41ea:	e9 ef       	ldi	r30, 0xF9	; 249
    41ec:	f0 e2       	ldi	r31, 0x20	; 32
    41ee:	0c 94 37 28 	jmp	0x506e	; 0x506e <__prologue_saves__>
    41f2:	dc 01       	movw	r26, r24
    41f4:	2b 01       	movw	r4, r22
    41f6:	fa 01       	movw	r30, r20
    41f8:	9c 91       	ld	r25, X
    41fa:	92 30       	cpi	r25, 0x02	; 2
    41fc:	08 f4       	brcc	.+2      	; 0x4200 <_fpadd_parts+0x1a>
    41fe:	39 c1       	rjmp	.+626    	; 0x4472 <_fpadd_parts+0x28c>
    4200:	eb 01       	movw	r28, r22
    4202:	88 81       	ld	r24, Y
    4204:	82 30       	cpi	r24, 0x02	; 2
    4206:	08 f4       	brcc	.+2      	; 0x420a <_fpadd_parts+0x24>
    4208:	33 c1       	rjmp	.+614    	; 0x4470 <_fpadd_parts+0x28a>
    420a:	94 30       	cpi	r25, 0x04	; 4
    420c:	69 f4       	brne	.+26     	; 0x4228 <_fpadd_parts+0x42>
    420e:	84 30       	cpi	r24, 0x04	; 4
    4210:	09 f0       	breq	.+2      	; 0x4214 <_fpadd_parts+0x2e>
    4212:	2f c1       	rjmp	.+606    	; 0x4472 <_fpadd_parts+0x28c>
    4214:	11 96       	adiw	r26, 0x01	; 1
    4216:	9c 91       	ld	r25, X
    4218:	11 97       	sbiw	r26, 0x01	; 1
    421a:	89 81       	ldd	r24, Y+1	; 0x01
    421c:	98 17       	cp	r25, r24
    421e:	09 f4       	brne	.+2      	; 0x4222 <_fpadd_parts+0x3c>
    4220:	28 c1       	rjmp	.+592    	; 0x4472 <_fpadd_parts+0x28c>
    4222:	aa e6       	ldi	r26, 0x6A	; 106
    4224:	b1 e0       	ldi	r27, 0x01	; 1
    4226:	25 c1       	rjmp	.+586    	; 0x4472 <_fpadd_parts+0x28c>
    4228:	84 30       	cpi	r24, 0x04	; 4
    422a:	09 f4       	brne	.+2      	; 0x422e <_fpadd_parts+0x48>
    422c:	21 c1       	rjmp	.+578    	; 0x4470 <_fpadd_parts+0x28a>
    422e:	82 30       	cpi	r24, 0x02	; 2
    4230:	a9 f4       	brne	.+42     	; 0x425c <_fpadd_parts+0x76>
    4232:	92 30       	cpi	r25, 0x02	; 2
    4234:	09 f0       	breq	.+2      	; 0x4238 <_fpadd_parts+0x52>
    4236:	1d c1       	rjmp	.+570    	; 0x4472 <_fpadd_parts+0x28c>
    4238:	9a 01       	movw	r18, r20
    423a:	ad 01       	movw	r20, r26
    423c:	88 e0       	ldi	r24, 0x08	; 8
    423e:	ea 01       	movw	r28, r20
    4240:	09 90       	ld	r0, Y+
    4242:	ae 01       	movw	r20, r28
    4244:	e9 01       	movw	r28, r18
    4246:	09 92       	st	Y+, r0
    4248:	9e 01       	movw	r18, r28
    424a:	81 50       	subi	r24, 0x01	; 1
    424c:	c1 f7       	brne	.-16     	; 0x423e <_fpadd_parts+0x58>
    424e:	e2 01       	movw	r28, r4
    4250:	89 81       	ldd	r24, Y+1	; 0x01
    4252:	11 96       	adiw	r26, 0x01	; 1
    4254:	9c 91       	ld	r25, X
    4256:	89 23       	and	r24, r25
    4258:	81 83       	std	Z+1, r24	; 0x01
    425a:	08 c1       	rjmp	.+528    	; 0x446c <_fpadd_parts+0x286>
    425c:	92 30       	cpi	r25, 0x02	; 2
    425e:	09 f4       	brne	.+2      	; 0x4262 <_fpadd_parts+0x7c>
    4260:	07 c1       	rjmp	.+526    	; 0x4470 <_fpadd_parts+0x28a>
    4262:	12 96       	adiw	r26, 0x02	; 2
    4264:	2d 90       	ld	r2, X+
    4266:	3c 90       	ld	r3, X
    4268:	13 97       	sbiw	r26, 0x03	; 3
    426a:	eb 01       	movw	r28, r22
    426c:	8a 81       	ldd	r24, Y+2	; 0x02
    426e:	9b 81       	ldd	r25, Y+3	; 0x03
    4270:	14 96       	adiw	r26, 0x04	; 4
    4272:	ad 90       	ld	r10, X+
    4274:	bd 90       	ld	r11, X+
    4276:	cd 90       	ld	r12, X+
    4278:	dc 90       	ld	r13, X
    427a:	17 97       	sbiw	r26, 0x07	; 7
    427c:	ec 80       	ldd	r14, Y+4	; 0x04
    427e:	fd 80       	ldd	r15, Y+5	; 0x05
    4280:	0e 81       	ldd	r16, Y+6	; 0x06
    4282:	1f 81       	ldd	r17, Y+7	; 0x07
    4284:	91 01       	movw	r18, r2
    4286:	28 1b       	sub	r18, r24
    4288:	39 0b       	sbc	r19, r25
    428a:	b9 01       	movw	r22, r18
    428c:	37 ff       	sbrs	r19, 7
    428e:	04 c0       	rjmp	.+8      	; 0x4298 <_fpadd_parts+0xb2>
    4290:	66 27       	eor	r22, r22
    4292:	77 27       	eor	r23, r23
    4294:	62 1b       	sub	r22, r18
    4296:	73 0b       	sbc	r23, r19
    4298:	60 32       	cpi	r22, 0x20	; 32
    429a:	71 05       	cpc	r23, r1
    429c:	0c f0       	brlt	.+2      	; 0x42a0 <_fpadd_parts+0xba>
    429e:	61 c0       	rjmp	.+194    	; 0x4362 <_fpadd_parts+0x17c>
    42a0:	12 16       	cp	r1, r18
    42a2:	13 06       	cpc	r1, r19
    42a4:	6c f5       	brge	.+90     	; 0x4300 <_fpadd_parts+0x11a>
    42a6:	37 01       	movw	r6, r14
    42a8:	48 01       	movw	r8, r16
    42aa:	06 2e       	mov	r0, r22
    42ac:	04 c0       	rjmp	.+8      	; 0x42b6 <_fpadd_parts+0xd0>
    42ae:	96 94       	lsr	r9
    42b0:	87 94       	ror	r8
    42b2:	77 94       	ror	r7
    42b4:	67 94       	ror	r6
    42b6:	0a 94       	dec	r0
    42b8:	d2 f7       	brpl	.-12     	; 0x42ae <_fpadd_parts+0xc8>
    42ba:	21 e0       	ldi	r18, 0x01	; 1
    42bc:	30 e0       	ldi	r19, 0x00	; 0
    42be:	40 e0       	ldi	r20, 0x00	; 0
    42c0:	50 e0       	ldi	r21, 0x00	; 0
    42c2:	04 c0       	rjmp	.+8      	; 0x42cc <_fpadd_parts+0xe6>
    42c4:	22 0f       	add	r18, r18
    42c6:	33 1f       	adc	r19, r19
    42c8:	44 1f       	adc	r20, r20
    42ca:	55 1f       	adc	r21, r21
    42cc:	6a 95       	dec	r22
    42ce:	d2 f7       	brpl	.-12     	; 0x42c4 <_fpadd_parts+0xde>
    42d0:	21 50       	subi	r18, 0x01	; 1
    42d2:	30 40       	sbci	r19, 0x00	; 0
    42d4:	40 40       	sbci	r20, 0x00	; 0
    42d6:	50 40       	sbci	r21, 0x00	; 0
    42d8:	2e 21       	and	r18, r14
    42da:	3f 21       	and	r19, r15
    42dc:	40 23       	and	r20, r16
    42de:	51 23       	and	r21, r17
    42e0:	21 15       	cp	r18, r1
    42e2:	31 05       	cpc	r19, r1
    42e4:	41 05       	cpc	r20, r1
    42e6:	51 05       	cpc	r21, r1
    42e8:	21 f0       	breq	.+8      	; 0x42f2 <_fpadd_parts+0x10c>
    42ea:	21 e0       	ldi	r18, 0x01	; 1
    42ec:	30 e0       	ldi	r19, 0x00	; 0
    42ee:	40 e0       	ldi	r20, 0x00	; 0
    42f0:	50 e0       	ldi	r21, 0x00	; 0
    42f2:	79 01       	movw	r14, r18
    42f4:	8a 01       	movw	r16, r20
    42f6:	e6 28       	or	r14, r6
    42f8:	f7 28       	or	r15, r7
    42fa:	08 29       	or	r16, r8
    42fc:	19 29       	or	r17, r9
    42fe:	3c c0       	rjmp	.+120    	; 0x4378 <_fpadd_parts+0x192>
    4300:	23 2b       	or	r18, r19
    4302:	d1 f1       	breq	.+116    	; 0x4378 <_fpadd_parts+0x192>
    4304:	26 0e       	add	r2, r22
    4306:	37 1e       	adc	r3, r23
    4308:	35 01       	movw	r6, r10
    430a:	46 01       	movw	r8, r12
    430c:	06 2e       	mov	r0, r22
    430e:	04 c0       	rjmp	.+8      	; 0x4318 <_fpadd_parts+0x132>
    4310:	96 94       	lsr	r9
    4312:	87 94       	ror	r8
    4314:	77 94       	ror	r7
    4316:	67 94       	ror	r6
    4318:	0a 94       	dec	r0
    431a:	d2 f7       	brpl	.-12     	; 0x4310 <_fpadd_parts+0x12a>
    431c:	21 e0       	ldi	r18, 0x01	; 1
    431e:	30 e0       	ldi	r19, 0x00	; 0
    4320:	40 e0       	ldi	r20, 0x00	; 0
    4322:	50 e0       	ldi	r21, 0x00	; 0
    4324:	04 c0       	rjmp	.+8      	; 0x432e <_fpadd_parts+0x148>
    4326:	22 0f       	add	r18, r18
    4328:	33 1f       	adc	r19, r19
    432a:	44 1f       	adc	r20, r20
    432c:	55 1f       	adc	r21, r21
    432e:	6a 95       	dec	r22
    4330:	d2 f7       	brpl	.-12     	; 0x4326 <_fpadd_parts+0x140>
    4332:	21 50       	subi	r18, 0x01	; 1
    4334:	30 40       	sbci	r19, 0x00	; 0
    4336:	40 40       	sbci	r20, 0x00	; 0
    4338:	50 40       	sbci	r21, 0x00	; 0
    433a:	2a 21       	and	r18, r10
    433c:	3b 21       	and	r19, r11
    433e:	4c 21       	and	r20, r12
    4340:	5d 21       	and	r21, r13
    4342:	21 15       	cp	r18, r1
    4344:	31 05       	cpc	r19, r1
    4346:	41 05       	cpc	r20, r1
    4348:	51 05       	cpc	r21, r1
    434a:	21 f0       	breq	.+8      	; 0x4354 <_fpadd_parts+0x16e>
    434c:	21 e0       	ldi	r18, 0x01	; 1
    434e:	30 e0       	ldi	r19, 0x00	; 0
    4350:	40 e0       	ldi	r20, 0x00	; 0
    4352:	50 e0       	ldi	r21, 0x00	; 0
    4354:	59 01       	movw	r10, r18
    4356:	6a 01       	movw	r12, r20
    4358:	a6 28       	or	r10, r6
    435a:	b7 28       	or	r11, r7
    435c:	c8 28       	or	r12, r8
    435e:	d9 28       	or	r13, r9
    4360:	0b c0       	rjmp	.+22     	; 0x4378 <_fpadd_parts+0x192>
    4362:	82 15       	cp	r24, r2
    4364:	93 05       	cpc	r25, r3
    4366:	2c f0       	brlt	.+10     	; 0x4372 <_fpadd_parts+0x18c>
    4368:	1c 01       	movw	r2, r24
    436a:	aa 24       	eor	r10, r10
    436c:	bb 24       	eor	r11, r11
    436e:	65 01       	movw	r12, r10
    4370:	03 c0       	rjmp	.+6      	; 0x4378 <_fpadd_parts+0x192>
    4372:	ee 24       	eor	r14, r14
    4374:	ff 24       	eor	r15, r15
    4376:	87 01       	movw	r16, r14
    4378:	11 96       	adiw	r26, 0x01	; 1
    437a:	9c 91       	ld	r25, X
    437c:	d2 01       	movw	r26, r4
    437e:	11 96       	adiw	r26, 0x01	; 1
    4380:	8c 91       	ld	r24, X
    4382:	98 17       	cp	r25, r24
    4384:	09 f4       	brne	.+2      	; 0x4388 <_fpadd_parts+0x1a2>
    4386:	45 c0       	rjmp	.+138    	; 0x4412 <_fpadd_parts+0x22c>
    4388:	99 23       	and	r25, r25
    438a:	39 f0       	breq	.+14     	; 0x439a <_fpadd_parts+0x1b4>
    438c:	a8 01       	movw	r20, r16
    438e:	97 01       	movw	r18, r14
    4390:	2a 19       	sub	r18, r10
    4392:	3b 09       	sbc	r19, r11
    4394:	4c 09       	sbc	r20, r12
    4396:	5d 09       	sbc	r21, r13
    4398:	06 c0       	rjmp	.+12     	; 0x43a6 <_fpadd_parts+0x1c0>
    439a:	a6 01       	movw	r20, r12
    439c:	95 01       	movw	r18, r10
    439e:	2e 19       	sub	r18, r14
    43a0:	3f 09       	sbc	r19, r15
    43a2:	40 0b       	sbc	r20, r16
    43a4:	51 0b       	sbc	r21, r17
    43a6:	57 fd       	sbrc	r21, 7
    43a8:	08 c0       	rjmp	.+16     	; 0x43ba <_fpadd_parts+0x1d4>
    43aa:	11 82       	std	Z+1, r1	; 0x01
    43ac:	33 82       	std	Z+3, r3	; 0x03
    43ae:	22 82       	std	Z+2, r2	; 0x02
    43b0:	24 83       	std	Z+4, r18	; 0x04
    43b2:	35 83       	std	Z+5, r19	; 0x05
    43b4:	46 83       	std	Z+6, r20	; 0x06
    43b6:	57 83       	std	Z+7, r21	; 0x07
    43b8:	1d c0       	rjmp	.+58     	; 0x43f4 <_fpadd_parts+0x20e>
    43ba:	81 e0       	ldi	r24, 0x01	; 1
    43bc:	81 83       	std	Z+1, r24	; 0x01
    43be:	33 82       	std	Z+3, r3	; 0x03
    43c0:	22 82       	std	Z+2, r2	; 0x02
    43c2:	88 27       	eor	r24, r24
    43c4:	99 27       	eor	r25, r25
    43c6:	dc 01       	movw	r26, r24
    43c8:	82 1b       	sub	r24, r18
    43ca:	93 0b       	sbc	r25, r19
    43cc:	a4 0b       	sbc	r26, r20
    43ce:	b5 0b       	sbc	r27, r21
    43d0:	84 83       	std	Z+4, r24	; 0x04
    43d2:	95 83       	std	Z+5, r25	; 0x05
    43d4:	a6 83       	std	Z+6, r26	; 0x06
    43d6:	b7 83       	std	Z+7, r27	; 0x07
    43d8:	0d c0       	rjmp	.+26     	; 0x43f4 <_fpadd_parts+0x20e>
    43da:	22 0f       	add	r18, r18
    43dc:	33 1f       	adc	r19, r19
    43de:	44 1f       	adc	r20, r20
    43e0:	55 1f       	adc	r21, r21
    43e2:	24 83       	std	Z+4, r18	; 0x04
    43e4:	35 83       	std	Z+5, r19	; 0x05
    43e6:	46 83       	std	Z+6, r20	; 0x06
    43e8:	57 83       	std	Z+7, r21	; 0x07
    43ea:	82 81       	ldd	r24, Z+2	; 0x02
    43ec:	93 81       	ldd	r25, Z+3	; 0x03
    43ee:	01 97       	sbiw	r24, 0x01	; 1
    43f0:	93 83       	std	Z+3, r25	; 0x03
    43f2:	82 83       	std	Z+2, r24	; 0x02
    43f4:	24 81       	ldd	r18, Z+4	; 0x04
    43f6:	35 81       	ldd	r19, Z+5	; 0x05
    43f8:	46 81       	ldd	r20, Z+6	; 0x06
    43fa:	57 81       	ldd	r21, Z+7	; 0x07
    43fc:	da 01       	movw	r26, r20
    43fe:	c9 01       	movw	r24, r18
    4400:	01 97       	sbiw	r24, 0x01	; 1
    4402:	a1 09       	sbc	r26, r1
    4404:	b1 09       	sbc	r27, r1
    4406:	8f 5f       	subi	r24, 0xFF	; 255
    4408:	9f 4f       	sbci	r25, 0xFF	; 255
    440a:	af 4f       	sbci	r26, 0xFF	; 255
    440c:	bf 43       	sbci	r27, 0x3F	; 63
    440e:	28 f3       	brcs	.-54     	; 0x43da <_fpadd_parts+0x1f4>
    4410:	0b c0       	rjmp	.+22     	; 0x4428 <_fpadd_parts+0x242>
    4412:	91 83       	std	Z+1, r25	; 0x01
    4414:	33 82       	std	Z+3, r3	; 0x03
    4416:	22 82       	std	Z+2, r2	; 0x02
    4418:	ea 0c       	add	r14, r10
    441a:	fb 1c       	adc	r15, r11
    441c:	0c 1d       	adc	r16, r12
    441e:	1d 1d       	adc	r17, r13
    4420:	e4 82       	std	Z+4, r14	; 0x04
    4422:	f5 82       	std	Z+5, r15	; 0x05
    4424:	06 83       	std	Z+6, r16	; 0x06
    4426:	17 83       	std	Z+7, r17	; 0x07
    4428:	83 e0       	ldi	r24, 0x03	; 3
    442a:	80 83       	st	Z, r24
    442c:	24 81       	ldd	r18, Z+4	; 0x04
    442e:	35 81       	ldd	r19, Z+5	; 0x05
    4430:	46 81       	ldd	r20, Z+6	; 0x06
    4432:	57 81       	ldd	r21, Z+7	; 0x07
    4434:	57 ff       	sbrs	r21, 7
    4436:	1a c0       	rjmp	.+52     	; 0x446c <_fpadd_parts+0x286>
    4438:	c9 01       	movw	r24, r18
    443a:	aa 27       	eor	r26, r26
    443c:	97 fd       	sbrc	r25, 7
    443e:	a0 95       	com	r26
    4440:	ba 2f       	mov	r27, r26
    4442:	81 70       	andi	r24, 0x01	; 1
    4444:	90 70       	andi	r25, 0x00	; 0
    4446:	a0 70       	andi	r26, 0x00	; 0
    4448:	b0 70       	andi	r27, 0x00	; 0
    444a:	56 95       	lsr	r21
    444c:	47 95       	ror	r20
    444e:	37 95       	ror	r19
    4450:	27 95       	ror	r18
    4452:	82 2b       	or	r24, r18
    4454:	93 2b       	or	r25, r19
    4456:	a4 2b       	or	r26, r20
    4458:	b5 2b       	or	r27, r21
    445a:	84 83       	std	Z+4, r24	; 0x04
    445c:	95 83       	std	Z+5, r25	; 0x05
    445e:	a6 83       	std	Z+6, r26	; 0x06
    4460:	b7 83       	std	Z+7, r27	; 0x07
    4462:	82 81       	ldd	r24, Z+2	; 0x02
    4464:	93 81       	ldd	r25, Z+3	; 0x03
    4466:	01 96       	adiw	r24, 0x01	; 1
    4468:	93 83       	std	Z+3, r25	; 0x03
    446a:	82 83       	std	Z+2, r24	; 0x02
    446c:	df 01       	movw	r26, r30
    446e:	01 c0       	rjmp	.+2      	; 0x4472 <_fpadd_parts+0x28c>
    4470:	d2 01       	movw	r26, r4
    4472:	cd 01       	movw	r24, r26
    4474:	cd b7       	in	r28, 0x3d	; 61
    4476:	de b7       	in	r29, 0x3e	; 62
    4478:	e2 e1       	ldi	r30, 0x12	; 18
    447a:	0c 94 53 28 	jmp	0x50a6	; 0x50a6 <__epilogue_restores__>

0000447e <__subsf3>:
    447e:	a0 e2       	ldi	r26, 0x20	; 32
    4480:	b0 e0       	ldi	r27, 0x00	; 0
    4482:	e5 e4       	ldi	r30, 0x45	; 69
    4484:	f2 e2       	ldi	r31, 0x22	; 34
    4486:	0c 94 43 28 	jmp	0x5086	; 0x5086 <__prologue_saves__+0x18>
    448a:	69 83       	std	Y+1, r22	; 0x01
    448c:	7a 83       	std	Y+2, r23	; 0x02
    448e:	8b 83       	std	Y+3, r24	; 0x03
    4490:	9c 83       	std	Y+4, r25	; 0x04
    4492:	2d 83       	std	Y+5, r18	; 0x05
    4494:	3e 83       	std	Y+6, r19	; 0x06
    4496:	4f 83       	std	Y+7, r20	; 0x07
    4498:	58 87       	std	Y+8, r21	; 0x08
    449a:	e9 e0       	ldi	r30, 0x09	; 9
    449c:	ee 2e       	mov	r14, r30
    449e:	f1 2c       	mov	r15, r1
    44a0:	ec 0e       	add	r14, r28
    44a2:	fd 1e       	adc	r15, r29
    44a4:	ce 01       	movw	r24, r28
    44a6:	01 96       	adiw	r24, 0x01	; 1
    44a8:	b7 01       	movw	r22, r14
    44aa:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    44ae:	8e 01       	movw	r16, r28
    44b0:	0f 5e       	subi	r16, 0xEF	; 239
    44b2:	1f 4f       	sbci	r17, 0xFF	; 255
    44b4:	ce 01       	movw	r24, r28
    44b6:	05 96       	adiw	r24, 0x05	; 5
    44b8:	b8 01       	movw	r22, r16
    44ba:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    44be:	8a 89       	ldd	r24, Y+18	; 0x12
    44c0:	91 e0       	ldi	r25, 0x01	; 1
    44c2:	89 27       	eor	r24, r25
    44c4:	8a 8b       	std	Y+18, r24	; 0x12
    44c6:	c7 01       	movw	r24, r14
    44c8:	b8 01       	movw	r22, r16
    44ca:	ae 01       	movw	r20, r28
    44cc:	47 5e       	subi	r20, 0xE7	; 231
    44ce:	5f 4f       	sbci	r21, 0xFF	; 255
    44d0:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <_fpadd_parts>
    44d4:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__pack_f>
    44d8:	a0 96       	adiw	r28, 0x20	; 32
    44da:	e6 e0       	ldi	r30, 0x06	; 6
    44dc:	0c 94 5f 28 	jmp	0x50be	; 0x50be <__epilogue_restores__+0x18>

000044e0 <__addsf3>:
    44e0:	a0 e2       	ldi	r26, 0x20	; 32
    44e2:	b0 e0       	ldi	r27, 0x00	; 0
    44e4:	e6 e7       	ldi	r30, 0x76	; 118
    44e6:	f2 e2       	ldi	r31, 0x22	; 34
    44e8:	0c 94 43 28 	jmp	0x5086	; 0x5086 <__prologue_saves__+0x18>
    44ec:	69 83       	std	Y+1, r22	; 0x01
    44ee:	7a 83       	std	Y+2, r23	; 0x02
    44f0:	8b 83       	std	Y+3, r24	; 0x03
    44f2:	9c 83       	std	Y+4, r25	; 0x04
    44f4:	2d 83       	std	Y+5, r18	; 0x05
    44f6:	3e 83       	std	Y+6, r19	; 0x06
    44f8:	4f 83       	std	Y+7, r20	; 0x07
    44fa:	58 87       	std	Y+8, r21	; 0x08
    44fc:	f9 e0       	ldi	r31, 0x09	; 9
    44fe:	ef 2e       	mov	r14, r31
    4500:	f1 2c       	mov	r15, r1
    4502:	ec 0e       	add	r14, r28
    4504:	fd 1e       	adc	r15, r29
    4506:	ce 01       	movw	r24, r28
    4508:	01 96       	adiw	r24, 0x01	; 1
    450a:	b7 01       	movw	r22, r14
    450c:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    4510:	8e 01       	movw	r16, r28
    4512:	0f 5e       	subi	r16, 0xEF	; 239
    4514:	1f 4f       	sbci	r17, 0xFF	; 255
    4516:	ce 01       	movw	r24, r28
    4518:	05 96       	adiw	r24, 0x05	; 5
    451a:	b8 01       	movw	r22, r16
    451c:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    4520:	c7 01       	movw	r24, r14
    4522:	b8 01       	movw	r22, r16
    4524:	ae 01       	movw	r20, r28
    4526:	47 5e       	subi	r20, 0xE7	; 231
    4528:	5f 4f       	sbci	r21, 0xFF	; 255
    452a:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <_fpadd_parts>
    452e:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__pack_f>
    4532:	a0 96       	adiw	r28, 0x20	; 32
    4534:	e6 e0       	ldi	r30, 0x06	; 6
    4536:	0c 94 5f 28 	jmp	0x50be	; 0x50be <__epilogue_restores__+0x18>

0000453a <__mulsf3>:
    453a:	a0 e2       	ldi	r26, 0x20	; 32
    453c:	b0 e0       	ldi	r27, 0x00	; 0
    453e:	e3 ea       	ldi	r30, 0xA3	; 163
    4540:	f2 e2       	ldi	r31, 0x22	; 34
    4542:	0c 94 37 28 	jmp	0x506e	; 0x506e <__prologue_saves__>
    4546:	69 83       	std	Y+1, r22	; 0x01
    4548:	7a 83       	std	Y+2, r23	; 0x02
    454a:	8b 83       	std	Y+3, r24	; 0x03
    454c:	9c 83       	std	Y+4, r25	; 0x04
    454e:	2d 83       	std	Y+5, r18	; 0x05
    4550:	3e 83       	std	Y+6, r19	; 0x06
    4552:	4f 83       	std	Y+7, r20	; 0x07
    4554:	58 87       	std	Y+8, r21	; 0x08
    4556:	ce 01       	movw	r24, r28
    4558:	01 96       	adiw	r24, 0x01	; 1
    455a:	be 01       	movw	r22, r28
    455c:	67 5f       	subi	r22, 0xF7	; 247
    455e:	7f 4f       	sbci	r23, 0xFF	; 255
    4560:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    4564:	ce 01       	movw	r24, r28
    4566:	05 96       	adiw	r24, 0x05	; 5
    4568:	be 01       	movw	r22, r28
    456a:	6f 5e       	subi	r22, 0xEF	; 239
    456c:	7f 4f       	sbci	r23, 0xFF	; 255
    456e:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    4572:	99 85       	ldd	r25, Y+9	; 0x09
    4574:	92 30       	cpi	r25, 0x02	; 2
    4576:	88 f0       	brcs	.+34     	; 0x459a <__mulsf3+0x60>
    4578:	89 89       	ldd	r24, Y+17	; 0x11
    457a:	82 30       	cpi	r24, 0x02	; 2
    457c:	c8 f0       	brcs	.+50     	; 0x45b0 <__mulsf3+0x76>
    457e:	94 30       	cpi	r25, 0x04	; 4
    4580:	19 f4       	brne	.+6      	; 0x4588 <__mulsf3+0x4e>
    4582:	82 30       	cpi	r24, 0x02	; 2
    4584:	51 f4       	brne	.+20     	; 0x459a <__mulsf3+0x60>
    4586:	04 c0       	rjmp	.+8      	; 0x4590 <__mulsf3+0x56>
    4588:	84 30       	cpi	r24, 0x04	; 4
    458a:	29 f4       	brne	.+10     	; 0x4596 <__mulsf3+0x5c>
    458c:	92 30       	cpi	r25, 0x02	; 2
    458e:	81 f4       	brne	.+32     	; 0x45b0 <__mulsf3+0x76>
    4590:	8a e6       	ldi	r24, 0x6A	; 106
    4592:	91 e0       	ldi	r25, 0x01	; 1
    4594:	c6 c0       	rjmp	.+396    	; 0x4722 <__mulsf3+0x1e8>
    4596:	92 30       	cpi	r25, 0x02	; 2
    4598:	49 f4       	brne	.+18     	; 0x45ac <__mulsf3+0x72>
    459a:	20 e0       	ldi	r18, 0x00	; 0
    459c:	9a 85       	ldd	r25, Y+10	; 0x0a
    459e:	8a 89       	ldd	r24, Y+18	; 0x12
    45a0:	98 13       	cpse	r25, r24
    45a2:	21 e0       	ldi	r18, 0x01	; 1
    45a4:	2a 87       	std	Y+10, r18	; 0x0a
    45a6:	ce 01       	movw	r24, r28
    45a8:	09 96       	adiw	r24, 0x09	; 9
    45aa:	bb c0       	rjmp	.+374    	; 0x4722 <__mulsf3+0x1e8>
    45ac:	82 30       	cpi	r24, 0x02	; 2
    45ae:	49 f4       	brne	.+18     	; 0x45c2 <__mulsf3+0x88>
    45b0:	20 e0       	ldi	r18, 0x00	; 0
    45b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    45b4:	8a 89       	ldd	r24, Y+18	; 0x12
    45b6:	98 13       	cpse	r25, r24
    45b8:	21 e0       	ldi	r18, 0x01	; 1
    45ba:	2a 8b       	std	Y+18, r18	; 0x12
    45bc:	ce 01       	movw	r24, r28
    45be:	41 96       	adiw	r24, 0x11	; 17
    45c0:	b0 c0       	rjmp	.+352    	; 0x4722 <__mulsf3+0x1e8>
    45c2:	2d 84       	ldd	r2, Y+13	; 0x0d
    45c4:	3e 84       	ldd	r3, Y+14	; 0x0e
    45c6:	4f 84       	ldd	r4, Y+15	; 0x0f
    45c8:	58 88       	ldd	r5, Y+16	; 0x10
    45ca:	6d 88       	ldd	r6, Y+21	; 0x15
    45cc:	7e 88       	ldd	r7, Y+22	; 0x16
    45ce:	8f 88       	ldd	r8, Y+23	; 0x17
    45d0:	98 8c       	ldd	r9, Y+24	; 0x18
    45d2:	ee 24       	eor	r14, r14
    45d4:	ff 24       	eor	r15, r15
    45d6:	87 01       	movw	r16, r14
    45d8:	aa 24       	eor	r10, r10
    45da:	bb 24       	eor	r11, r11
    45dc:	65 01       	movw	r12, r10
    45de:	40 e0       	ldi	r20, 0x00	; 0
    45e0:	50 e0       	ldi	r21, 0x00	; 0
    45e2:	60 e0       	ldi	r22, 0x00	; 0
    45e4:	70 e0       	ldi	r23, 0x00	; 0
    45e6:	e0 e0       	ldi	r30, 0x00	; 0
    45e8:	f0 e0       	ldi	r31, 0x00	; 0
    45ea:	c1 01       	movw	r24, r2
    45ec:	81 70       	andi	r24, 0x01	; 1
    45ee:	90 70       	andi	r25, 0x00	; 0
    45f0:	89 2b       	or	r24, r25
    45f2:	e9 f0       	breq	.+58     	; 0x462e <__mulsf3+0xf4>
    45f4:	e6 0c       	add	r14, r6
    45f6:	f7 1c       	adc	r15, r7
    45f8:	08 1d       	adc	r16, r8
    45fa:	19 1d       	adc	r17, r9
    45fc:	9a 01       	movw	r18, r20
    45fe:	ab 01       	movw	r20, r22
    4600:	2a 0d       	add	r18, r10
    4602:	3b 1d       	adc	r19, r11
    4604:	4c 1d       	adc	r20, r12
    4606:	5d 1d       	adc	r21, r13
    4608:	80 e0       	ldi	r24, 0x00	; 0
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	a0 e0       	ldi	r26, 0x00	; 0
    460e:	b0 e0       	ldi	r27, 0x00	; 0
    4610:	e6 14       	cp	r14, r6
    4612:	f7 04       	cpc	r15, r7
    4614:	08 05       	cpc	r16, r8
    4616:	19 05       	cpc	r17, r9
    4618:	20 f4       	brcc	.+8      	; 0x4622 <__mulsf3+0xe8>
    461a:	81 e0       	ldi	r24, 0x01	; 1
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	a0 e0       	ldi	r26, 0x00	; 0
    4620:	b0 e0       	ldi	r27, 0x00	; 0
    4622:	ba 01       	movw	r22, r20
    4624:	a9 01       	movw	r20, r18
    4626:	48 0f       	add	r20, r24
    4628:	59 1f       	adc	r21, r25
    462a:	6a 1f       	adc	r22, r26
    462c:	7b 1f       	adc	r23, r27
    462e:	aa 0c       	add	r10, r10
    4630:	bb 1c       	adc	r11, r11
    4632:	cc 1c       	adc	r12, r12
    4634:	dd 1c       	adc	r13, r13
    4636:	97 fe       	sbrs	r9, 7
    4638:	08 c0       	rjmp	.+16     	; 0x464a <__mulsf3+0x110>
    463a:	81 e0       	ldi	r24, 0x01	; 1
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	a0 e0       	ldi	r26, 0x00	; 0
    4640:	b0 e0       	ldi	r27, 0x00	; 0
    4642:	a8 2a       	or	r10, r24
    4644:	b9 2a       	or	r11, r25
    4646:	ca 2a       	or	r12, r26
    4648:	db 2a       	or	r13, r27
    464a:	31 96       	adiw	r30, 0x01	; 1
    464c:	e0 32       	cpi	r30, 0x20	; 32
    464e:	f1 05       	cpc	r31, r1
    4650:	49 f0       	breq	.+18     	; 0x4664 <__mulsf3+0x12a>
    4652:	66 0c       	add	r6, r6
    4654:	77 1c       	adc	r7, r7
    4656:	88 1c       	adc	r8, r8
    4658:	99 1c       	adc	r9, r9
    465a:	56 94       	lsr	r5
    465c:	47 94       	ror	r4
    465e:	37 94       	ror	r3
    4660:	27 94       	ror	r2
    4662:	c3 cf       	rjmp	.-122    	; 0x45ea <__mulsf3+0xb0>
    4664:	fa 85       	ldd	r31, Y+10	; 0x0a
    4666:	ea 89       	ldd	r30, Y+18	; 0x12
    4668:	2b 89       	ldd	r18, Y+19	; 0x13
    466a:	3c 89       	ldd	r19, Y+20	; 0x14
    466c:	8b 85       	ldd	r24, Y+11	; 0x0b
    466e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4670:	28 0f       	add	r18, r24
    4672:	39 1f       	adc	r19, r25
    4674:	2e 5f       	subi	r18, 0xFE	; 254
    4676:	3f 4f       	sbci	r19, 0xFF	; 255
    4678:	17 c0       	rjmp	.+46     	; 0x46a8 <__mulsf3+0x16e>
    467a:	ca 01       	movw	r24, r20
    467c:	81 70       	andi	r24, 0x01	; 1
    467e:	90 70       	andi	r25, 0x00	; 0
    4680:	89 2b       	or	r24, r25
    4682:	61 f0       	breq	.+24     	; 0x469c <__mulsf3+0x162>
    4684:	16 95       	lsr	r17
    4686:	07 95       	ror	r16
    4688:	f7 94       	ror	r15
    468a:	e7 94       	ror	r14
    468c:	80 e0       	ldi	r24, 0x00	; 0
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	a0 e0       	ldi	r26, 0x00	; 0
    4692:	b0 e8       	ldi	r27, 0x80	; 128
    4694:	e8 2a       	or	r14, r24
    4696:	f9 2a       	or	r15, r25
    4698:	0a 2b       	or	r16, r26
    469a:	1b 2b       	or	r17, r27
    469c:	76 95       	lsr	r23
    469e:	67 95       	ror	r22
    46a0:	57 95       	ror	r21
    46a2:	47 95       	ror	r20
    46a4:	2f 5f       	subi	r18, 0xFF	; 255
    46a6:	3f 4f       	sbci	r19, 0xFF	; 255
    46a8:	77 fd       	sbrc	r23, 7
    46aa:	e7 cf       	rjmp	.-50     	; 0x467a <__mulsf3+0x140>
    46ac:	0c c0       	rjmp	.+24     	; 0x46c6 <__mulsf3+0x18c>
    46ae:	44 0f       	add	r20, r20
    46b0:	55 1f       	adc	r21, r21
    46b2:	66 1f       	adc	r22, r22
    46b4:	77 1f       	adc	r23, r23
    46b6:	17 fd       	sbrc	r17, 7
    46b8:	41 60       	ori	r20, 0x01	; 1
    46ba:	ee 0c       	add	r14, r14
    46bc:	ff 1c       	adc	r15, r15
    46be:	00 1f       	adc	r16, r16
    46c0:	11 1f       	adc	r17, r17
    46c2:	21 50       	subi	r18, 0x01	; 1
    46c4:	30 40       	sbci	r19, 0x00	; 0
    46c6:	40 30       	cpi	r20, 0x00	; 0
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	59 07       	cpc	r21, r25
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	69 07       	cpc	r22, r25
    46d0:	90 e4       	ldi	r25, 0x40	; 64
    46d2:	79 07       	cpc	r23, r25
    46d4:	60 f3       	brcs	.-40     	; 0x46ae <__mulsf3+0x174>
    46d6:	2b 8f       	std	Y+27, r18	; 0x1b
    46d8:	3c 8f       	std	Y+28, r19	; 0x1c
    46da:	db 01       	movw	r26, r22
    46dc:	ca 01       	movw	r24, r20
    46de:	8f 77       	andi	r24, 0x7F	; 127
    46e0:	90 70       	andi	r25, 0x00	; 0
    46e2:	a0 70       	andi	r26, 0x00	; 0
    46e4:	b0 70       	andi	r27, 0x00	; 0
    46e6:	80 34       	cpi	r24, 0x40	; 64
    46e8:	91 05       	cpc	r25, r1
    46ea:	a1 05       	cpc	r26, r1
    46ec:	b1 05       	cpc	r27, r1
    46ee:	61 f4       	brne	.+24     	; 0x4708 <__mulsf3+0x1ce>
    46f0:	47 fd       	sbrc	r20, 7
    46f2:	0a c0       	rjmp	.+20     	; 0x4708 <__mulsf3+0x1ce>
    46f4:	e1 14       	cp	r14, r1
    46f6:	f1 04       	cpc	r15, r1
    46f8:	01 05       	cpc	r16, r1
    46fa:	11 05       	cpc	r17, r1
    46fc:	29 f0       	breq	.+10     	; 0x4708 <__mulsf3+0x1ce>
    46fe:	40 5c       	subi	r20, 0xC0	; 192
    4700:	5f 4f       	sbci	r21, 0xFF	; 255
    4702:	6f 4f       	sbci	r22, 0xFF	; 255
    4704:	7f 4f       	sbci	r23, 0xFF	; 255
    4706:	40 78       	andi	r20, 0x80	; 128
    4708:	1a 8e       	std	Y+26, r1	; 0x1a
    470a:	fe 17       	cp	r31, r30
    470c:	11 f0       	breq	.+4      	; 0x4712 <__mulsf3+0x1d8>
    470e:	81 e0       	ldi	r24, 0x01	; 1
    4710:	8a 8f       	std	Y+26, r24	; 0x1a
    4712:	4d 8f       	std	Y+29, r20	; 0x1d
    4714:	5e 8f       	std	Y+30, r21	; 0x1e
    4716:	6f 8f       	std	Y+31, r22	; 0x1f
    4718:	78 a3       	std	Y+32, r23	; 0x20
    471a:	83 e0       	ldi	r24, 0x03	; 3
    471c:	89 8f       	std	Y+25, r24	; 0x19
    471e:	ce 01       	movw	r24, r28
    4720:	49 96       	adiw	r24, 0x19	; 25
    4722:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__pack_f>
    4726:	a0 96       	adiw	r28, 0x20	; 32
    4728:	e2 e1       	ldi	r30, 0x12	; 18
    472a:	0c 94 53 28 	jmp	0x50a6	; 0x50a6 <__epilogue_restores__>

0000472e <__divsf3>:
    472e:	a8 e1       	ldi	r26, 0x18	; 24
    4730:	b0 e0       	ldi	r27, 0x00	; 0
    4732:	ed e9       	ldi	r30, 0x9D	; 157
    4734:	f3 e2       	ldi	r31, 0x23	; 35
    4736:	0c 94 3f 28 	jmp	0x507e	; 0x507e <__prologue_saves__+0x10>
    473a:	69 83       	std	Y+1, r22	; 0x01
    473c:	7a 83       	std	Y+2, r23	; 0x02
    473e:	8b 83       	std	Y+3, r24	; 0x03
    4740:	9c 83       	std	Y+4, r25	; 0x04
    4742:	2d 83       	std	Y+5, r18	; 0x05
    4744:	3e 83       	std	Y+6, r19	; 0x06
    4746:	4f 83       	std	Y+7, r20	; 0x07
    4748:	58 87       	std	Y+8, r21	; 0x08
    474a:	b9 e0       	ldi	r27, 0x09	; 9
    474c:	eb 2e       	mov	r14, r27
    474e:	f1 2c       	mov	r15, r1
    4750:	ec 0e       	add	r14, r28
    4752:	fd 1e       	adc	r15, r29
    4754:	ce 01       	movw	r24, r28
    4756:	01 96       	adiw	r24, 0x01	; 1
    4758:	b7 01       	movw	r22, r14
    475a:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    475e:	8e 01       	movw	r16, r28
    4760:	0f 5e       	subi	r16, 0xEF	; 239
    4762:	1f 4f       	sbci	r17, 0xFF	; 255
    4764:	ce 01       	movw	r24, r28
    4766:	05 96       	adiw	r24, 0x05	; 5
    4768:	b8 01       	movw	r22, r16
    476a:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    476e:	29 85       	ldd	r18, Y+9	; 0x09
    4770:	22 30       	cpi	r18, 0x02	; 2
    4772:	08 f4       	brcc	.+2      	; 0x4776 <__divsf3+0x48>
    4774:	7e c0       	rjmp	.+252    	; 0x4872 <__divsf3+0x144>
    4776:	39 89       	ldd	r19, Y+17	; 0x11
    4778:	32 30       	cpi	r19, 0x02	; 2
    477a:	10 f4       	brcc	.+4      	; 0x4780 <__divsf3+0x52>
    477c:	b8 01       	movw	r22, r16
    477e:	7c c0       	rjmp	.+248    	; 0x4878 <__divsf3+0x14a>
    4780:	8a 85       	ldd	r24, Y+10	; 0x0a
    4782:	9a 89       	ldd	r25, Y+18	; 0x12
    4784:	89 27       	eor	r24, r25
    4786:	8a 87       	std	Y+10, r24	; 0x0a
    4788:	24 30       	cpi	r18, 0x04	; 4
    478a:	11 f0       	breq	.+4      	; 0x4790 <__divsf3+0x62>
    478c:	22 30       	cpi	r18, 0x02	; 2
    478e:	31 f4       	brne	.+12     	; 0x479c <__divsf3+0x6e>
    4790:	23 17       	cp	r18, r19
    4792:	09 f0       	breq	.+2      	; 0x4796 <__divsf3+0x68>
    4794:	6e c0       	rjmp	.+220    	; 0x4872 <__divsf3+0x144>
    4796:	6a e6       	ldi	r22, 0x6A	; 106
    4798:	71 e0       	ldi	r23, 0x01	; 1
    479a:	6e c0       	rjmp	.+220    	; 0x4878 <__divsf3+0x14a>
    479c:	34 30       	cpi	r19, 0x04	; 4
    479e:	39 f4       	brne	.+14     	; 0x47ae <__divsf3+0x80>
    47a0:	1d 86       	std	Y+13, r1	; 0x0d
    47a2:	1e 86       	std	Y+14, r1	; 0x0e
    47a4:	1f 86       	std	Y+15, r1	; 0x0f
    47a6:	18 8a       	std	Y+16, r1	; 0x10
    47a8:	1c 86       	std	Y+12, r1	; 0x0c
    47aa:	1b 86       	std	Y+11, r1	; 0x0b
    47ac:	04 c0       	rjmp	.+8      	; 0x47b6 <__divsf3+0x88>
    47ae:	32 30       	cpi	r19, 0x02	; 2
    47b0:	21 f4       	brne	.+8      	; 0x47ba <__divsf3+0x8c>
    47b2:	84 e0       	ldi	r24, 0x04	; 4
    47b4:	89 87       	std	Y+9, r24	; 0x09
    47b6:	b7 01       	movw	r22, r14
    47b8:	5f c0       	rjmp	.+190    	; 0x4878 <__divsf3+0x14a>
    47ba:	2b 85       	ldd	r18, Y+11	; 0x0b
    47bc:	3c 85       	ldd	r19, Y+12	; 0x0c
    47be:	8b 89       	ldd	r24, Y+19	; 0x13
    47c0:	9c 89       	ldd	r25, Y+20	; 0x14
    47c2:	28 1b       	sub	r18, r24
    47c4:	39 0b       	sbc	r19, r25
    47c6:	3c 87       	std	Y+12, r19	; 0x0c
    47c8:	2b 87       	std	Y+11, r18	; 0x0b
    47ca:	ed 84       	ldd	r14, Y+13	; 0x0d
    47cc:	fe 84       	ldd	r15, Y+14	; 0x0e
    47ce:	0f 85       	ldd	r16, Y+15	; 0x0f
    47d0:	18 89       	ldd	r17, Y+16	; 0x10
    47d2:	ad 88       	ldd	r10, Y+21	; 0x15
    47d4:	be 88       	ldd	r11, Y+22	; 0x16
    47d6:	cf 88       	ldd	r12, Y+23	; 0x17
    47d8:	d8 8c       	ldd	r13, Y+24	; 0x18
    47da:	ea 14       	cp	r14, r10
    47dc:	fb 04       	cpc	r15, r11
    47de:	0c 05       	cpc	r16, r12
    47e0:	1d 05       	cpc	r17, r13
    47e2:	40 f4       	brcc	.+16     	; 0x47f4 <__divsf3+0xc6>
    47e4:	ee 0c       	add	r14, r14
    47e6:	ff 1c       	adc	r15, r15
    47e8:	00 1f       	adc	r16, r16
    47ea:	11 1f       	adc	r17, r17
    47ec:	21 50       	subi	r18, 0x01	; 1
    47ee:	30 40       	sbci	r19, 0x00	; 0
    47f0:	3c 87       	std	Y+12, r19	; 0x0c
    47f2:	2b 87       	std	Y+11, r18	; 0x0b
    47f4:	20 e0       	ldi	r18, 0x00	; 0
    47f6:	30 e0       	ldi	r19, 0x00	; 0
    47f8:	40 e0       	ldi	r20, 0x00	; 0
    47fa:	50 e0       	ldi	r21, 0x00	; 0
    47fc:	80 e0       	ldi	r24, 0x00	; 0
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	a0 e0       	ldi	r26, 0x00	; 0
    4802:	b0 e4       	ldi	r27, 0x40	; 64
    4804:	60 e0       	ldi	r22, 0x00	; 0
    4806:	70 e0       	ldi	r23, 0x00	; 0
    4808:	ea 14       	cp	r14, r10
    480a:	fb 04       	cpc	r15, r11
    480c:	0c 05       	cpc	r16, r12
    480e:	1d 05       	cpc	r17, r13
    4810:	40 f0       	brcs	.+16     	; 0x4822 <__divsf3+0xf4>
    4812:	28 2b       	or	r18, r24
    4814:	39 2b       	or	r19, r25
    4816:	4a 2b       	or	r20, r26
    4818:	5b 2b       	or	r21, r27
    481a:	ea 18       	sub	r14, r10
    481c:	fb 08       	sbc	r15, r11
    481e:	0c 09       	sbc	r16, r12
    4820:	1d 09       	sbc	r17, r13
    4822:	b6 95       	lsr	r27
    4824:	a7 95       	ror	r26
    4826:	97 95       	ror	r25
    4828:	87 95       	ror	r24
    482a:	ee 0c       	add	r14, r14
    482c:	ff 1c       	adc	r15, r15
    482e:	00 1f       	adc	r16, r16
    4830:	11 1f       	adc	r17, r17
    4832:	6f 5f       	subi	r22, 0xFF	; 255
    4834:	7f 4f       	sbci	r23, 0xFF	; 255
    4836:	6f 31       	cpi	r22, 0x1F	; 31
    4838:	71 05       	cpc	r23, r1
    483a:	31 f7       	brne	.-52     	; 0x4808 <__divsf3+0xda>
    483c:	da 01       	movw	r26, r20
    483e:	c9 01       	movw	r24, r18
    4840:	8f 77       	andi	r24, 0x7F	; 127
    4842:	90 70       	andi	r25, 0x00	; 0
    4844:	a0 70       	andi	r26, 0x00	; 0
    4846:	b0 70       	andi	r27, 0x00	; 0
    4848:	80 34       	cpi	r24, 0x40	; 64
    484a:	91 05       	cpc	r25, r1
    484c:	a1 05       	cpc	r26, r1
    484e:	b1 05       	cpc	r27, r1
    4850:	61 f4       	brne	.+24     	; 0x486a <__divsf3+0x13c>
    4852:	27 fd       	sbrc	r18, 7
    4854:	0a c0       	rjmp	.+20     	; 0x486a <__divsf3+0x13c>
    4856:	e1 14       	cp	r14, r1
    4858:	f1 04       	cpc	r15, r1
    485a:	01 05       	cpc	r16, r1
    485c:	11 05       	cpc	r17, r1
    485e:	29 f0       	breq	.+10     	; 0x486a <__divsf3+0x13c>
    4860:	20 5c       	subi	r18, 0xC0	; 192
    4862:	3f 4f       	sbci	r19, 0xFF	; 255
    4864:	4f 4f       	sbci	r20, 0xFF	; 255
    4866:	5f 4f       	sbci	r21, 0xFF	; 255
    4868:	20 78       	andi	r18, 0x80	; 128
    486a:	2d 87       	std	Y+13, r18	; 0x0d
    486c:	3e 87       	std	Y+14, r19	; 0x0e
    486e:	4f 87       	std	Y+15, r20	; 0x0f
    4870:	58 8b       	std	Y+16, r21	; 0x10
    4872:	be 01       	movw	r22, r28
    4874:	67 5f       	subi	r22, 0xF7	; 247
    4876:	7f 4f       	sbci	r23, 0xFF	; 255
    4878:	cb 01       	movw	r24, r22
    487a:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__pack_f>
    487e:	68 96       	adiw	r28, 0x18	; 24
    4880:	ea e0       	ldi	r30, 0x0A	; 10
    4882:	0c 94 5b 28 	jmp	0x50b6	; 0x50b6 <__epilogue_restores__+0x10>

00004886 <__gtsf2>:
    4886:	a8 e1       	ldi	r26, 0x18	; 24
    4888:	b0 e0       	ldi	r27, 0x00	; 0
    488a:	e9 e4       	ldi	r30, 0x49	; 73
    488c:	f4 e2       	ldi	r31, 0x24	; 36
    488e:	0c 94 43 28 	jmp	0x5086	; 0x5086 <__prologue_saves__+0x18>
    4892:	69 83       	std	Y+1, r22	; 0x01
    4894:	7a 83       	std	Y+2, r23	; 0x02
    4896:	8b 83       	std	Y+3, r24	; 0x03
    4898:	9c 83       	std	Y+4, r25	; 0x04
    489a:	2d 83       	std	Y+5, r18	; 0x05
    489c:	3e 83       	std	Y+6, r19	; 0x06
    489e:	4f 83       	std	Y+7, r20	; 0x07
    48a0:	58 87       	std	Y+8, r21	; 0x08
    48a2:	89 e0       	ldi	r24, 0x09	; 9
    48a4:	e8 2e       	mov	r14, r24
    48a6:	f1 2c       	mov	r15, r1
    48a8:	ec 0e       	add	r14, r28
    48aa:	fd 1e       	adc	r15, r29
    48ac:	ce 01       	movw	r24, r28
    48ae:	01 96       	adiw	r24, 0x01	; 1
    48b0:	b7 01       	movw	r22, r14
    48b2:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    48b6:	8e 01       	movw	r16, r28
    48b8:	0f 5e       	subi	r16, 0xEF	; 239
    48ba:	1f 4f       	sbci	r17, 0xFF	; 255
    48bc:	ce 01       	movw	r24, r28
    48be:	05 96       	adiw	r24, 0x05	; 5
    48c0:	b8 01       	movw	r22, r16
    48c2:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    48c6:	89 85       	ldd	r24, Y+9	; 0x09
    48c8:	82 30       	cpi	r24, 0x02	; 2
    48ca:	40 f0       	brcs	.+16     	; 0x48dc <__gtsf2+0x56>
    48cc:	89 89       	ldd	r24, Y+17	; 0x11
    48ce:	82 30       	cpi	r24, 0x02	; 2
    48d0:	28 f0       	brcs	.+10     	; 0x48dc <__gtsf2+0x56>
    48d2:	c7 01       	movw	r24, r14
    48d4:	b8 01       	movw	r22, r16
    48d6:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__fpcmp_parts_f>
    48da:	01 c0       	rjmp	.+2      	; 0x48de <__gtsf2+0x58>
    48dc:	8f ef       	ldi	r24, 0xFF	; 255
    48de:	68 96       	adiw	r28, 0x18	; 24
    48e0:	e6 e0       	ldi	r30, 0x06	; 6
    48e2:	0c 94 5f 28 	jmp	0x50be	; 0x50be <__epilogue_restores__+0x18>

000048e6 <__gesf2>:
    48e6:	a8 e1       	ldi	r26, 0x18	; 24
    48e8:	b0 e0       	ldi	r27, 0x00	; 0
    48ea:	e9 e7       	ldi	r30, 0x79	; 121
    48ec:	f4 e2       	ldi	r31, 0x24	; 36
    48ee:	0c 94 43 28 	jmp	0x5086	; 0x5086 <__prologue_saves__+0x18>
    48f2:	69 83       	std	Y+1, r22	; 0x01
    48f4:	7a 83       	std	Y+2, r23	; 0x02
    48f6:	8b 83       	std	Y+3, r24	; 0x03
    48f8:	9c 83       	std	Y+4, r25	; 0x04
    48fa:	2d 83       	std	Y+5, r18	; 0x05
    48fc:	3e 83       	std	Y+6, r19	; 0x06
    48fe:	4f 83       	std	Y+7, r20	; 0x07
    4900:	58 87       	std	Y+8, r21	; 0x08
    4902:	89 e0       	ldi	r24, 0x09	; 9
    4904:	e8 2e       	mov	r14, r24
    4906:	f1 2c       	mov	r15, r1
    4908:	ec 0e       	add	r14, r28
    490a:	fd 1e       	adc	r15, r29
    490c:	ce 01       	movw	r24, r28
    490e:	01 96       	adiw	r24, 0x01	; 1
    4910:	b7 01       	movw	r22, r14
    4912:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    4916:	8e 01       	movw	r16, r28
    4918:	0f 5e       	subi	r16, 0xEF	; 239
    491a:	1f 4f       	sbci	r17, 0xFF	; 255
    491c:	ce 01       	movw	r24, r28
    491e:	05 96       	adiw	r24, 0x05	; 5
    4920:	b8 01       	movw	r22, r16
    4922:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    4926:	89 85       	ldd	r24, Y+9	; 0x09
    4928:	82 30       	cpi	r24, 0x02	; 2
    492a:	40 f0       	brcs	.+16     	; 0x493c <__gesf2+0x56>
    492c:	89 89       	ldd	r24, Y+17	; 0x11
    492e:	82 30       	cpi	r24, 0x02	; 2
    4930:	28 f0       	brcs	.+10     	; 0x493c <__gesf2+0x56>
    4932:	c7 01       	movw	r24, r14
    4934:	b8 01       	movw	r22, r16
    4936:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__fpcmp_parts_f>
    493a:	01 c0       	rjmp	.+2      	; 0x493e <__gesf2+0x58>
    493c:	8f ef       	ldi	r24, 0xFF	; 255
    493e:	68 96       	adiw	r28, 0x18	; 24
    4940:	e6 e0       	ldi	r30, 0x06	; 6
    4942:	0c 94 5f 28 	jmp	0x50be	; 0x50be <__epilogue_restores__+0x18>

00004946 <__ltsf2>:
    4946:	a8 e1       	ldi	r26, 0x18	; 24
    4948:	b0 e0       	ldi	r27, 0x00	; 0
    494a:	e9 ea       	ldi	r30, 0xA9	; 169
    494c:	f4 e2       	ldi	r31, 0x24	; 36
    494e:	0c 94 43 28 	jmp	0x5086	; 0x5086 <__prologue_saves__+0x18>
    4952:	69 83       	std	Y+1, r22	; 0x01
    4954:	7a 83       	std	Y+2, r23	; 0x02
    4956:	8b 83       	std	Y+3, r24	; 0x03
    4958:	9c 83       	std	Y+4, r25	; 0x04
    495a:	2d 83       	std	Y+5, r18	; 0x05
    495c:	3e 83       	std	Y+6, r19	; 0x06
    495e:	4f 83       	std	Y+7, r20	; 0x07
    4960:	58 87       	std	Y+8, r21	; 0x08
    4962:	89 e0       	ldi	r24, 0x09	; 9
    4964:	e8 2e       	mov	r14, r24
    4966:	f1 2c       	mov	r15, r1
    4968:	ec 0e       	add	r14, r28
    496a:	fd 1e       	adc	r15, r29
    496c:	ce 01       	movw	r24, r28
    496e:	01 96       	adiw	r24, 0x01	; 1
    4970:	b7 01       	movw	r22, r14
    4972:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    4976:	8e 01       	movw	r16, r28
    4978:	0f 5e       	subi	r16, 0xEF	; 239
    497a:	1f 4f       	sbci	r17, 0xFF	; 255
    497c:	ce 01       	movw	r24, r28
    497e:	05 96       	adiw	r24, 0x05	; 5
    4980:	b8 01       	movw	r22, r16
    4982:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    4986:	89 85       	ldd	r24, Y+9	; 0x09
    4988:	82 30       	cpi	r24, 0x02	; 2
    498a:	40 f0       	brcs	.+16     	; 0x499c <__ltsf2+0x56>
    498c:	89 89       	ldd	r24, Y+17	; 0x11
    498e:	82 30       	cpi	r24, 0x02	; 2
    4990:	28 f0       	brcs	.+10     	; 0x499c <__ltsf2+0x56>
    4992:	c7 01       	movw	r24, r14
    4994:	b8 01       	movw	r22, r16
    4996:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__fpcmp_parts_f>
    499a:	01 c0       	rjmp	.+2      	; 0x499e <__ltsf2+0x58>
    499c:	81 e0       	ldi	r24, 0x01	; 1
    499e:	68 96       	adiw	r28, 0x18	; 24
    49a0:	e6 e0       	ldi	r30, 0x06	; 6
    49a2:	0c 94 5f 28 	jmp	0x50be	; 0x50be <__epilogue_restores__+0x18>

000049a6 <__lesf2>:
    49a6:	a8 e1       	ldi	r26, 0x18	; 24
    49a8:	b0 e0       	ldi	r27, 0x00	; 0
    49aa:	e9 ed       	ldi	r30, 0xD9	; 217
    49ac:	f4 e2       	ldi	r31, 0x24	; 36
    49ae:	0c 94 43 28 	jmp	0x5086	; 0x5086 <__prologue_saves__+0x18>
    49b2:	69 83       	std	Y+1, r22	; 0x01
    49b4:	7a 83       	std	Y+2, r23	; 0x02
    49b6:	8b 83       	std	Y+3, r24	; 0x03
    49b8:	9c 83       	std	Y+4, r25	; 0x04
    49ba:	2d 83       	std	Y+5, r18	; 0x05
    49bc:	3e 83       	std	Y+6, r19	; 0x06
    49be:	4f 83       	std	Y+7, r20	; 0x07
    49c0:	58 87       	std	Y+8, r21	; 0x08
    49c2:	89 e0       	ldi	r24, 0x09	; 9
    49c4:	e8 2e       	mov	r14, r24
    49c6:	f1 2c       	mov	r15, r1
    49c8:	ec 0e       	add	r14, r28
    49ca:	fd 1e       	adc	r15, r29
    49cc:	ce 01       	movw	r24, r28
    49ce:	01 96       	adiw	r24, 0x01	; 1
    49d0:	b7 01       	movw	r22, r14
    49d2:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    49d6:	8e 01       	movw	r16, r28
    49d8:	0f 5e       	subi	r16, 0xEF	; 239
    49da:	1f 4f       	sbci	r17, 0xFF	; 255
    49dc:	ce 01       	movw	r24, r28
    49de:	05 96       	adiw	r24, 0x05	; 5
    49e0:	b8 01       	movw	r22, r16
    49e2:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    49e6:	89 85       	ldd	r24, Y+9	; 0x09
    49e8:	82 30       	cpi	r24, 0x02	; 2
    49ea:	40 f0       	brcs	.+16     	; 0x49fc <__lesf2+0x56>
    49ec:	89 89       	ldd	r24, Y+17	; 0x11
    49ee:	82 30       	cpi	r24, 0x02	; 2
    49f0:	28 f0       	brcs	.+10     	; 0x49fc <__lesf2+0x56>
    49f2:	c7 01       	movw	r24, r14
    49f4:	b8 01       	movw	r22, r16
    49f6:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__fpcmp_parts_f>
    49fa:	01 c0       	rjmp	.+2      	; 0x49fe <__lesf2+0x58>
    49fc:	81 e0       	ldi	r24, 0x01	; 1
    49fe:	68 96       	adiw	r28, 0x18	; 24
    4a00:	e6 e0       	ldi	r30, 0x06	; 6
    4a02:	0c 94 5f 28 	jmp	0x50be	; 0x50be <__epilogue_restores__+0x18>

00004a06 <__floatsisf>:
    4a06:	a8 e0       	ldi	r26, 0x08	; 8
    4a08:	b0 e0       	ldi	r27, 0x00	; 0
    4a0a:	e9 e0       	ldi	r30, 0x09	; 9
    4a0c:	f5 e2       	ldi	r31, 0x25	; 37
    4a0e:	0c 94 40 28 	jmp	0x5080	; 0x5080 <__prologue_saves__+0x12>
    4a12:	9b 01       	movw	r18, r22
    4a14:	ac 01       	movw	r20, r24
    4a16:	83 e0       	ldi	r24, 0x03	; 3
    4a18:	89 83       	std	Y+1, r24	; 0x01
    4a1a:	da 01       	movw	r26, r20
    4a1c:	c9 01       	movw	r24, r18
    4a1e:	88 27       	eor	r24, r24
    4a20:	b7 fd       	sbrc	r27, 7
    4a22:	83 95       	inc	r24
    4a24:	99 27       	eor	r25, r25
    4a26:	aa 27       	eor	r26, r26
    4a28:	bb 27       	eor	r27, r27
    4a2a:	b8 2e       	mov	r11, r24
    4a2c:	21 15       	cp	r18, r1
    4a2e:	31 05       	cpc	r19, r1
    4a30:	41 05       	cpc	r20, r1
    4a32:	51 05       	cpc	r21, r1
    4a34:	19 f4       	brne	.+6      	; 0x4a3c <__floatsisf+0x36>
    4a36:	82 e0       	ldi	r24, 0x02	; 2
    4a38:	89 83       	std	Y+1, r24	; 0x01
    4a3a:	3a c0       	rjmp	.+116    	; 0x4ab0 <__floatsisf+0xaa>
    4a3c:	88 23       	and	r24, r24
    4a3e:	a9 f0       	breq	.+42     	; 0x4a6a <__floatsisf+0x64>
    4a40:	20 30       	cpi	r18, 0x00	; 0
    4a42:	80 e0       	ldi	r24, 0x00	; 0
    4a44:	38 07       	cpc	r19, r24
    4a46:	80 e0       	ldi	r24, 0x00	; 0
    4a48:	48 07       	cpc	r20, r24
    4a4a:	80 e8       	ldi	r24, 0x80	; 128
    4a4c:	58 07       	cpc	r21, r24
    4a4e:	29 f4       	brne	.+10     	; 0x4a5a <__floatsisf+0x54>
    4a50:	60 e0       	ldi	r22, 0x00	; 0
    4a52:	70 e0       	ldi	r23, 0x00	; 0
    4a54:	80 e0       	ldi	r24, 0x00	; 0
    4a56:	9f ec       	ldi	r25, 0xCF	; 207
    4a58:	30 c0       	rjmp	.+96     	; 0x4aba <__floatsisf+0xb4>
    4a5a:	ee 24       	eor	r14, r14
    4a5c:	ff 24       	eor	r15, r15
    4a5e:	87 01       	movw	r16, r14
    4a60:	e2 1a       	sub	r14, r18
    4a62:	f3 0a       	sbc	r15, r19
    4a64:	04 0b       	sbc	r16, r20
    4a66:	15 0b       	sbc	r17, r21
    4a68:	02 c0       	rjmp	.+4      	; 0x4a6e <__floatsisf+0x68>
    4a6a:	79 01       	movw	r14, r18
    4a6c:	8a 01       	movw	r16, r20
    4a6e:	8e e1       	ldi	r24, 0x1E	; 30
    4a70:	c8 2e       	mov	r12, r24
    4a72:	d1 2c       	mov	r13, r1
    4a74:	dc 82       	std	Y+4, r13	; 0x04
    4a76:	cb 82       	std	Y+3, r12	; 0x03
    4a78:	ed 82       	std	Y+5, r14	; 0x05
    4a7a:	fe 82       	std	Y+6, r15	; 0x06
    4a7c:	0f 83       	std	Y+7, r16	; 0x07
    4a7e:	18 87       	std	Y+8, r17	; 0x08
    4a80:	c8 01       	movw	r24, r16
    4a82:	b7 01       	movw	r22, r14
    4a84:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <__clzsi2>
    4a88:	01 97       	sbiw	r24, 0x01	; 1
    4a8a:	18 16       	cp	r1, r24
    4a8c:	19 06       	cpc	r1, r25
    4a8e:	84 f4       	brge	.+32     	; 0x4ab0 <__floatsisf+0xaa>
    4a90:	08 2e       	mov	r0, r24
    4a92:	04 c0       	rjmp	.+8      	; 0x4a9c <__floatsisf+0x96>
    4a94:	ee 0c       	add	r14, r14
    4a96:	ff 1c       	adc	r15, r15
    4a98:	00 1f       	adc	r16, r16
    4a9a:	11 1f       	adc	r17, r17
    4a9c:	0a 94       	dec	r0
    4a9e:	d2 f7       	brpl	.-12     	; 0x4a94 <__floatsisf+0x8e>
    4aa0:	ed 82       	std	Y+5, r14	; 0x05
    4aa2:	fe 82       	std	Y+6, r15	; 0x06
    4aa4:	0f 83       	std	Y+7, r16	; 0x07
    4aa6:	18 87       	std	Y+8, r17	; 0x08
    4aa8:	c8 1a       	sub	r12, r24
    4aaa:	d9 0a       	sbc	r13, r25
    4aac:	dc 82       	std	Y+4, r13	; 0x04
    4aae:	cb 82       	std	Y+3, r12	; 0x03
    4ab0:	ba 82       	std	Y+2, r11	; 0x02
    4ab2:	ce 01       	movw	r24, r28
    4ab4:	01 96       	adiw	r24, 0x01	; 1
    4ab6:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__pack_f>
    4aba:	28 96       	adiw	r28, 0x08	; 8
    4abc:	e9 e0       	ldi	r30, 0x09	; 9
    4abe:	0c 94 5c 28 	jmp	0x50b8	; 0x50b8 <__epilogue_restores__+0x12>

00004ac2 <__fixsfsi>:
    4ac2:	ac e0       	ldi	r26, 0x0C	; 12
    4ac4:	b0 e0       	ldi	r27, 0x00	; 0
    4ac6:	e7 e6       	ldi	r30, 0x67	; 103
    4ac8:	f5 e2       	ldi	r31, 0x25	; 37
    4aca:	0c 94 47 28 	jmp	0x508e	; 0x508e <__prologue_saves__+0x20>
    4ace:	69 83       	std	Y+1, r22	; 0x01
    4ad0:	7a 83       	std	Y+2, r23	; 0x02
    4ad2:	8b 83       	std	Y+3, r24	; 0x03
    4ad4:	9c 83       	std	Y+4, r25	; 0x04
    4ad6:	ce 01       	movw	r24, r28
    4ad8:	01 96       	adiw	r24, 0x01	; 1
    4ada:	be 01       	movw	r22, r28
    4adc:	6b 5f       	subi	r22, 0xFB	; 251
    4ade:	7f 4f       	sbci	r23, 0xFF	; 255
    4ae0:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    4ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae6:	82 30       	cpi	r24, 0x02	; 2
    4ae8:	61 f1       	breq	.+88     	; 0x4b42 <__fixsfsi+0x80>
    4aea:	82 30       	cpi	r24, 0x02	; 2
    4aec:	50 f1       	brcs	.+84     	; 0x4b42 <__fixsfsi+0x80>
    4aee:	84 30       	cpi	r24, 0x04	; 4
    4af0:	21 f4       	brne	.+8      	; 0x4afa <__fixsfsi+0x38>
    4af2:	8e 81       	ldd	r24, Y+6	; 0x06
    4af4:	88 23       	and	r24, r24
    4af6:	51 f1       	breq	.+84     	; 0x4b4c <__fixsfsi+0x8a>
    4af8:	2e c0       	rjmp	.+92     	; 0x4b56 <__fixsfsi+0x94>
    4afa:	2f 81       	ldd	r18, Y+7	; 0x07
    4afc:	38 85       	ldd	r19, Y+8	; 0x08
    4afe:	37 fd       	sbrc	r19, 7
    4b00:	20 c0       	rjmp	.+64     	; 0x4b42 <__fixsfsi+0x80>
    4b02:	6e 81       	ldd	r22, Y+6	; 0x06
    4b04:	2f 31       	cpi	r18, 0x1F	; 31
    4b06:	31 05       	cpc	r19, r1
    4b08:	1c f0       	brlt	.+6      	; 0x4b10 <__fixsfsi+0x4e>
    4b0a:	66 23       	and	r22, r22
    4b0c:	f9 f0       	breq	.+62     	; 0x4b4c <__fixsfsi+0x8a>
    4b0e:	23 c0       	rjmp	.+70     	; 0x4b56 <__fixsfsi+0x94>
    4b10:	8e e1       	ldi	r24, 0x1E	; 30
    4b12:	90 e0       	ldi	r25, 0x00	; 0
    4b14:	82 1b       	sub	r24, r18
    4b16:	93 0b       	sbc	r25, r19
    4b18:	29 85       	ldd	r18, Y+9	; 0x09
    4b1a:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b1c:	4b 85       	ldd	r20, Y+11	; 0x0b
    4b1e:	5c 85       	ldd	r21, Y+12	; 0x0c
    4b20:	04 c0       	rjmp	.+8      	; 0x4b2a <__fixsfsi+0x68>
    4b22:	56 95       	lsr	r21
    4b24:	47 95       	ror	r20
    4b26:	37 95       	ror	r19
    4b28:	27 95       	ror	r18
    4b2a:	8a 95       	dec	r24
    4b2c:	d2 f7       	brpl	.-12     	; 0x4b22 <__fixsfsi+0x60>
    4b2e:	66 23       	and	r22, r22
    4b30:	b1 f0       	breq	.+44     	; 0x4b5e <__fixsfsi+0x9c>
    4b32:	50 95       	com	r21
    4b34:	40 95       	com	r20
    4b36:	30 95       	com	r19
    4b38:	21 95       	neg	r18
    4b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b3c:	4f 4f       	sbci	r20, 0xFF	; 255
    4b3e:	5f 4f       	sbci	r21, 0xFF	; 255
    4b40:	0e c0       	rjmp	.+28     	; 0x4b5e <__fixsfsi+0x9c>
    4b42:	20 e0       	ldi	r18, 0x00	; 0
    4b44:	30 e0       	ldi	r19, 0x00	; 0
    4b46:	40 e0       	ldi	r20, 0x00	; 0
    4b48:	50 e0       	ldi	r21, 0x00	; 0
    4b4a:	09 c0       	rjmp	.+18     	; 0x4b5e <__fixsfsi+0x9c>
    4b4c:	2f ef       	ldi	r18, 0xFF	; 255
    4b4e:	3f ef       	ldi	r19, 0xFF	; 255
    4b50:	4f ef       	ldi	r20, 0xFF	; 255
    4b52:	5f e7       	ldi	r21, 0x7F	; 127
    4b54:	04 c0       	rjmp	.+8      	; 0x4b5e <__fixsfsi+0x9c>
    4b56:	20 e0       	ldi	r18, 0x00	; 0
    4b58:	30 e0       	ldi	r19, 0x00	; 0
    4b5a:	40 e0       	ldi	r20, 0x00	; 0
    4b5c:	50 e8       	ldi	r21, 0x80	; 128
    4b5e:	b9 01       	movw	r22, r18
    4b60:	ca 01       	movw	r24, r20
    4b62:	2c 96       	adiw	r28, 0x0c	; 12
    4b64:	e2 e0       	ldi	r30, 0x02	; 2
    4b66:	0c 94 63 28 	jmp	0x50c6	; 0x50c6 <__epilogue_restores__+0x20>

00004b6a <__floatunsisf>:
    4b6a:	a8 e0       	ldi	r26, 0x08	; 8
    4b6c:	b0 e0       	ldi	r27, 0x00	; 0
    4b6e:	eb eb       	ldi	r30, 0xBB	; 187
    4b70:	f5 e2       	ldi	r31, 0x25	; 37
    4b72:	0c 94 3f 28 	jmp	0x507e	; 0x507e <__prologue_saves__+0x10>
    4b76:	7b 01       	movw	r14, r22
    4b78:	8c 01       	movw	r16, r24
    4b7a:	61 15       	cp	r22, r1
    4b7c:	71 05       	cpc	r23, r1
    4b7e:	81 05       	cpc	r24, r1
    4b80:	91 05       	cpc	r25, r1
    4b82:	19 f4       	brne	.+6      	; 0x4b8a <__floatunsisf+0x20>
    4b84:	82 e0       	ldi	r24, 0x02	; 2
    4b86:	89 83       	std	Y+1, r24	; 0x01
    4b88:	60 c0       	rjmp	.+192    	; 0x4c4a <__floatunsisf+0xe0>
    4b8a:	83 e0       	ldi	r24, 0x03	; 3
    4b8c:	89 83       	std	Y+1, r24	; 0x01
    4b8e:	8e e1       	ldi	r24, 0x1E	; 30
    4b90:	c8 2e       	mov	r12, r24
    4b92:	d1 2c       	mov	r13, r1
    4b94:	dc 82       	std	Y+4, r13	; 0x04
    4b96:	cb 82       	std	Y+3, r12	; 0x03
    4b98:	ed 82       	std	Y+5, r14	; 0x05
    4b9a:	fe 82       	std	Y+6, r15	; 0x06
    4b9c:	0f 83       	std	Y+7, r16	; 0x07
    4b9e:	18 87       	std	Y+8, r17	; 0x08
    4ba0:	c8 01       	movw	r24, r16
    4ba2:	b7 01       	movw	r22, r14
    4ba4:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <__clzsi2>
    4ba8:	fc 01       	movw	r30, r24
    4baa:	31 97       	sbiw	r30, 0x01	; 1
    4bac:	f7 ff       	sbrs	r31, 7
    4bae:	3b c0       	rjmp	.+118    	; 0x4c26 <__floatunsisf+0xbc>
    4bb0:	22 27       	eor	r18, r18
    4bb2:	33 27       	eor	r19, r19
    4bb4:	2e 1b       	sub	r18, r30
    4bb6:	3f 0b       	sbc	r19, r31
    4bb8:	57 01       	movw	r10, r14
    4bba:	68 01       	movw	r12, r16
    4bbc:	02 2e       	mov	r0, r18
    4bbe:	04 c0       	rjmp	.+8      	; 0x4bc8 <__floatunsisf+0x5e>
    4bc0:	d6 94       	lsr	r13
    4bc2:	c7 94       	ror	r12
    4bc4:	b7 94       	ror	r11
    4bc6:	a7 94       	ror	r10
    4bc8:	0a 94       	dec	r0
    4bca:	d2 f7       	brpl	.-12     	; 0x4bc0 <__floatunsisf+0x56>
    4bcc:	40 e0       	ldi	r20, 0x00	; 0
    4bce:	50 e0       	ldi	r21, 0x00	; 0
    4bd0:	60 e0       	ldi	r22, 0x00	; 0
    4bd2:	70 e0       	ldi	r23, 0x00	; 0
    4bd4:	81 e0       	ldi	r24, 0x01	; 1
    4bd6:	90 e0       	ldi	r25, 0x00	; 0
    4bd8:	a0 e0       	ldi	r26, 0x00	; 0
    4bda:	b0 e0       	ldi	r27, 0x00	; 0
    4bdc:	04 c0       	rjmp	.+8      	; 0x4be6 <__floatunsisf+0x7c>
    4bde:	88 0f       	add	r24, r24
    4be0:	99 1f       	adc	r25, r25
    4be2:	aa 1f       	adc	r26, r26
    4be4:	bb 1f       	adc	r27, r27
    4be6:	2a 95       	dec	r18
    4be8:	d2 f7       	brpl	.-12     	; 0x4bde <__floatunsisf+0x74>
    4bea:	01 97       	sbiw	r24, 0x01	; 1
    4bec:	a1 09       	sbc	r26, r1
    4bee:	b1 09       	sbc	r27, r1
    4bf0:	8e 21       	and	r24, r14
    4bf2:	9f 21       	and	r25, r15
    4bf4:	a0 23       	and	r26, r16
    4bf6:	b1 23       	and	r27, r17
    4bf8:	00 97       	sbiw	r24, 0x00	; 0
    4bfa:	a1 05       	cpc	r26, r1
    4bfc:	b1 05       	cpc	r27, r1
    4bfe:	21 f0       	breq	.+8      	; 0x4c08 <__floatunsisf+0x9e>
    4c00:	41 e0       	ldi	r20, 0x01	; 1
    4c02:	50 e0       	ldi	r21, 0x00	; 0
    4c04:	60 e0       	ldi	r22, 0x00	; 0
    4c06:	70 e0       	ldi	r23, 0x00	; 0
    4c08:	4a 29       	or	r20, r10
    4c0a:	5b 29       	or	r21, r11
    4c0c:	6c 29       	or	r22, r12
    4c0e:	7d 29       	or	r23, r13
    4c10:	4d 83       	std	Y+5, r20	; 0x05
    4c12:	5e 83       	std	Y+6, r21	; 0x06
    4c14:	6f 83       	std	Y+7, r22	; 0x07
    4c16:	78 87       	std	Y+8, r23	; 0x08
    4c18:	8e e1       	ldi	r24, 0x1E	; 30
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	8e 1b       	sub	r24, r30
    4c1e:	9f 0b       	sbc	r25, r31
    4c20:	9c 83       	std	Y+4, r25	; 0x04
    4c22:	8b 83       	std	Y+3, r24	; 0x03
    4c24:	12 c0       	rjmp	.+36     	; 0x4c4a <__floatunsisf+0xe0>
    4c26:	30 97       	sbiw	r30, 0x00	; 0
    4c28:	81 f0       	breq	.+32     	; 0x4c4a <__floatunsisf+0xe0>
    4c2a:	0e 2e       	mov	r0, r30
    4c2c:	04 c0       	rjmp	.+8      	; 0x4c36 <__floatunsisf+0xcc>
    4c2e:	ee 0c       	add	r14, r14
    4c30:	ff 1c       	adc	r15, r15
    4c32:	00 1f       	adc	r16, r16
    4c34:	11 1f       	adc	r17, r17
    4c36:	0a 94       	dec	r0
    4c38:	d2 f7       	brpl	.-12     	; 0x4c2e <__floatunsisf+0xc4>
    4c3a:	ed 82       	std	Y+5, r14	; 0x05
    4c3c:	fe 82       	std	Y+6, r15	; 0x06
    4c3e:	0f 83       	std	Y+7, r16	; 0x07
    4c40:	18 87       	std	Y+8, r17	; 0x08
    4c42:	ce 1a       	sub	r12, r30
    4c44:	df 0a       	sbc	r13, r31
    4c46:	dc 82       	std	Y+4, r13	; 0x04
    4c48:	cb 82       	std	Y+3, r12	; 0x03
    4c4a:	1a 82       	std	Y+2, r1	; 0x02
    4c4c:	ce 01       	movw	r24, r28
    4c4e:	01 96       	adiw	r24, 0x01	; 1
    4c50:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__pack_f>
    4c54:	28 96       	adiw	r28, 0x08	; 8
    4c56:	ea e0       	ldi	r30, 0x0A	; 10
    4c58:	0c 94 5b 28 	jmp	0x50b6	; 0x50b6 <__epilogue_restores__+0x10>

00004c5c <__clzsi2>:
    4c5c:	ef 92       	push	r14
    4c5e:	ff 92       	push	r15
    4c60:	0f 93       	push	r16
    4c62:	1f 93       	push	r17
    4c64:	7b 01       	movw	r14, r22
    4c66:	8c 01       	movw	r16, r24
    4c68:	80 e0       	ldi	r24, 0x00	; 0
    4c6a:	e8 16       	cp	r14, r24
    4c6c:	80 e0       	ldi	r24, 0x00	; 0
    4c6e:	f8 06       	cpc	r15, r24
    4c70:	81 e0       	ldi	r24, 0x01	; 1
    4c72:	08 07       	cpc	r16, r24
    4c74:	80 e0       	ldi	r24, 0x00	; 0
    4c76:	18 07       	cpc	r17, r24
    4c78:	88 f4       	brcc	.+34     	; 0x4c9c <__clzsi2+0x40>
    4c7a:	8f ef       	ldi	r24, 0xFF	; 255
    4c7c:	e8 16       	cp	r14, r24
    4c7e:	f1 04       	cpc	r15, r1
    4c80:	01 05       	cpc	r16, r1
    4c82:	11 05       	cpc	r17, r1
    4c84:	31 f0       	breq	.+12     	; 0x4c92 <__clzsi2+0x36>
    4c86:	28 f0       	brcs	.+10     	; 0x4c92 <__clzsi2+0x36>
    4c88:	88 e0       	ldi	r24, 0x08	; 8
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	a0 e0       	ldi	r26, 0x00	; 0
    4c8e:	b0 e0       	ldi	r27, 0x00	; 0
    4c90:	17 c0       	rjmp	.+46     	; 0x4cc0 <__clzsi2+0x64>
    4c92:	80 e0       	ldi	r24, 0x00	; 0
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	a0 e0       	ldi	r26, 0x00	; 0
    4c98:	b0 e0       	ldi	r27, 0x00	; 0
    4c9a:	12 c0       	rjmp	.+36     	; 0x4cc0 <__clzsi2+0x64>
    4c9c:	80 e0       	ldi	r24, 0x00	; 0
    4c9e:	e8 16       	cp	r14, r24
    4ca0:	80 e0       	ldi	r24, 0x00	; 0
    4ca2:	f8 06       	cpc	r15, r24
    4ca4:	80 e0       	ldi	r24, 0x00	; 0
    4ca6:	08 07       	cpc	r16, r24
    4ca8:	81 e0       	ldi	r24, 0x01	; 1
    4caa:	18 07       	cpc	r17, r24
    4cac:	28 f0       	brcs	.+10     	; 0x4cb8 <__clzsi2+0x5c>
    4cae:	88 e1       	ldi	r24, 0x18	; 24
    4cb0:	90 e0       	ldi	r25, 0x00	; 0
    4cb2:	a0 e0       	ldi	r26, 0x00	; 0
    4cb4:	b0 e0       	ldi	r27, 0x00	; 0
    4cb6:	04 c0       	rjmp	.+8      	; 0x4cc0 <__clzsi2+0x64>
    4cb8:	80 e1       	ldi	r24, 0x10	; 16
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	a0 e0       	ldi	r26, 0x00	; 0
    4cbe:	b0 e0       	ldi	r27, 0x00	; 0
    4cc0:	20 e2       	ldi	r18, 0x20	; 32
    4cc2:	30 e0       	ldi	r19, 0x00	; 0
    4cc4:	40 e0       	ldi	r20, 0x00	; 0
    4cc6:	50 e0       	ldi	r21, 0x00	; 0
    4cc8:	28 1b       	sub	r18, r24
    4cca:	39 0b       	sbc	r19, r25
    4ccc:	4a 0b       	sbc	r20, r26
    4cce:	5b 0b       	sbc	r21, r27
    4cd0:	04 c0       	rjmp	.+8      	; 0x4cda <__clzsi2+0x7e>
    4cd2:	16 95       	lsr	r17
    4cd4:	07 95       	ror	r16
    4cd6:	f7 94       	ror	r15
    4cd8:	e7 94       	ror	r14
    4cda:	8a 95       	dec	r24
    4cdc:	d2 f7       	brpl	.-12     	; 0x4cd2 <__clzsi2+0x76>
    4cde:	f7 01       	movw	r30, r14
    4ce0:	ee 58       	subi	r30, 0x8E	; 142
    4ce2:	fe 4f       	sbci	r31, 0xFE	; 254
    4ce4:	80 81       	ld	r24, Z
    4ce6:	28 1b       	sub	r18, r24
    4ce8:	31 09       	sbc	r19, r1
    4cea:	41 09       	sbc	r20, r1
    4cec:	51 09       	sbc	r21, r1
    4cee:	c9 01       	movw	r24, r18
    4cf0:	1f 91       	pop	r17
    4cf2:	0f 91       	pop	r16
    4cf4:	ff 90       	pop	r15
    4cf6:	ef 90       	pop	r14
    4cf8:	08 95       	ret

00004cfa <__pack_f>:
    4cfa:	df 92       	push	r13
    4cfc:	ef 92       	push	r14
    4cfe:	ff 92       	push	r15
    4d00:	0f 93       	push	r16
    4d02:	1f 93       	push	r17
    4d04:	fc 01       	movw	r30, r24
    4d06:	e4 80       	ldd	r14, Z+4	; 0x04
    4d08:	f5 80       	ldd	r15, Z+5	; 0x05
    4d0a:	06 81       	ldd	r16, Z+6	; 0x06
    4d0c:	17 81       	ldd	r17, Z+7	; 0x07
    4d0e:	d1 80       	ldd	r13, Z+1	; 0x01
    4d10:	80 81       	ld	r24, Z
    4d12:	82 30       	cpi	r24, 0x02	; 2
    4d14:	48 f4       	brcc	.+18     	; 0x4d28 <__pack_f+0x2e>
    4d16:	80 e0       	ldi	r24, 0x00	; 0
    4d18:	90 e0       	ldi	r25, 0x00	; 0
    4d1a:	a0 e1       	ldi	r26, 0x10	; 16
    4d1c:	b0 e0       	ldi	r27, 0x00	; 0
    4d1e:	e8 2a       	or	r14, r24
    4d20:	f9 2a       	or	r15, r25
    4d22:	0a 2b       	or	r16, r26
    4d24:	1b 2b       	or	r17, r27
    4d26:	a5 c0       	rjmp	.+330    	; 0x4e72 <__pack_f+0x178>
    4d28:	84 30       	cpi	r24, 0x04	; 4
    4d2a:	09 f4       	brne	.+2      	; 0x4d2e <__pack_f+0x34>
    4d2c:	9f c0       	rjmp	.+318    	; 0x4e6c <__pack_f+0x172>
    4d2e:	82 30       	cpi	r24, 0x02	; 2
    4d30:	21 f4       	brne	.+8      	; 0x4d3a <__pack_f+0x40>
    4d32:	ee 24       	eor	r14, r14
    4d34:	ff 24       	eor	r15, r15
    4d36:	87 01       	movw	r16, r14
    4d38:	05 c0       	rjmp	.+10     	; 0x4d44 <__pack_f+0x4a>
    4d3a:	e1 14       	cp	r14, r1
    4d3c:	f1 04       	cpc	r15, r1
    4d3e:	01 05       	cpc	r16, r1
    4d40:	11 05       	cpc	r17, r1
    4d42:	19 f4       	brne	.+6      	; 0x4d4a <__pack_f+0x50>
    4d44:	e0 e0       	ldi	r30, 0x00	; 0
    4d46:	f0 e0       	ldi	r31, 0x00	; 0
    4d48:	96 c0       	rjmp	.+300    	; 0x4e76 <__pack_f+0x17c>
    4d4a:	62 81       	ldd	r22, Z+2	; 0x02
    4d4c:	73 81       	ldd	r23, Z+3	; 0x03
    4d4e:	9f ef       	ldi	r25, 0xFF	; 255
    4d50:	62 38       	cpi	r22, 0x82	; 130
    4d52:	79 07       	cpc	r23, r25
    4d54:	0c f0       	brlt	.+2      	; 0x4d58 <__pack_f+0x5e>
    4d56:	5b c0       	rjmp	.+182    	; 0x4e0e <__pack_f+0x114>
    4d58:	22 e8       	ldi	r18, 0x82	; 130
    4d5a:	3f ef       	ldi	r19, 0xFF	; 255
    4d5c:	26 1b       	sub	r18, r22
    4d5e:	37 0b       	sbc	r19, r23
    4d60:	2a 31       	cpi	r18, 0x1A	; 26
    4d62:	31 05       	cpc	r19, r1
    4d64:	2c f0       	brlt	.+10     	; 0x4d70 <__pack_f+0x76>
    4d66:	20 e0       	ldi	r18, 0x00	; 0
    4d68:	30 e0       	ldi	r19, 0x00	; 0
    4d6a:	40 e0       	ldi	r20, 0x00	; 0
    4d6c:	50 e0       	ldi	r21, 0x00	; 0
    4d6e:	2a c0       	rjmp	.+84     	; 0x4dc4 <__pack_f+0xca>
    4d70:	b8 01       	movw	r22, r16
    4d72:	a7 01       	movw	r20, r14
    4d74:	02 2e       	mov	r0, r18
    4d76:	04 c0       	rjmp	.+8      	; 0x4d80 <__pack_f+0x86>
    4d78:	76 95       	lsr	r23
    4d7a:	67 95       	ror	r22
    4d7c:	57 95       	ror	r21
    4d7e:	47 95       	ror	r20
    4d80:	0a 94       	dec	r0
    4d82:	d2 f7       	brpl	.-12     	; 0x4d78 <__pack_f+0x7e>
    4d84:	81 e0       	ldi	r24, 0x01	; 1
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	a0 e0       	ldi	r26, 0x00	; 0
    4d8a:	b0 e0       	ldi	r27, 0x00	; 0
    4d8c:	04 c0       	rjmp	.+8      	; 0x4d96 <__pack_f+0x9c>
    4d8e:	88 0f       	add	r24, r24
    4d90:	99 1f       	adc	r25, r25
    4d92:	aa 1f       	adc	r26, r26
    4d94:	bb 1f       	adc	r27, r27
    4d96:	2a 95       	dec	r18
    4d98:	d2 f7       	brpl	.-12     	; 0x4d8e <__pack_f+0x94>
    4d9a:	01 97       	sbiw	r24, 0x01	; 1
    4d9c:	a1 09       	sbc	r26, r1
    4d9e:	b1 09       	sbc	r27, r1
    4da0:	8e 21       	and	r24, r14
    4da2:	9f 21       	and	r25, r15
    4da4:	a0 23       	and	r26, r16
    4da6:	b1 23       	and	r27, r17
    4da8:	00 97       	sbiw	r24, 0x00	; 0
    4daa:	a1 05       	cpc	r26, r1
    4dac:	b1 05       	cpc	r27, r1
    4dae:	21 f0       	breq	.+8      	; 0x4db8 <__pack_f+0xbe>
    4db0:	81 e0       	ldi	r24, 0x01	; 1
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	a0 e0       	ldi	r26, 0x00	; 0
    4db6:	b0 e0       	ldi	r27, 0x00	; 0
    4db8:	9a 01       	movw	r18, r20
    4dba:	ab 01       	movw	r20, r22
    4dbc:	28 2b       	or	r18, r24
    4dbe:	39 2b       	or	r19, r25
    4dc0:	4a 2b       	or	r20, r26
    4dc2:	5b 2b       	or	r21, r27
    4dc4:	da 01       	movw	r26, r20
    4dc6:	c9 01       	movw	r24, r18
    4dc8:	8f 77       	andi	r24, 0x7F	; 127
    4dca:	90 70       	andi	r25, 0x00	; 0
    4dcc:	a0 70       	andi	r26, 0x00	; 0
    4dce:	b0 70       	andi	r27, 0x00	; 0
    4dd0:	80 34       	cpi	r24, 0x40	; 64
    4dd2:	91 05       	cpc	r25, r1
    4dd4:	a1 05       	cpc	r26, r1
    4dd6:	b1 05       	cpc	r27, r1
    4dd8:	39 f4       	brne	.+14     	; 0x4de8 <__pack_f+0xee>
    4dda:	27 ff       	sbrs	r18, 7
    4ddc:	09 c0       	rjmp	.+18     	; 0x4df0 <__pack_f+0xf6>
    4dde:	20 5c       	subi	r18, 0xC0	; 192
    4de0:	3f 4f       	sbci	r19, 0xFF	; 255
    4de2:	4f 4f       	sbci	r20, 0xFF	; 255
    4de4:	5f 4f       	sbci	r21, 0xFF	; 255
    4de6:	04 c0       	rjmp	.+8      	; 0x4df0 <__pack_f+0xf6>
    4de8:	21 5c       	subi	r18, 0xC1	; 193
    4dea:	3f 4f       	sbci	r19, 0xFF	; 255
    4dec:	4f 4f       	sbci	r20, 0xFF	; 255
    4dee:	5f 4f       	sbci	r21, 0xFF	; 255
    4df0:	e0 e0       	ldi	r30, 0x00	; 0
    4df2:	f0 e0       	ldi	r31, 0x00	; 0
    4df4:	20 30       	cpi	r18, 0x00	; 0
    4df6:	a0 e0       	ldi	r26, 0x00	; 0
    4df8:	3a 07       	cpc	r19, r26
    4dfa:	a0 e0       	ldi	r26, 0x00	; 0
    4dfc:	4a 07       	cpc	r20, r26
    4dfe:	a0 e4       	ldi	r26, 0x40	; 64
    4e00:	5a 07       	cpc	r21, r26
    4e02:	10 f0       	brcs	.+4      	; 0x4e08 <__pack_f+0x10e>
    4e04:	e1 e0       	ldi	r30, 0x01	; 1
    4e06:	f0 e0       	ldi	r31, 0x00	; 0
    4e08:	79 01       	movw	r14, r18
    4e0a:	8a 01       	movw	r16, r20
    4e0c:	27 c0       	rjmp	.+78     	; 0x4e5c <__pack_f+0x162>
    4e0e:	60 38       	cpi	r22, 0x80	; 128
    4e10:	71 05       	cpc	r23, r1
    4e12:	64 f5       	brge	.+88     	; 0x4e6c <__pack_f+0x172>
    4e14:	fb 01       	movw	r30, r22
    4e16:	e1 58       	subi	r30, 0x81	; 129
    4e18:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1a:	d8 01       	movw	r26, r16
    4e1c:	c7 01       	movw	r24, r14
    4e1e:	8f 77       	andi	r24, 0x7F	; 127
    4e20:	90 70       	andi	r25, 0x00	; 0
    4e22:	a0 70       	andi	r26, 0x00	; 0
    4e24:	b0 70       	andi	r27, 0x00	; 0
    4e26:	80 34       	cpi	r24, 0x40	; 64
    4e28:	91 05       	cpc	r25, r1
    4e2a:	a1 05       	cpc	r26, r1
    4e2c:	b1 05       	cpc	r27, r1
    4e2e:	39 f4       	brne	.+14     	; 0x4e3e <__pack_f+0x144>
    4e30:	e7 fe       	sbrs	r14, 7
    4e32:	0d c0       	rjmp	.+26     	; 0x4e4e <__pack_f+0x154>
    4e34:	80 e4       	ldi	r24, 0x40	; 64
    4e36:	90 e0       	ldi	r25, 0x00	; 0
    4e38:	a0 e0       	ldi	r26, 0x00	; 0
    4e3a:	b0 e0       	ldi	r27, 0x00	; 0
    4e3c:	04 c0       	rjmp	.+8      	; 0x4e46 <__pack_f+0x14c>
    4e3e:	8f e3       	ldi	r24, 0x3F	; 63
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	a0 e0       	ldi	r26, 0x00	; 0
    4e44:	b0 e0       	ldi	r27, 0x00	; 0
    4e46:	e8 0e       	add	r14, r24
    4e48:	f9 1e       	adc	r15, r25
    4e4a:	0a 1f       	adc	r16, r26
    4e4c:	1b 1f       	adc	r17, r27
    4e4e:	17 ff       	sbrs	r17, 7
    4e50:	05 c0       	rjmp	.+10     	; 0x4e5c <__pack_f+0x162>
    4e52:	16 95       	lsr	r17
    4e54:	07 95       	ror	r16
    4e56:	f7 94       	ror	r15
    4e58:	e7 94       	ror	r14
    4e5a:	31 96       	adiw	r30, 0x01	; 1
    4e5c:	87 e0       	ldi	r24, 0x07	; 7
    4e5e:	16 95       	lsr	r17
    4e60:	07 95       	ror	r16
    4e62:	f7 94       	ror	r15
    4e64:	e7 94       	ror	r14
    4e66:	8a 95       	dec	r24
    4e68:	d1 f7       	brne	.-12     	; 0x4e5e <__pack_f+0x164>
    4e6a:	05 c0       	rjmp	.+10     	; 0x4e76 <__pack_f+0x17c>
    4e6c:	ee 24       	eor	r14, r14
    4e6e:	ff 24       	eor	r15, r15
    4e70:	87 01       	movw	r16, r14
    4e72:	ef ef       	ldi	r30, 0xFF	; 255
    4e74:	f0 e0       	ldi	r31, 0x00	; 0
    4e76:	6e 2f       	mov	r22, r30
    4e78:	67 95       	ror	r22
    4e7a:	66 27       	eor	r22, r22
    4e7c:	67 95       	ror	r22
    4e7e:	90 2f       	mov	r25, r16
    4e80:	9f 77       	andi	r25, 0x7F	; 127
    4e82:	d7 94       	ror	r13
    4e84:	dd 24       	eor	r13, r13
    4e86:	d7 94       	ror	r13
    4e88:	8e 2f       	mov	r24, r30
    4e8a:	86 95       	lsr	r24
    4e8c:	49 2f       	mov	r20, r25
    4e8e:	46 2b       	or	r20, r22
    4e90:	58 2f       	mov	r21, r24
    4e92:	5d 29       	or	r21, r13
    4e94:	b7 01       	movw	r22, r14
    4e96:	ca 01       	movw	r24, r20
    4e98:	1f 91       	pop	r17
    4e9a:	0f 91       	pop	r16
    4e9c:	ff 90       	pop	r15
    4e9e:	ef 90       	pop	r14
    4ea0:	df 90       	pop	r13
    4ea2:	08 95       	ret

00004ea4 <__unpack_f>:
    4ea4:	fc 01       	movw	r30, r24
    4ea6:	db 01       	movw	r26, r22
    4ea8:	40 81       	ld	r20, Z
    4eaa:	51 81       	ldd	r21, Z+1	; 0x01
    4eac:	22 81       	ldd	r18, Z+2	; 0x02
    4eae:	62 2f       	mov	r22, r18
    4eb0:	6f 77       	andi	r22, 0x7F	; 127
    4eb2:	70 e0       	ldi	r23, 0x00	; 0
    4eb4:	22 1f       	adc	r18, r18
    4eb6:	22 27       	eor	r18, r18
    4eb8:	22 1f       	adc	r18, r18
    4eba:	93 81       	ldd	r25, Z+3	; 0x03
    4ebc:	89 2f       	mov	r24, r25
    4ebe:	88 0f       	add	r24, r24
    4ec0:	82 2b       	or	r24, r18
    4ec2:	28 2f       	mov	r18, r24
    4ec4:	30 e0       	ldi	r19, 0x00	; 0
    4ec6:	99 1f       	adc	r25, r25
    4ec8:	99 27       	eor	r25, r25
    4eca:	99 1f       	adc	r25, r25
    4ecc:	11 96       	adiw	r26, 0x01	; 1
    4ece:	9c 93       	st	X, r25
    4ed0:	11 97       	sbiw	r26, 0x01	; 1
    4ed2:	21 15       	cp	r18, r1
    4ed4:	31 05       	cpc	r19, r1
    4ed6:	a9 f5       	brne	.+106    	; 0x4f42 <__unpack_f+0x9e>
    4ed8:	41 15       	cp	r20, r1
    4eda:	51 05       	cpc	r21, r1
    4edc:	61 05       	cpc	r22, r1
    4ede:	71 05       	cpc	r23, r1
    4ee0:	11 f4       	brne	.+4      	; 0x4ee6 <__unpack_f+0x42>
    4ee2:	82 e0       	ldi	r24, 0x02	; 2
    4ee4:	37 c0       	rjmp	.+110    	; 0x4f54 <__unpack_f+0xb0>
    4ee6:	82 e8       	ldi	r24, 0x82	; 130
    4ee8:	9f ef       	ldi	r25, 0xFF	; 255
    4eea:	13 96       	adiw	r26, 0x03	; 3
    4eec:	9c 93       	st	X, r25
    4eee:	8e 93       	st	-X, r24
    4ef0:	12 97       	sbiw	r26, 0x02	; 2
    4ef2:	9a 01       	movw	r18, r20
    4ef4:	ab 01       	movw	r20, r22
    4ef6:	67 e0       	ldi	r22, 0x07	; 7
    4ef8:	22 0f       	add	r18, r18
    4efa:	33 1f       	adc	r19, r19
    4efc:	44 1f       	adc	r20, r20
    4efe:	55 1f       	adc	r21, r21
    4f00:	6a 95       	dec	r22
    4f02:	d1 f7       	brne	.-12     	; 0x4ef8 <__unpack_f+0x54>
    4f04:	83 e0       	ldi	r24, 0x03	; 3
    4f06:	8c 93       	st	X, r24
    4f08:	0d c0       	rjmp	.+26     	; 0x4f24 <__unpack_f+0x80>
    4f0a:	22 0f       	add	r18, r18
    4f0c:	33 1f       	adc	r19, r19
    4f0e:	44 1f       	adc	r20, r20
    4f10:	55 1f       	adc	r21, r21
    4f12:	12 96       	adiw	r26, 0x02	; 2
    4f14:	8d 91       	ld	r24, X+
    4f16:	9c 91       	ld	r25, X
    4f18:	13 97       	sbiw	r26, 0x03	; 3
    4f1a:	01 97       	sbiw	r24, 0x01	; 1
    4f1c:	13 96       	adiw	r26, 0x03	; 3
    4f1e:	9c 93       	st	X, r25
    4f20:	8e 93       	st	-X, r24
    4f22:	12 97       	sbiw	r26, 0x02	; 2
    4f24:	20 30       	cpi	r18, 0x00	; 0
    4f26:	80 e0       	ldi	r24, 0x00	; 0
    4f28:	38 07       	cpc	r19, r24
    4f2a:	80 e0       	ldi	r24, 0x00	; 0
    4f2c:	48 07       	cpc	r20, r24
    4f2e:	80 e4       	ldi	r24, 0x40	; 64
    4f30:	58 07       	cpc	r21, r24
    4f32:	58 f3       	brcs	.-42     	; 0x4f0a <__unpack_f+0x66>
    4f34:	14 96       	adiw	r26, 0x04	; 4
    4f36:	2d 93       	st	X+, r18
    4f38:	3d 93       	st	X+, r19
    4f3a:	4d 93       	st	X+, r20
    4f3c:	5c 93       	st	X, r21
    4f3e:	17 97       	sbiw	r26, 0x07	; 7
    4f40:	08 95       	ret
    4f42:	2f 3f       	cpi	r18, 0xFF	; 255
    4f44:	31 05       	cpc	r19, r1
    4f46:	79 f4       	brne	.+30     	; 0x4f66 <__unpack_f+0xc2>
    4f48:	41 15       	cp	r20, r1
    4f4a:	51 05       	cpc	r21, r1
    4f4c:	61 05       	cpc	r22, r1
    4f4e:	71 05       	cpc	r23, r1
    4f50:	19 f4       	brne	.+6      	; 0x4f58 <__unpack_f+0xb4>
    4f52:	84 e0       	ldi	r24, 0x04	; 4
    4f54:	8c 93       	st	X, r24
    4f56:	08 95       	ret
    4f58:	64 ff       	sbrs	r22, 4
    4f5a:	03 c0       	rjmp	.+6      	; 0x4f62 <__unpack_f+0xbe>
    4f5c:	81 e0       	ldi	r24, 0x01	; 1
    4f5e:	8c 93       	st	X, r24
    4f60:	12 c0       	rjmp	.+36     	; 0x4f86 <__unpack_f+0xe2>
    4f62:	1c 92       	st	X, r1
    4f64:	10 c0       	rjmp	.+32     	; 0x4f86 <__unpack_f+0xe2>
    4f66:	2f 57       	subi	r18, 0x7F	; 127
    4f68:	30 40       	sbci	r19, 0x00	; 0
    4f6a:	13 96       	adiw	r26, 0x03	; 3
    4f6c:	3c 93       	st	X, r19
    4f6e:	2e 93       	st	-X, r18
    4f70:	12 97       	sbiw	r26, 0x02	; 2
    4f72:	83 e0       	ldi	r24, 0x03	; 3
    4f74:	8c 93       	st	X, r24
    4f76:	87 e0       	ldi	r24, 0x07	; 7
    4f78:	44 0f       	add	r20, r20
    4f7a:	55 1f       	adc	r21, r21
    4f7c:	66 1f       	adc	r22, r22
    4f7e:	77 1f       	adc	r23, r23
    4f80:	8a 95       	dec	r24
    4f82:	d1 f7       	brne	.-12     	; 0x4f78 <__unpack_f+0xd4>
    4f84:	70 64       	ori	r23, 0x40	; 64
    4f86:	14 96       	adiw	r26, 0x04	; 4
    4f88:	4d 93       	st	X+, r20
    4f8a:	5d 93       	st	X+, r21
    4f8c:	6d 93       	st	X+, r22
    4f8e:	7c 93       	st	X, r23
    4f90:	17 97       	sbiw	r26, 0x07	; 7
    4f92:	08 95       	ret

00004f94 <__fpcmp_parts_f>:
    4f94:	1f 93       	push	r17
    4f96:	dc 01       	movw	r26, r24
    4f98:	fb 01       	movw	r30, r22
    4f9a:	9c 91       	ld	r25, X
    4f9c:	92 30       	cpi	r25, 0x02	; 2
    4f9e:	08 f4       	brcc	.+2      	; 0x4fa2 <__fpcmp_parts_f+0xe>
    4fa0:	47 c0       	rjmp	.+142    	; 0x5030 <__fpcmp_parts_f+0x9c>
    4fa2:	80 81       	ld	r24, Z
    4fa4:	82 30       	cpi	r24, 0x02	; 2
    4fa6:	08 f4       	brcc	.+2      	; 0x4faa <__fpcmp_parts_f+0x16>
    4fa8:	43 c0       	rjmp	.+134    	; 0x5030 <__fpcmp_parts_f+0x9c>
    4faa:	94 30       	cpi	r25, 0x04	; 4
    4fac:	51 f4       	brne	.+20     	; 0x4fc2 <__fpcmp_parts_f+0x2e>
    4fae:	11 96       	adiw	r26, 0x01	; 1
    4fb0:	1c 91       	ld	r17, X
    4fb2:	84 30       	cpi	r24, 0x04	; 4
    4fb4:	99 f5       	brne	.+102    	; 0x501c <__fpcmp_parts_f+0x88>
    4fb6:	81 81       	ldd	r24, Z+1	; 0x01
    4fb8:	68 2f       	mov	r22, r24
    4fba:	70 e0       	ldi	r23, 0x00	; 0
    4fbc:	61 1b       	sub	r22, r17
    4fbe:	71 09       	sbc	r23, r1
    4fc0:	3f c0       	rjmp	.+126    	; 0x5040 <__fpcmp_parts_f+0xac>
    4fc2:	84 30       	cpi	r24, 0x04	; 4
    4fc4:	21 f0       	breq	.+8      	; 0x4fce <__fpcmp_parts_f+0x3a>
    4fc6:	92 30       	cpi	r25, 0x02	; 2
    4fc8:	31 f4       	brne	.+12     	; 0x4fd6 <__fpcmp_parts_f+0x42>
    4fca:	82 30       	cpi	r24, 0x02	; 2
    4fcc:	b9 f1       	breq	.+110    	; 0x503c <__fpcmp_parts_f+0xa8>
    4fce:	81 81       	ldd	r24, Z+1	; 0x01
    4fd0:	88 23       	and	r24, r24
    4fd2:	89 f1       	breq	.+98     	; 0x5036 <__fpcmp_parts_f+0xa2>
    4fd4:	2d c0       	rjmp	.+90     	; 0x5030 <__fpcmp_parts_f+0x9c>
    4fd6:	11 96       	adiw	r26, 0x01	; 1
    4fd8:	1c 91       	ld	r17, X
    4fda:	11 97       	sbiw	r26, 0x01	; 1
    4fdc:	82 30       	cpi	r24, 0x02	; 2
    4fde:	f1 f0       	breq	.+60     	; 0x501c <__fpcmp_parts_f+0x88>
    4fe0:	81 81       	ldd	r24, Z+1	; 0x01
    4fe2:	18 17       	cp	r17, r24
    4fe4:	d9 f4       	brne	.+54     	; 0x501c <__fpcmp_parts_f+0x88>
    4fe6:	12 96       	adiw	r26, 0x02	; 2
    4fe8:	2d 91       	ld	r18, X+
    4fea:	3c 91       	ld	r19, X
    4fec:	13 97       	sbiw	r26, 0x03	; 3
    4fee:	82 81       	ldd	r24, Z+2	; 0x02
    4ff0:	93 81       	ldd	r25, Z+3	; 0x03
    4ff2:	82 17       	cp	r24, r18
    4ff4:	93 07       	cpc	r25, r19
    4ff6:	94 f0       	brlt	.+36     	; 0x501c <__fpcmp_parts_f+0x88>
    4ff8:	28 17       	cp	r18, r24
    4ffa:	39 07       	cpc	r19, r25
    4ffc:	bc f0       	brlt	.+46     	; 0x502c <__fpcmp_parts_f+0x98>
    4ffe:	14 96       	adiw	r26, 0x04	; 4
    5000:	8d 91       	ld	r24, X+
    5002:	9d 91       	ld	r25, X+
    5004:	0d 90       	ld	r0, X+
    5006:	bc 91       	ld	r27, X
    5008:	a0 2d       	mov	r26, r0
    500a:	24 81       	ldd	r18, Z+4	; 0x04
    500c:	35 81       	ldd	r19, Z+5	; 0x05
    500e:	46 81       	ldd	r20, Z+6	; 0x06
    5010:	57 81       	ldd	r21, Z+7	; 0x07
    5012:	28 17       	cp	r18, r24
    5014:	39 07       	cpc	r19, r25
    5016:	4a 07       	cpc	r20, r26
    5018:	5b 07       	cpc	r21, r27
    501a:	18 f4       	brcc	.+6      	; 0x5022 <__fpcmp_parts_f+0x8e>
    501c:	11 23       	and	r17, r17
    501e:	41 f0       	breq	.+16     	; 0x5030 <__fpcmp_parts_f+0x9c>
    5020:	0a c0       	rjmp	.+20     	; 0x5036 <__fpcmp_parts_f+0xa2>
    5022:	82 17       	cp	r24, r18
    5024:	93 07       	cpc	r25, r19
    5026:	a4 07       	cpc	r26, r20
    5028:	b5 07       	cpc	r27, r21
    502a:	40 f4       	brcc	.+16     	; 0x503c <__fpcmp_parts_f+0xa8>
    502c:	11 23       	and	r17, r17
    502e:	19 f0       	breq	.+6      	; 0x5036 <__fpcmp_parts_f+0xa2>
    5030:	61 e0       	ldi	r22, 0x01	; 1
    5032:	70 e0       	ldi	r23, 0x00	; 0
    5034:	05 c0       	rjmp	.+10     	; 0x5040 <__fpcmp_parts_f+0xac>
    5036:	6f ef       	ldi	r22, 0xFF	; 255
    5038:	7f ef       	ldi	r23, 0xFF	; 255
    503a:	02 c0       	rjmp	.+4      	; 0x5040 <__fpcmp_parts_f+0xac>
    503c:	60 e0       	ldi	r22, 0x00	; 0
    503e:	70 e0       	ldi	r23, 0x00	; 0
    5040:	cb 01       	movw	r24, r22
    5042:	1f 91       	pop	r17
    5044:	08 95       	ret

00005046 <__udivmodhi4>:
    5046:	aa 1b       	sub	r26, r26
    5048:	bb 1b       	sub	r27, r27
    504a:	51 e1       	ldi	r21, 0x11	; 17
    504c:	07 c0       	rjmp	.+14     	; 0x505c <__udivmodhi4_ep>

0000504e <__udivmodhi4_loop>:
    504e:	aa 1f       	adc	r26, r26
    5050:	bb 1f       	adc	r27, r27
    5052:	a6 17       	cp	r26, r22
    5054:	b7 07       	cpc	r27, r23
    5056:	10 f0       	brcs	.+4      	; 0x505c <__udivmodhi4_ep>
    5058:	a6 1b       	sub	r26, r22
    505a:	b7 0b       	sbc	r27, r23

0000505c <__udivmodhi4_ep>:
    505c:	88 1f       	adc	r24, r24
    505e:	99 1f       	adc	r25, r25
    5060:	5a 95       	dec	r21
    5062:	a9 f7       	brne	.-22     	; 0x504e <__udivmodhi4_loop>
    5064:	80 95       	com	r24
    5066:	90 95       	com	r25
    5068:	bc 01       	movw	r22, r24
    506a:	cd 01       	movw	r24, r26
    506c:	08 95       	ret

0000506e <__prologue_saves__>:
    506e:	2f 92       	push	r2
    5070:	3f 92       	push	r3
    5072:	4f 92       	push	r4
    5074:	5f 92       	push	r5
    5076:	6f 92       	push	r6
    5078:	7f 92       	push	r7
    507a:	8f 92       	push	r8
    507c:	9f 92       	push	r9
    507e:	af 92       	push	r10
    5080:	bf 92       	push	r11
    5082:	cf 92       	push	r12
    5084:	df 92       	push	r13
    5086:	ef 92       	push	r14
    5088:	ff 92       	push	r15
    508a:	0f 93       	push	r16
    508c:	1f 93       	push	r17
    508e:	cf 93       	push	r28
    5090:	df 93       	push	r29
    5092:	cd b7       	in	r28, 0x3d	; 61
    5094:	de b7       	in	r29, 0x3e	; 62
    5096:	ca 1b       	sub	r28, r26
    5098:	db 0b       	sbc	r29, r27
    509a:	0f b6       	in	r0, 0x3f	; 63
    509c:	f8 94       	cli
    509e:	de bf       	out	0x3e, r29	; 62
    50a0:	0f be       	out	0x3f, r0	; 63
    50a2:	cd bf       	out	0x3d, r28	; 61
    50a4:	09 94       	ijmp

000050a6 <__epilogue_restores__>:
    50a6:	2a 88       	ldd	r2, Y+18	; 0x12
    50a8:	39 88       	ldd	r3, Y+17	; 0x11
    50aa:	48 88       	ldd	r4, Y+16	; 0x10
    50ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    50ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    50b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    50b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    50b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    50b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    50b8:	b9 84       	ldd	r11, Y+9	; 0x09
    50ba:	c8 84       	ldd	r12, Y+8	; 0x08
    50bc:	df 80       	ldd	r13, Y+7	; 0x07
    50be:	ee 80       	ldd	r14, Y+6	; 0x06
    50c0:	fd 80       	ldd	r15, Y+5	; 0x05
    50c2:	0c 81       	ldd	r16, Y+4	; 0x04
    50c4:	1b 81       	ldd	r17, Y+3	; 0x03
    50c6:	aa 81       	ldd	r26, Y+2	; 0x02
    50c8:	b9 81       	ldd	r27, Y+1	; 0x01
    50ca:	ce 0f       	add	r28, r30
    50cc:	d1 1d       	adc	r29, r1
    50ce:	0f b6       	in	r0, 0x3f	; 63
    50d0:	f8 94       	cli
    50d2:	de bf       	out	0x3e, r29	; 62
    50d4:	0f be       	out	0x3f, r0	; 63
    50d6:	cd bf       	out	0x3d, r28	; 61
    50d8:	ed 01       	movw	r28, r26
    50da:	08 95       	ret

000050dc <_exit>:
    50dc:	f8 94       	cli

000050de <__stop_program>:
    50de:	ff cf       	rjmp	.-2      	; 0x50de <__stop_program>
